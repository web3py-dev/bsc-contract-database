// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IERC20 {
    function transfer(address recipient, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
}

contract SmartBC_Withdraw {
    IERC20 public usdtToken;
    address public owner;
    uint256 public totalWithdraw;

    mapping(address => uint256) public userBalances;

    event OwnerChanged(address indexed previousOwner, address indexed newOwner);

    modifier onlyOwner() {
        require(msg.sender == owner, "Caller is not the owner");
        _;
    }

    constructor(address _usdtTokenAddress) {
        usdtToken = IERC20(_usdtTokenAddress);
        owner = msg.sender;
    }

    function changeOwner(address newOwner) public onlyOwner {
        require(newOwner != address(0), "New owner is the zero address");
        emit OwnerChanged(owner, newOwner);
        owner = newOwner;
    }

    function userWithdraw(uint256 amount) public onlyOwner {
        require(usdtToken.balanceOf(address(this)) >= amount, "Insufficient contract balance");
        require(usdtToken.transfer(owner, amount), "Withdraw failed");
        totalWithdraw += amount;
    }

}