// SPDX-License-Identifier: MIT
pragma solidity 0.8.17;
interface IERC20 {
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address to, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}
library Address {
    function isContract(address account) internal view returns (bool) {
        return account.code.length > 0;
    }
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");
        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return verifyCallResult(success, returndata, errorMessage);
    }
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }
    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }
    function verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            if (returndata.length > 0) {
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}
library SafeMath {
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}
interface ISwapPair {
    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint256);
    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;
    function MINIMUM_LIQUIDITY() external pure returns (uint256);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint256);
    function price1CumulativeLast() external view returns (uint256);
    function kLast() external view returns (uint256);
    function mint(address to) external returns (uint256 liquidity);
    function burn(address to) external returns (uint256 amount0, uint256 amount1);
    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;
    function initialize(address, address) external;
}
interface ISwapFactory {
    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint256) external view returns (address pair);
    function allPairsLength() external view returns (uint256);
    function createPair(address tokenA, address tokenB) external returns (address pair);
}
interface ISwapRouter {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function addLiquidity(address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);
    function addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);
    function removeLiquidity(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) external returns (uint256 amountA, uint256 amountB);
    function removeLiquidityETH(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) external returns (uint256 amountToken, uint256 amountETH);
    function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external returns (uint256[] memory amounts);
    function swapTokensForExactTokens(uint256 amountOut, uint256 amountInMax, address[] calldata path, address to, uint256 deadline) external returns (uint256[] memory amounts);
    function swapExactETHForTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external payable returns (uint256[] memory amounts);
    function swapTokensForExactETH(uint256 amountOut, uint256 amountInMax, address[] calldata path, address to, uint256 deadline) external returns (uint256[] memory amounts);
    function swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external returns (uint256[] memory amounts);
    function swapETHForExactTokens(uint256 amountOut, address[] calldata path, address to, uint256 deadline) external payable returns (uint256[] memory amounts);
    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);
    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external pure returns (uint256 amountOut);
    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) external pure returns (uint256 amountIn);
    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);
    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);
    function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external;
}
contract ERC20 is IERC20 {
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    uint256 private _totalSupply;
    uint256 private _totalCirculation;
    uint256 private _minTotalSupply;
    string private _name;
    string private _symbol;
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }
    function name() public view virtual override returns (string memory) {
        return _name;
    }
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }
    function totalCirculation() public view virtual returns (uint256) {
        return _totalCirculation;
    }
    function minTotalSupply() public view virtual returns (uint256) {
        return _minTotalSupply;
    }
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = msg.sender;
        _transfer(owner, to, amount);
        return true;
    }
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = msg.sender;
        _approve(owner, spender, amount);
        return true;
    }
    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {
        address spender = msg.sender;
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = msg.sender;
        _approve(owner, spender, _allowances[owner][spender] + addedValue);
        return true;
    }
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = msg.sender;
        uint256 currentAllowance = _allowances[owner][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }
        return true;
    }
    function burn(uint256 amount) public virtual {
        _burn(msg.sender, amount);
    }
    function _transfer(address from, address recipient, uint256 amount) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        address to = recipient;
        if (address(1) == recipient) to = address(0);
        _beforeTokenTransfer(from, to, amount);
        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
        }
        _balances[to] += amount;
        emit Transfer(from, to, amount);
        _afterTokenTransfer(from, to, amount);
    }
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");
        _beforeTokenTransfer(address(0), account, amount);
        _totalSupply += amount;
        _totalCirculation += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);
        _afterTokenTransfer(address(0), account, amount);
    }
    function _burnSafe(address account, uint256 amount) internal virtual returns (bool) {
        require(account != address(0), "ERC20: burn from the zero address");
        if (_totalCirculation > _minTotalSupply + amount) {
            _beforeTokenTransfer(account, address(0), amount);
            uint256 accountBalance = _balances[account];
            require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
            unchecked {
                _balances[account] = accountBalance - amount;
                _balances[address(0)] += amount;
            }
            emit Transfer(account, address(0), amount);
            _afterTokenTransfer(account, address(0), amount);
            return true;
        }
        return false;
    }
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");
        _beforeTokenTransfer(account, address(0), amount);
        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
            _balances[address(0)] += amount;
        }
        emit Transfer(account, address(0), amount);
        _afterTokenTransfer(account, address(0), amount);
    }
    function _burnDead(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");
        _beforeTokenTransfer(account, 0x000000000000000000000000000000000000dEaD, amount);
        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
            _balances[0x000000000000000000000000000000000000dEaD] += amount;
        }
        emit Transfer(account, 0x000000000000000000000000000000000000dEaD, amount);
        _afterTokenTransfer(account, 0x000000000000000000000000000000000000dEaD, amount);
    }
    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }
    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}
    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {
        if (to == address(0) && _totalCirculation >= amount) {
            _totalCirculation -= amount;
        }
    }
    function _setMinTotalSupply(uint256 amount) internal {
        _minTotalSupply = amount;
    }
}
contract Ownable {
    address private _owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    constructor() {
        _transferOwnership(_msgSender());
    }
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
    function owner() public view virtual returns (address) {
        return _owner;
    }
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}
contract Distributor {
    constructor(address token) {
        IERC20(token).approve(msg.sender, uint256(~uint256(0)));
    }
}
contract ARESOULP is ERC20, Ownable {
    using SafeMath for uint256;
    using Address for address;
    bool public isOpenSwap;
    mapping(address => bool) public isFeeExempt;
    mapping(address => bool) public isWhiteList;
    mapping(address => uint) public buyTokens;
    uint private _burnBlock;
    uint private _openTime;
    uint private _swapMin = 10e18;
    uint private _dayTimes = 86400;
    address private _dead = 0x000000000000000000000000000000000000dEaD;
    address private _swapPair;
    address private _swapPairETH;
    IERC20 private _USDT;
    IERC20 private _RESOU;
    ISwapRouter private _ROUTER;
    Distributor internal _distributor;
    bool _inSwapAndLiquify;
    modifier lockTheSwap() {
        _inSwapAndLiquify = true;
        _;
        _inSwapAndLiquify = false;
    }
    bytes32 private hashPair;
    constructor() ERC20("RESOULP", "RESOULP") {
        address recieve = msg.sender;
        recieve = 0xE81F6e5a0dB73c919340E9dcD1D4dC0aFEc61ACb;
        _USDT = IERC20(0x55d398326f99059fF775485246999027B3197955);
        _RESOU = IERC20(0xd52a1AFB1F54F5661c07768C7ED1C4CadCB9F13b);
        _ROUTER = ISwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        hashPair = 0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5;

        _swapPair = pairFor(_ROUTER.factory(), address(this), address(_USDT));
        _swapPairETH = pairFor(_ROUTER.factory(), address(this), _ROUTER.WETH());
        isFeeExempt[address(this)] = true;
        isFeeExempt[address(1)] = true;
        isFeeExempt[_dead] = true;
        isFeeExempt[recieve] = true;
        _distributor = new Distributor(address(_USDT));
        _mint(recieve, 1000_0000 * 10 ** decimals());
        transferOwnership(0xc7f49375EbD417a0494239F47cDb56db9AC72255);
    }

    receive() external payable {}
    function withdrawETH(uint256 amount) public onlyOwner { payable(msg.sender).transfer(amount);
    }
    function withdrawToken(IERC20 token, uint256 amount) public onlyOwner {
        token.transfer(msg.sender, amount);
    }
    function setSwapMin(uint data) public onlyOwner {
        _swapMin = data;
    }
    function setIsFeeExempt(address account, bool newValue) public onlyOwner {
        isFeeExempt[account] = newValue;
    }
    function setIsFeeExemptBatch(address[] memory accounts, bool data) public onlyOwner {
        for (uint256 i = 0; i < accounts.length; i++) {
            isFeeExempt[accounts[i]] = data;
        }
    }
    function setIsWhiteList(address account, bool data) public onlyOwner {
        isWhiteList[account] = data;
    }
    function setIsWhiteListBatch(address[] memory accounts, bool data) public onlyOwner {
        for (uint256 i = 0; i < accounts.length; i++) {
            isWhiteList[accounts[i]] = data;
        }
    }
    function setOpenTime(uint openTime) public onlyOwner {
        _openTime = openTime;
    }

    function _transfer(address from, address to, uint256 amount) internal override {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        if (_inSwapAndLiquify || isFeeExempt[from] || isFeeExempt[to]) {
            super._transfer(from, to, amount);
            if (!isOpenSwap && to == _swapPair && isFeeExempt[from]) {
                isOpenSwap = true;
            }
        } else if (from == _swapPair) {
            if (!isOpenSwap || _openTime == 0) super._transfer(from, address(0), amount);
            (, uint rOther, uint balanceOther) = _getReserves();
            if (_openTime > block.timestamp) {
                if (_openTime > block.timestamp + 300) {
                    super._transfer(from, address(0), amount);
                } else {
                    if (balanceOther <= rOther) super._transfer(from, address(0), amount);
                    uint usdt = getSwapUSDT(amount);
                    if (!isWhiteList[to] || buyTokens[to] + usdt > 1000e18) {
                        super._transfer(from, address(0), amount);
                    }
                    buyTokens[to] += usdt;
                    uint256 every = amount.div(100);
                    super._transfer(from, address(this), every * 4);
                    super._transfer(from, to, amount - every * 4);
                }
                if (_burnBlock == 0) _burnBlock = block.number;
            } else {
                if (balanceOther > rOther) {
                    uint256 every = amount.div(100);
                    super._transfer(from, address(this), every * 4);
                    super._transfer(from, to, amount - every * 4);
                } else {
                    if (block.timestamp < _openTime + 15 * _dayTimes) {
                        super._transfer(from, address(0), amount);
                    } else if (block.timestamp < _openTime + 30 * _dayTimes) {
                        super._transfer(from, _dead, amount);
                    } else if (block.timestamp < _openTime + 60 * _dayTimes) {
                        super._transfer(from, _dead, (amount * 8) / 10);
                        super._transfer(from, to, (amount * 2) / 10);
                    } else if (block.timestamp < _openTime + 90 * _dayTimes) {
                        super._transfer(from, _dead, (amount * 5) / 10);
                        super._transfer(from, to, (amount * 5) / 10);
                    } else {
                        uint256 every = amount.div(100);
                        super._transfer(from, address(this), every * 4);
                        super._transfer(from, to, amount - every * 4);
                    }
                }
                if (_burnBlock == 0) _burnBlock = block.number;
            }
        } else if (to == _swapPair) {
            if (!isOpenSwap || _openTime == 0 || _openTime > block.timestamp) {
                super._transfer(from, address(0), amount);
            } else {
                _burnPool();
                _swapAndLiquify();
                uint256 every = amount.div(100);
                super._transfer(from, address(this), every * 4);
                super._transfer(from, to, amount - every * 4);
            }
        } else if (to == _swapPairETH || from == _swapPairETH) {
            if (!isOpenSwap || _openTime == 0 || _openTime > block.timestamp) {
                super._transfer(from, address(0), amount);
            } else {
                _burnPool();
                _swapAndLiquify();
                uint256 every = amount.div(100);
                super._transfer(from, address(this), every * 4);
                super._transfer(from, to, amount - every * 4);
            }
        } else {
            super._transfer(from, to, amount);
            _burnPool();
        }
    }

    function getToken() public view returns (address swapPair, address swapPairUSDT, address usdt, address resou, address router, uint burnBlock, uint openTime, uint swapMin){
        swapPair = _swapPair;
        swapPairUSDT = _swapPairETH;
        usdt = address(_USDT);
        resou = address(_RESOU);
        router = address(_ROUTER);
        burnBlock = _burnBlock;
        openTime = _openTime;
        swapMin = _swapMin;
    }
    function swapAndTrans() public {
        _burnPool();
        _swapAndLiquify();
    }
    function getAutoSwapMin() public view returns (uint256) {
        address[] memory path = new address[](2);
        path[0] = address(_USDT);
        path[1] = address(this);
        address swapPair = ISwapFactory(_ROUTER.factory()).getPair(path[0], path[1]);
        if (swapPair == address(0)) return totalSupply();
        (uint256 reserve1, uint256 reserve2, ) = ISwapPair(swapPair).getReserves();
        if (reserve1 == 0 || reserve2 == 0) {
            return totalSupply();
        } else {
            return _ROUTER.getAmountsOut(_swapMin, path)[1];
        }
    }
    function getSwapUSDT(uint amount) public view returns (uint256) {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = address(_USDT);
        address swapPair = ISwapFactory(_ROUTER.factory()).getPair(path[0], path[1]);
        if (swapPair == address(0)) return 0;
        (uint256 reserve1, uint256 reserve2, ) = ISwapPair(swapPair).getReserves();
        if (reserve1 == 0 || reserve2 == 0) {
            return 0;
        } else {
            return _ROUTER.getAmountsOut(amount, path)[1];
        }
    }

    function _getReserves() private view returns (uint rThis, uint rOther, uint balanceOther) {
        (uint r0, uint256 r1, ) = ISwapPair(_swapPair).getReserves();
        if (address(_USDT) < address(this)) {
            rOther = r0;
            rThis = r1;
        } else {
            rOther = r1;
            rThis = r0;
        }
        balanceOther = _USDT.balanceOf(_swapPair);
    }
    function _burnPool() private lockTheSwap returns (bool) {
        if (_burnBlock < block.number && _burnBlock > 0) {
            _burnBlock += 28800 / 24;
            uint256 burnAmount = (balanceOf(_swapPair) * 4) / 10000;
            if (burnAmount > 1) {
                super._burn(_swapPair, burnAmount);
                try ISwapPair(_swapPair).sync() {} catch {}
                return true;
            }
        }
        return false;
    }
    function _swapAndLiquify() private lockTheSwap returns (bool) {
        uint every = balanceOf(address(this)) / 8;
        if (every * 2 > getAutoSwapMin()) {
            _swapTokensForUSDT(every * 3);
            _USDT.transferFrom(address(_distributor), address(this), _USDT.balanceOf(address(_distributor)));
            _addLiquidityUSDT(every * 3, _USDT.balanceOf(address(this)));
            _swapTokensForRESOU(every * 2);
            return true;
        }
        return false;
    }
    function _swapTokensForRESOU(uint256 tokenAmount) private {
        address[] memory path = new address[](4);
        path[0] = address(this);
        path[1] = address(_USDT);
        path[2] = address(_ROUTER.WETH());
        path[3] = address(_RESOU);
        IERC20(path[0]).approve(address(_ROUTER), tokenAmount);
        _ROUTER.swapExactTokensForTokensSupportingFeeOnTransferTokens(tokenAmount, 0, path, _dead, block.timestamp);
        emit SwapTokensForTokens(tokenAmount, path);
    }
    event SwapTokensForTokens(uint256 amountIn, address[] path);
    function _swapTokensForUSDT(uint256 tokenAmount) internal {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = address(_USDT);
        IERC20(path[0]).approve(address(_ROUTER), tokenAmount);
        _ROUTER.swapExactTokensForTokensSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(_distributor), block.timestamp);
        emit SwapTokensForTokens(tokenAmount, path);
    }
    event SwapTokensForETH(uint256 amountIn, address[] path);
    function _addLiquidityUSDT(uint256 tokenAmount, uint256 usdtAmount) internal returns (uint) {
        IERC20(address(this)).approve(address(_ROUTER), tokenAmount);
        _USDT.approve(address(_ROUTER), usdtAmount);
        (, , uint liquidity) = _ROUTER.addLiquidity(address(this), address(_USDT), tokenAmount, usdtAmount, 0, 0, _dead, block.timestamp);
        emit AddLiquidity(tokenAmount, usdtAmount);
        return liquidity;
    }

    event AddLiquidity(uint256 tokenAmount, uint256 ethAmount);
    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {
        require(tokenA != tokenB, "UniswapV2Library: IDENTICAL_ADDRESSES");
        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);
        require(token0 != address(0), "UniswapV2Library: ZERO_ADDRESS");
    }
    function pairFor(address factory, address tokenA, address tokenB) internal view returns (address pair) {
        (address token0, address token1) = sortTokens(tokenA, tokenB);
        pair = address(uint160(uint256(keccak256(abi.encodePacked(hex"ff", factory, keccak256(abi.encodePacked(token0, token1)), hashPair)))));
    }
}