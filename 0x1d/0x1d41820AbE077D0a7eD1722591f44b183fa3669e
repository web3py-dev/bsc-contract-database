// SPDX-License-Identifier: MIT

pragma solidity ^0.6.0;

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}


interface IPancakeRouter {
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
}

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies in extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        // solhint-disable-next-line no-inline-assembly
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain`call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        // solhint-disable-next-line max-line-length
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) { // Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}



contract SmartContractTheRichCrowd {
    address public impl;
    address public contractOwner;

    uint[] public packages;
    uint[] public packagesX3Pro;
    uint[] public autopoolPackage;

    // Constructor
    constructor() public {
        contractOwner = msg.sender;

        // Packages (converted to 18 decimals)
        packages = [
            35e18,    // 35 USDT = 35 * 10^18
            40e18,    // 40 USDT
            70e18,    // 70 USDT
            225e18,   // 225 USDT
            675e18,   // 675 USDT
            1250e18,  // 1250 USDT
            2000e18,  // 2000 USDT
            5000e18,  // 5000 USDT
            8000e18,  // 8000 USDT
            12000e18  // 12000 USDT
        ];


        // X3 Pro Packages (converted to 18 decimals)
        packagesX3Pro = [
            100e18,   // 100 USDT
            150e18,   // 150 USDT
            250e18,   // 250 USDT
            450e18,   // 450 USDT
            800e18,   // 800 USDT
            1500e18,  // 1500 USDT
            2800e18,  // 2800 USDT
            5000e18,  // 5000 USDT
            8000e18,  // 8000 USDT
            12000e18  // 12000 USDT
        ];


        // Autopool Packages (already in 18 decimals)
        autopoolPackage = [
            75e18,    // 75 * 10^18
            450e18,   // 450 * 10^18
            1800e18,  // 1800 * 10^18
            7200e18,  // 7200 * 10^18
            36000e18, // 36000 * 10^18
            144000e18,// 144000 * 10^18
            216000e18 // 216000 * 10^18
        ];


    }


    struct User {
        uint id;
        address referrer;
        uint partnersCount;
        uint currentPackage;
        uint currentPoolPackage;
        string name;
        mapping(uint8 => bool) activeX2Levels;
        mapping(uint8 => POOLX2) x2Matrix;
    }
    
    struct POOLX2 {
        address user_id;
        address upline_id;
        uint down_count;
        uint team;
    }

    struct POOLX2DOWNLINE {
        address user_id;
        address downline_id;
        uint level;
    }

     struct POOLX3DOWNLINE {
        address user_id;
        address downline_id;
        uint level;
    }

    struct X2INCOME {
        uint256 amount;
        bool processed;
    }

    mapping(string => X2INCOME) public x2_income;

    struct X3INCOME {
        uint256 amount;
        bool processed;
    }

    mapping(string => X3INCOME) public x3_income;

    struct X3PROINCOME {
        uint256 amount;
        bool processed;
    }

    mapping(string => X3PROINCOME) public x3_pro_income;

    uint8 public LAST_LEVEL;
    uint public lastUserId;


    mapping(uint8 => uint) public levelPrice;

    IERC20 public depositToken;
    
    uint public BASIC_PRICE;

    bool public locked;
    bool public poolStatus;

    address public multisig;

    mapping(address => User) public users;
    mapping(address => POOLX2) public x2users;
    mapping(address => POOLX2DOWNLINE) public x2usersdownline;
    mapping(address => POOLX3DOWNLINE) public x3usersdownline;
    mapping(address => uint) public userLevels;
    mapping(uint => address) public idToAddress;
    mapping(uint => address) public userIds;
    mapping(address => uint) public balances; 

    address public constant usdtAddress = 0x55d398326f99059fF775485246999027B3197955; // USDT contract address
    address public tokenAddress = 0xC8A11F433512C16ED895245F34BCC2ca44eb06bd; // Token contract address
    address public pancakeRouterAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // PancakeSwap router address
    uint256 tokenPrice = 28292186414859338;
    bool public tokenAuto;
    bool public tokenPriceStatus;
    uint8 public constant LEVEL_COUNT = 6;
    
    event Registration(address indexed user, address indexed referrer, uint256 indexed token);
    event UpgradedX2(address indexed user, uint256 indexed plan, uint256 indexed token);
    event UpgradedX3(address indexed user, uint256 indexed plan, uint256 indexed token);


    
}

contract TheRichCrowd is SmartContractTheRichCrowd {
    using SafeERC20 for IERC20;
    
    
    modifier onlyContractOwner() { 
        require(msg.sender == contractOwner, "onlyOwner"); 
        _; 
    }

    modifier onlyUnlocked() { 
        require(!locked || msg.sender == contractOwner, "Contract not init or locked!"); 
        _; 
    }

    function changeLock() external onlyContractOwner() {
        locked = !locked;
    }

    function registerUser(address _user, address _referrer, string memory _name, uint256 _tokens) public onlyUnlocked() {
        uint256 package = getTokenPrice();
        uint256 tokenPackage = (packages[0]/package);
        require(tokenPackage <= _tokens, "Invalid Package");
        uint256 tokenPackageDecimals = (packages[0] * 1 ether)/package;
        require(depositToken.allowance(msg.sender, address(this)) >= tokenPackageDecimals, "Token allowance not set");
        require(depositToken.transferFrom(msg.sender, address(this), tokenPackageDecimals), "KSN transferFrom failed");
        emit Registration(_user, _referrer, _tokens);

    }

    function upgradeX2(uint256 _tokens, uint256 plan) public onlyUnlocked() {
        uint256 package = getTokenPrice();
        uint256 tokenPackage = (packages[plan]/package);
        require(tokenPackage <= _tokens, "Invaild Package X2");
        uint256 tokenPackageDecimals = (packages[plan] * 1 ether)/package;
        require(depositToken.allowance(msg.sender, address(this)) >= tokenPackageDecimals, "Token allowance not set");
        require(depositToken.transferFrom(msg.sender, address(this), tokenPackageDecimals), "KSN transferFrom failed");
        emit UpgradedX2(msg.sender,  plan, _tokens);
    }


    function upgradeX3(uint256 _tokens, uint256 plan) public onlyUnlocked() {
        uint256 package = getTokenPrice();
        uint256 tokenPackage = (autopoolPackage[plan]/package);
        require(tokenPackage <= _tokens, "Invalid Package X3");
        uint256 tokenPackageDecimals = (autopoolPackage[plan] * 1 ether)/package;
        require(depositToken.allowance(msg.sender, address(this)) >= tokenPackageDecimals, "Token allowance not set");
        require(depositToken.transferFrom(msg.sender, address(this), tokenPackageDecimals), "KSN transferFrom failed");
        emit UpgradedX3(msg.sender, plan, _tokens);

    }

    

    function upgradeX3Pro(uint256 _tokens, uint256 plan) public onlyUnlocked() {
        uint256 package = getTokenPrice();
        uint256 tokenPackage = (packagesX3Pro[plan]/package);
        require(tokenPackage <= _tokens, "Invalid Package X3");
        uint256 tokenPackageDecimals = (packagesX3Pro[plan] * 1 ether)/package;
        require(depositToken.allowance(msg.sender, address(this)) >= tokenPackageDecimals, "Token allowance not set");
        require(depositToken.transferFrom(msg.sender, address(this), tokenPackageDecimals), "KSN transferFrom failed");
        emit UpgradedX3(msg.sender, plan, _tokens);

    }

    function initGasFee(address payable _recipient, uint256 _amount) external payable {
        require(msg.value >= _amount, "Insufficient BNB sent");
        _recipient.transfer(msg.value);
    }

    function getUpline(address _user) public view returns (address) {
        address upline = users[_user].referrer;
        return upline;
    }
    

    function getUser(address _user) public view returns (address) {
        address usser = users[_user].referrer;
        return usser;
    }

    function isUserExists(address user) public view returns (bool) {
        return (users[user].id != 0);
    }

    function getTokenPrice() public view returns (uint256) {
        address[] memory path = new address[](2);
        path[0] = tokenAddress;
        path[1] = usdtAddress;
        if(tokenPriceStatus == true){
            (bool success, bytes memory data) = 
            pancakeRouterAddress.staticcall(abi.encodeWithSignature("getAmountsOut(uint256,address[])", 10**18, path));
                if (success && data.length > 0) {
                uint[] memory amounts = abi.decode(data, (uint[]));
                if (amounts.length >= 2 && amounts[1] > 0) {
                    return amounts[1];
                }
            }
            return tokenPrice;
        }else{
            return tokenPrice;
        }

        
    }

    function updateTokenPrice(uint256 _newPrice) public onlyContractOwner {
        tokenPrice = _newPrice;
    }

    function updateDepositAddress(IERC20 _newDepositAddress) public onlyContractOwner {
        depositToken = _newDepositAddress;
    }

    

    function updateAutoTokenPrice(bool _checked) public onlyContractOwner {
        tokenPriceStatus = _checked;
    }

    function initX2Income(string memory _id, uint256[] calldata _amounts, address[] calldata _userWallets) public onlyContractOwner{
        require(!x2_income[_id].processed, "X2 Income already init processed");
        for (uint256 i = 0; i < _amounts.length; i++) {
            uint256 _amount = _amounts[i];
            address _userWallet = _userWallets[i];
            require(depositToken.balanceOf(address(this)) >= _amount, "Insufficient contract balance!");
            require(depositToken.transfer(_userWallet, _amount), "Transfer failed");
        }
        x2_income[_id].processed = true;
    }

    function initX3Income(string memory _id, uint256[] calldata _amounts, address[] calldata _userWallets) public onlyContractOwner{
        require(!x3_income[_id].processed, "X3 Income already init processed");
        for (uint256 i = 0; i < _amounts.length; i++) {
            uint256 _amount = _amounts[i];
            address _userWallet = _userWallets[i];
            require(depositToken.balanceOf(address(this)) >= _amount, "Insufficient contract balance!");
            require(depositToken.transfer(_userWallet, _amount), "Transfer failed");
        }
        x3_income[_id].processed = true;
    }

    function initX3ProIncome(string memory _id, uint256[] calldata _amounts, address[] calldata _userWallets) public onlyContractOwner{
        require(!x3_pro_income[_id].processed, "X3 Income already init processed");
        for (uint256 i = 0; i < _amounts.length; i++) {
            uint256 _amount = _amounts[i];
            address _userWallet = _userWallets[i];
            require(depositToken.balanceOf(address(this)) >= _amount, "Insufficient contract balance!");
            require(depositToken.transfer(_userWallet, _amount), "Transfer failed");
        }
        x3_pro_income[_id].processed = true;
    }

    function x2IncomeProcess(string memory _id) external view returns (bool) {
        return x2_income[_id].processed;
    }

    function x3IncomeProcess(string memory _id) external view returns (bool) {
        return x3_income[_id].processed;
    }

    function x3ProIncomeProcess(string memory _id) external view returns (bool) {
        return x3_pro_income[_id].processed;
    }

    function withdrawLostTokens(address transferTo, address tokenAddress, uint256 amount) public onlyContractOwner {
        if (tokenAddress == address(0)) {
            require(address(this).balance >= amount, "Insufficient balance");
            payable(transferTo).transfer(amount);
        } else {
            IERC20 token = IERC20(tokenAddress);
            uint256 balance = token.balanceOf(address(this));
            require(balance >= amount, "Insufficient token balance");
            token.transfer(transferTo, amount);
        }
    }


}