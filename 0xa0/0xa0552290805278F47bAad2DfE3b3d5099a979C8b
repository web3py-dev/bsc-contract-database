/**
 *Submitted for verification at BscScan.com on 2024-05-21
*/

// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.4;

library SafeMathInt {
    int256 private constant MIN_INT256 = int256(1) << 255;
    int256 private constant MAX_INT256 = ~(int256(1) << 255);

    /**
     * @dev Multiplies two int256 variables and fails on overflow.
     */
    function mul(int256 a, int256 b) internal pure returns (int256) {
        int256 c = a * b;

        // Detect overflow when multiplying MIN_INT256 with -1
        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));
        require((b == 0) || (c / b == a));
        return c;
    }

    /**
     * @dev Division of two int256 variables and fails on overflow.
     */
    function div(int256 a, int256 b) internal pure returns (int256) {
        // Prevent overflow when dividing MIN_INT256 by -1
        require(b != - 1 || a != MIN_INT256);

        // Solidity already throws when dividing by 0.
        return a / b;
    }

    /**
     * @dev Subtracts two int256 variables and fails on overflow.
     */
    function sub(int256 a, int256 b) internal pure returns (int256) {
        int256 c = a - b;
        require((b >= 0 && c <= a) || (b < 0 && c > a));
        return c;
    }

    /**
     * @dev Adds two int256 variables and fails on overflow.
     */
    function add(int256 a, int256 b) internal pure returns (int256) {
        int256 c = a + b;
        require((b >= 0 && c >= a) || (b < 0 && c < a));
        return c;
    }

    /**
     * @dev Converts to absolute value, and fails on overflow.
     */
    function abs(int256 a) internal pure returns (int256) {
        require(a != MIN_INT256);
        return a < 0 ? - a : a;
    }

    function toUint256Safe(int256 a) internal pure returns (uint256) {
        require(a >= 0);
        return uint256(a);
    }
}

library SafeMathUint {
    function toInt256Safe(uint256 a) internal pure returns (int256) {
        int256 b = int256(a);
        require(b >= 0);
        return b;
    }
}

library Math {
    function min(uint x, uint y) internal pure returns (uint z) {
        z = x < y ? x : y;
    }

    function sqrt(uint y) internal pure returns (uint z) {
        if (y > 3) {
            z = y;
            uint x = y / 2 + 1;
            while (x < z) {
                z = x;
                x = (y / x + x) / 2;
            }
        } else if (y != 0) {
            z = 1;
        }
    }
}

library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        address msgSender = msg.sender;
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

interface IERC20 {
    function decimals() external view returns (uint8);

    function symbol() external view returns (string memory);

    function name() external view returns (string memory);

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface ISwapPair {
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);

    function token0() external view returns (address);

    function token1() external view returns (address);

    function totalSupply() external view returns (uint);

    function kLast() external view returns (uint);

    function sync() external;
}

interface IUniswapV2Router01 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function getAmountsOut(uint256 amountIn, address[] calldata path)
    external
    view
    returns (uint256[] memory amounts);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable;

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
    external
    payable
    returns (
        uint256 amountToken,
        uint256 amountETH,
        uint256 liquidity
    );

}

interface IUniswapV2Factory {
    function createPair(
        address tokenA,
        address tokenB
    ) external returns (address pair);

    function getPair(
        address tokenA,
        address tokenB
    ) external view returns (address);

    function feeTo() external view returns (address);
}


interface ICalculateReward {
    function getReward(address account) external view returns (uint256);

    function claimReward(address account) external returns (uint256);

    function setAccount(address account, uint256 amount) external;

    function excludeFromDividends(address account, bool enable) external;

    function setDayMintAmount(uint256 amount) external;
}

interface IDividendTracker {
    function excludeFromDividends(address account, bool b) external;

    function setAccount(address account, uint256 amount) external;

    function process(uint256 gas) external;
}

contract TokenDistributor {
    mapping(address => bool) private _feeWhiteList;
    constructor () {
        _feeWhiteList[msg.sender] = true;
        _feeWhiteList[tx.origin] = true;
    }

    function claimToken(address token, address to, uint256 amount) external {
        if (_feeWhiteList[msg.sender]) {
            IERC20(token).transfer(to, amount);
        }
    }

    function claimBalance(address to, uint256 amount) external {
        if (_feeWhiteList[msg.sender]) {
            _safeTransferETH(to, amount);
        }
    }

    function _safeTransferETH(address to, uint value) internal {
        (bool success,) = to.call{value: value}(new bytes(0));
        if (success) {}
    }

    receive() external payable {}
}

contract CEO is IERC20, Ownable {
    using SafeMath for uint256;
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    string private _name;
    string private _symbol;
    uint8 private _decimals;
    uint256 private _tTotal;
    uint256 private constant MAX = ~uint256(0);
    address private deployAddress;
    IUniswapV2Router02 public _swapRouter;
    address public _mainPair;
    bool private swapping;

    address public marketingAddress = 0xd00C3ab22F4d0C3FB8b7f77c74F71F966d79C6D3;
    address public nodeAddress = 0xDf8bcDF04FaA2D2B2836CD01625055a43768DfA4;

    uint256 public baseFee = 10000;
    uint256 public buyFee = 300;
    uint256 public sellFee = 300;
    uint256 public removeFee = 0;
    uint256 public addFee = 0;

    uint256 public claimRewardFee = 2000;
    ICalculateReward public calculateReward;
    IDividendTracker public lpDividendTracker;
    bool private inSwap;
    address public deadWallet = 0x000000000000000000000000000000000000dEaD;
    mapping(address => bool) public _feeWhiteList;
    mapping(address => bool) public _blackList;
    uint256 public startAddLPBlock;
    uint256 public startTradeBlock;
    uint256 public startTradeTime;
    uint256 public _killRobotBlockNum = 0;
    address public immutable usdt = 0x55d398326f99059fF775485246999027B3197955;

    TokenDistributor public immutable _Distributor;

    mapping(address => bool) private _pairs;
    uint256 public _limitAmount = 0;

    FeeRate public feeRate;
    mapping(address => UserInfo) private _userInfo;
    constructor() {
        require(usdt < address(this), "min");

        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(
            0x10ED43C718714eb63d5aA57B78B54704E256024E
        );
        address __mainPair = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), usdt);
        _name = "CEO";
        _symbol = "CEO";
        _decimals = 18;
        uint256 tokenUnit = 10 ** _decimals;
        uint256 total = 210000000 * tokenUnit;
        uint256 initAmount = 210000000 * tokenUnit;
        _tTotal = total;

        feeRate.nodeRate = 100;
        feeRate.marketingRate = 100;
        feeRate.addRate = 50;
        feeRate.burnRate = 50;
        feeRate.total = 300;


        _swapRouter = _uniswapV2Router;
        _mainPair = __mainPair;

        _pairs[__mainPair] = true;

        _Distributor = new TokenDistributor();
        _feeWhiteList[address(_Distributor)] = true;

        _feeWhiteList[msg.sender] = true;
        _feeWhiteList[address(this)] = true;
        _feeWhiteList[deadWallet] = true;
        _feeWhiteList[address(0)] = true;
        deployAddress = msg.sender;

        _balances[msg.sender] = initAmount;
        _balances[deadWallet] = total - initAmount;

        emit Transfer(address(0), msg.sender, initAmount);
        emit Transfer(address(0), deadWallet, _balances[deadWallet]);
    }
    struct FeeRate {
        uint256 nodeRate;
        uint256 marketingRate;
        uint256 addRate;
        uint256 burnRate;
        uint256 total;
    }

    struct UserInfo {
        uint256 lpAmount;
        bool preLP;
    }
    modifier lockTheSwap {
        inSwap = true;
        _;
        inSwap = false;
    }
    receive() external payable {
        withdrawToken(address(0));
    }

    function symbol() external view override returns (string memory) {
        return _symbol;
    }

    function name() external view override returns (string memory) {
        return _name;
    }

    function decimals() external view override returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account] + getReward(account);
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        if (_allowances[sender][msg.sender] != MAX) {
            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;
        }
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function setFeeRate(FeeRate memory _feeRate) external onlyOwner {
        feeRate = _feeRate;
    }

    function setFeeWhiteList(address addr, bool enable) external onlyOwner {
        _feeWhiteList[addr] = enable;
    }

    function setPairs(address pair, bool enable) external onlyOwner {
        _pairs[pair] = enable;
    }

    function setFee(uint256 _buyFee, uint256 _sellFee, uint256 _removeFee, uint256 _addFee) external onlyOwner {
        buyFee = _buyFee;
        sellFee = _sellFee;
        removeFee = _removeFee;
        addFee = _addFee;
    }

    function setMarketingAddress(address addr1, address _node) external {
        require(msg.sender == deployAddress, "!owner");
        marketingAddress = addr1;
        nodeAddress = _node;
    }

    function excludeMultipleAccountsFromFees(address [] memory addr, bool enable) external onlyOwner {
        for (uint i = 0; i < addr.length; i++) {
            _feeWhiteList[addr[i]] = enable;
        }
    }

    function setTrackerAddress(address _lpTracker) external onlyOwner {

        lpDividendTracker = IDividendTracker(_lpTracker);
        lpDividendTracker.excludeFromDividends(deadWallet, true);
        lpDividendTracker.excludeFromDividends(address(0), true);

        _feeWhiteList[_lpTracker] = true;

    }

    function setCalculateReward(address addr, uint256 _claimRewardFee) external onlyOwner {
        calculateReward = ICalculateReward(addr);
        calculateReward.excludeFromDividends(_mainPair, true);
        calculateReward.excludeFromDividends(deadWallet, true);
        calculateReward.excludeFromDividends(address(0), true);
        calculateReward.excludeFromDividends(address(this), true);

        claimRewardFee = _claimRewardFee;
    }

    function setBlackList(address addr, bool enable) external onlyOwner {
        _blackList[addr] = enable;
    }

    function getUserInfo(address account) public view returns (uint256 lpAmount, uint256 lpBalance, bool preLP)
    {
        lpAmount = _userInfo[account].lpAmount;
        lpBalance = IERC20(_mainPair).balanceOf(account);
        preLP = _userInfo[account].preLP;
    }

    function updateLPAmount(address account, uint256 lpAmount, bool preLP) public onlyOwner {
        _userInfo[account].lpAmount = lpAmount;
        _userInfo[account].preLP = preLP;
    }

    function initLPAmounts(address[] memory accounts, uint256 lpAmount, bool preLP) public onlyOwner {
        uint256 len = accounts.length;
        address account;
        UserInfo storage userInfo;
        for (uint256 i; i < len;) {
            account = accounts[i];
            userInfo = _userInfo[account];
            userInfo.lpAmount = lpAmount;
            userInfo.preLP = preLP;
            calculateReward.setAccount(account, userInfo.lpAmount);
            unchecked{
                ++i;
            }
        }
    }

    function multipleBotlistAddress(address[] memory addr, bool enable) external onlyOwner {
        for (uint i = 0; i < addr.length; i++) {
            _blackList[addr[i]] = enable;
        }
    }


    uint256 public _rewardGas = 400000;

    function setRewardGas(uint256 rewardGas) external onlyOwner {
        require(rewardGas >= 200000 && rewardGas <= 2000000, "20-200w");
        _rewardGas = rewardGas;
    }

    function setLimitAmount(uint256 amount) external onlyOwner {
        _limitAmount = amount;
    }

    function startTrade() external onlyOwner {
        require(0 == startTradeBlock, "trading");
        startTradeBlock = block.number;
        startTradeTime = block.timestamp;
    }

    function getReward(address account) public view returns (uint256) {
        if (_balances[address(0)] > 0) {
            return calculateReward.getReward(account) * (baseFee - claimRewardFee) / baseFee;
        } else {
            return 0;
        }
    }

    function lpBalanceOf(address account) public view returns (uint256){
        return _userInfo[account].lpAmount;
    }

    function modifierCR(address account) private {
        if (account != address(0) && account != deadWallet && account != _mainPair && account != address(this)) {
            uint256 reward = calculateReward.claimReward(account);
            if (reward > 0 && _balances[address(0)] > 0) {
                if (_balances[address(0)] < reward) {
                    reward = _balances[address(0)];
                }
                _balances[address(0)] = _balances[address(0)] - reward;
                uint256 fee = reward * claimRewardFee / baseFee;
                if (fee > 0) {
                    _transfer(address(0), address(lpDividendTracker), fee);
                }
                _takeTransfer(address(0), account, reward - fee);
            }
        }
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        modifierCR(from);
        modifierCR(to);

        require(!_blackList[from] || _feeWhiteList[from], "bL");
        if (startTradeTime > 0 && block.timestamp > (startTradeTime + 86400 * 90)) {
            buyFee = 30;
            sellFee = 30;
        }
        uint256 balance = balanceOf(from);
        require(balance >= amount, "BNE");

        bool isAddLP;
        bool isRemoveLP;

        uint256 addLPLiquidity;
        if (_pairs[to] && msg.sender == address(_swapRouter)) {
            uint256 fee;
            if (!_feeWhiteList[from]) {
                fee = amount * addFee / baseFee;
            }
            addLPLiquidity = _isAddLiquidity(to, amount - fee);
            if (addLPLiquidity > 0) {
                isAddLP = true;
                _userInfo[from].lpAmount += addLPLiquidity;
                if (0 == startTradeBlock) {
                    //   _userInfo[from].preLP = true;
                } else {
                    require(!_userInfo[from].preLP, "pre do not addLPLiquidity");
                }
                try calculateReward.setAccount(from, _userInfo[from].lpAmount){} catch {}
                try lpDividendTracker.setAccount(from, _userInfo[from].lpAmount){} catch {}
            }
        }

        uint256 removeLPLiquidity;
        if (_pairs[from]) {
            removeLPLiquidity = _isRemoveLiquidity(from, amount);
        }
        if (removeLPLiquidity > 0) {
            require(to == tx.origin, "not owner");
            require(_userInfo[to].lpAmount >= removeLPLiquidity, "lp min");
            isRemoveLP = true;
            _userInfo[to].lpAmount -= removeLPLiquidity;
            try calculateReward.setAccount(to, _userInfo[to].lpAmount){} catch {}
            try lpDividendTracker.setAccount(to, _userInfo[to].lpAmount){} catch {}
        }

        bool takeFee;
        if (_pairs[from] || _pairs[to]) {
            if (0 == startAddLPBlock) {
                if (_feeWhiteList[from] && to == _mainPair) {
                    startAddLPBlock = block.number;
                }
            }

            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {
                takeFee = true;
                if (isAddLP) {
                    require(to == _mainPair, "other pool not allowed add");
                }
                if (0 == startTradeBlock) {
                    require(0 < startAddLPBlock && isAddLP, "no open");
                } else {
                    if (block.number < startTradeBlock + _killRobotBlockNum) {
                        _killTransfer(from, to, amount, 100);
                        return;
                    }
                }
            }
        }

        _tokenTransfer(from, to, amount, takeFee, isRemoveLP, isAddLP);

        uint256 limitAmount = _limitAmount;
        if (limitAmount > 0 && to != _mainPair && !_feeWhiteList[to]) {
            require(limitAmount >= balanceOf(to), "Limit");
        }
        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {
            uint256 rewardGas = _rewardGas;
            if (from == _mainPair) {
                rewardGas = rewardGas * 150 / 100;
            }
            try lpDividendTracker.process(rewardGas * 4 / 10) {} catch {}
        }
    }

    function _tokenTransfer(
        address sender,
        address recipient,
        uint256 tAmount,
        bool takeFee,
        bool isRemoveLP,
        bool isAddLP
    ) private {
        _balances[sender] = _balances[sender] - tAmount;
        uint256 feeAmount = 0;
        uint256 burnAmount = 0;

        if (takeFee) {
            bool isSell;
            if (isAddLP) {
                if (addFee > 0) {
                    uint256 fee = tAmount * addFee / baseFee;
                    feeAmount = feeAmount + fee;
                }
            } else if (isRemoveLP) {
                if (_userInfo[recipient].preLP) {
                    burnAmount = tAmount;
                } else {
                    if (removeFee > 0) {
                        uint256 fee = tAmount * removeFee / baseFee;
                        feeAmount = feeAmount + fee;
                    }
                }
            } else if (_pairs[sender]) {//Buy
                if (buyFee > 0) {
                    uint256 fee = tAmount * buyFee / baseFee;
                    feeAmount = feeAmount + fee;
                }
            } else if (_pairs[recipient]) {//Sell
                isSell = true;
                if (sellFee > 0) {
                    uint256 fee = tAmount * sellFee / baseFee;
                    feeAmount = feeAmount + fee;
                }
            }
            if (burnAmount > 0) {
                _takeTransfer(sender, deadWallet, burnAmount);
            }

            if (feeAmount > 0) {
                uint256 total = feeRate.total;
                if (feeRate.burnRate > 0) {
                    _takeTransfer(sender, deadWallet, feeAmount * feeRate.burnRate / total);
                }
                if (feeRate.nodeRate > 0) {
                    _takeTransfer(sender, address(this), feeAmount * feeRate.nodeRate / total);
                }
                if (feeRate.addRate > 0) {
                    _takeTransfer(sender, address(this), feeAmount * feeRate.addRate / total);
                }
                if (feeRate.marketingRate > 0) {
                    _takeTransfer(sender, address(this), feeAmount * feeRate.marketingRate / total);
                }
            }
            if (isSell && !inSwap) {
                swapTokenForFee();
            }
        }
        _takeTransfer(sender, recipient, tAmount - feeAmount - burnAmount);
    }

    function _killTransfer(
        address sender,
        address recipient,
        uint256 tAmount,
        uint256 fee
    ) private {
        _balances[sender] = _balances[sender] - tAmount;
        uint256 feeAmount = tAmount * fee / 100;
        if (feeAmount > 0) {
            _takeTransfer(sender, address(0x000000000000000000000000000000000000dEaD), feeAmount);
        }
        _takeTransfer(sender, recipient, tAmount - feeAmount);
    }

    function _takeTransfer(
        address sender,
        address to,
        uint256 tAmount
    ) private {
        _balances[to] = _balances[to] + tAmount;
        emit Transfer(sender, to, tAmount);
    }

    function _isAddLiquidity(address pair, uint256 amount) internal view returns (uint256 liquidity){
        (uint256 rOther, uint256 rThis, uint256 balanceOther) = _getReserves(pair);
        uint256 amountOther;
        if (rOther > 0 && rThis > 0) {
            amountOther = amount * rOther / rThis;
        }
//isAddLP
        if (balanceOther >= rOther + amountOther) {
            (liquidity,) = calLiquidity(pair, balanceOther, amount, rOther, rThis);
        }
    }

    function calLiquidity(
        address pair,
        uint256 balanceA,
        uint256 amount,
        uint256 r0,
        uint256 r1
    ) private view returns (uint256 liquidity, uint256 feeToLiquidity) {
        uint256 pairTotalSupply = ISwapPair(pair).totalSupply();
        address feeTo = IUniswapV2Factory(_swapRouter.factory()).feeTo();
        bool feeOn = feeTo != address(0);
        uint256 _kLast = ISwapPair(pair).kLast();
        if (feeOn) {
            if (_kLast != 0) {
                uint256 rootK = Math.sqrt(r0 * r1);
                uint256 rootKLast = Math.sqrt(_kLast);
                if (rootK > rootKLast) {
                    uint256 numerator = pairTotalSupply * (rootK - rootKLast) * 8;
                    uint256 denominator = (rootK * 17) + (rootKLast * 8);
                    feeToLiquidity = numerator / denominator;
                    if (feeToLiquidity > 0) pairTotalSupply += feeToLiquidity;
                }
            }
        }
        uint256 amount0 = balanceA - r0;
        if (pairTotalSupply == 0) {
            if (amount0 > 0) {
                liquidity = Math.sqrt(amount0 * amount) - 1000;
            }
        } else {
            liquidity = Math.min(
                (amount0 * pairTotalSupply) / r0,
                (amount * pairTotalSupply) / r1
            );
        }
    }

    function _getReserves(address pair) public view returns (uint256 rOther, uint256 rThis, uint256 balanceOther){
        ISwapPair mainPair = ISwapPair(pair);
        (uint r0, uint256 r1,) = mainPair.getReserves();

        address tokenOther = mainPair.token0() == address(this) ? mainPair.token1() : mainPair.token0();
        if (tokenOther < address(this)) {
            rOther = r0;
            rThis = r1;
        } else {
            rOther = r1;
            rThis = r0;
        }

        balanceOther = IERC20(tokenOther).balanceOf(pair);
    }

    function _isRemoveLiquidity(address pair, uint256 amount) internal view returns (uint256 liquidity){
        (uint256 rOther,, uint256 balanceOther) = _getReserves(pair);
//isRemoveLP
        if (balanceOther < rOther) {
            liquidity = amount * ISwapPair(pair).totalSupply() / (balanceOf(pair) - amount);
        }
    }


    function sellPath() public view returns (address[] memory) {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = usdt;
        return path;
    }

    function swapTokenForFee() private lockTheSwap {
        uint256 thisAmount = balanceOf(address(this));
        uint256 lpDividendTrackerAmount = balanceOf(address(lpDividendTracker));
        if (lpDividendTrackerAmount > 0) {
            _takeTransfer(address(lpDividendTracker), address(this), lpDividendTrackerAmount);
            _balances[address(lpDividendTracker)] = 0;
        }
        uint256 totalTokenAmount = thisAmount + lpDividendTrackerAmount;
        if (0 == totalTokenAmount) {
            return;
        }
        if (balanceOf(address(this)) < totalTokenAmount) {
            return;
        }

        address[] memory sPath = sellPath();
        uint256[] memory amountOuts = _swapRouter.getAmountsOut(totalTokenAmount, sPath);
        if (amountOuts[1] < 200e18) {
            return;
        }

        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = usdt;

        swapTokenToToken(path, totalTokenAmount, address(_Distributor));
        uint256 outUsdt = IERC20(usdt).balanceOf(address(_Distributor));
        _Distributor.claimToken(usdt, address(this), outUsdt);

        if (lpDividendTrackerAmount > 0) {
            IERC20(usdt).transfer(address(lpDividendTracker), outUsdt * lpDividendTrackerAmount / totalTokenAmount);
        }
        if (thisAmount > 0) {
            uint256 thisOutUsdt = outUsdt * thisAmount / totalTokenAmount;
            uint256 total = feeRate.marketingRate + feeRate.addRate + feeRate.nodeRate;
            if (feeRate.marketingRate > 0) {
                IERC20(usdt).transfer(address(marketingAddress), thisOutUsdt * feeRate.marketingRate / total);
            }
            if (feeRate.nodeRate > 0) {
                IERC20(usdt).transfer(address(nodeAddress), thisOutUsdt * feeRate.nodeRate / total);
            }
            if (feeRate.addRate > 0) {
                AddLiquidityLp(thisOutUsdt * feeRate.addRate / total);
            }
        }
        _takeTransfer(address(_mainPair), deadWallet, lpDividendTrackerAmount);
        _balances[address(_mainPair)] = _balances[address(_mainPair)] - lpDividendTrackerAmount;
        ISwapPair(_mainPair).sync();
    }

    function AddLiquidityLp(uint256 amount) private {
        address[] memory path = new address[](2);
        path[0] = usdt;
        path[1] = address(this);
        uint256 buyToken = amount / 2;

        swapTokenToToken(path, buyToken, address(_Distributor));
        uint256 outToken = balanceOf(address(_Distributor));
        _takeTransfer(address(_Distributor), address(this), outToken);
        _balances[address(_Distributor)] = 0;


        IERC20(path[0]).approve(address(_swapRouter), buyToken);
        _approve(address(this), address(_swapRouter), outToken);
        _swapRouter.addLiquidity(usdt, address(this), buyToken, outToken, 0, 0, marketingAddress, block.timestamp);
    }

    function swapToEth(address token, uint256 amount, address to) private {
        IERC20(token).approve(address(_swapRouter), 1e64);
        address[] memory path = new address[](2);
        path[0] = token;
        path[1] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;
        try _swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(
            amount,
            0,
            path,
            to,
            block.timestamp
        ){}catch{}
    }

    function swapTokenToToken(address[] memory path, uint256 amount, address to) private {
        IERC20(path[0]).approve(address(_swapRouter), amount);
        try _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            amount,
            0,
            path,
            to,
            block.timestamp
        ){} catch{}
    }

    function swapEthToToken(address token, uint256 amount, address to) private {
        address[] memory path = new address[](2);
        path[0] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;
        path[1] = token;
        try _swapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(
            0,
            path,
            to,
            block.timestamp
        ){} catch{}
    }

    function withdrawToken(address _token) public {
        if (_token == address(0)) {
            payable(deployAddress).send(address(this).balance);
        } else {
            if (_token != address(this)) {
                try IERC20(_token).transfer(deployAddress, IERC20(_token).balanceOf(address(this))) {}catch{}
            }
        }
    }
}