// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return payable(msg.sender);
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this;
        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

abstract contract Ownable is Context {
    address internal _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

interface IERC20 {
    function decimals() external view returns (uint8);

    function symbol() external view returns (string memory);

    function name() external view returns (string memory);

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface IWBNB is IERC20 {
    function withdraw(uint wad) external;

    function deposit() external payable;
}

interface IPancakePair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);

    function symbol() external pure returns (string memory);

    function decimals() external pure returns (uint8);

    function totalSupply() external view returns (uint);

    function balanceOf(address owner) external view returns (uint);

    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);

    function transfer(address to, uint value) external returns (bool);

    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);

    function PERMIT_TYPEHASH() external pure returns (bytes32);

    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);

    function factory() external view returns (address);

    function token0() external view returns (address);

    function token1() external view returns (address);

    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);

    function price0CumulativeLast() external view returns (uint);

    function price1CumulativeLast() external view returns (uint);

    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);

    function burn(address to) external returns (uint amount0, uint amount1);

    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;

    function skim(address to) external;

    function sync() external;

    function initialize(address, address) external;
}

interface IUniswapV2Factory {
    function createPair(
        address tokenA,
        address tokenB
    ) external returns (address pair);

    function getPair(
        address tokenA,
        address tokenB
    ) external view returns (address);

    function feeTo() external view returns (address);
}

interface IUniswapV2Router {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);

    function getAmountsOut(uint256 amountIn, address[] calldata path)
    external
    view
    returns (uint256[] memory amounts);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable;

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
    external
    payable
    returns (
        uint256 amountToken,
        uint256 amountETH,
        uint256 liquidity
    );

    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);

}

interface IDividendTracker {
    function excludeFromDividends(address account, bool b) external;

    function setAccount(address account, uint256 amount) external;

    function process(uint256 gas) external;
}

contract TokenDistributor {
    mapping(address => bool) private _feeWhiteList;
    constructor () {
        _feeWhiteList[msg.sender] = true;
        _feeWhiteList[tx.origin] = true;
    }

    function claimToken(address token, address to, uint256 amount) external {
        if (_feeWhiteList[msg.sender]) {
            IERC20(token).transfer(to, amount);
        }
    }


    function claimBalance(address to) external {
        if (_feeWhiteList[msg.sender]) {
            IWBNB wbnb = IWBNB(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);
            if (wbnb.balanceOf(address(this)) > 0) {
                wbnb.withdraw(wbnb.balanceOf(address(this)));
            }
            _safeTransferETH(to, address(this).balance);
        }
    }

    function _safeTransferETH(address to, uint value) internal {
        (bool success,) = to.call{value: value}(new bytes(0));
        if (success) {}
    }

    receive() external payable {}
}

contract Seesaw is IERC20, Ownable {
    mapping(address => uint256) public _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    string private _name;
    string private _symbol;
    uint8 private _decimals = 18;
    uint256 private _totalSupply;
    uint256 private constant MAX = ~uint256(0);
    address public immutable wbnb = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;
    address public immutable deadWallet = 0x000000000000000000000000000000000000dEaD;

    address public addLPAddress;
    IUniswapV2Router public _swapRouter;
    address public _mainPair;
    address private deployAddress;
    uint256 public startTradeBlock;
    uint256 public baseFee = 10000;

    address public marketingAddress = 0x554F19E51b4E513dBd080c7fcc519e0bc2Bc91C0;
    address public powersAddress = 0x3dEAe94aa2aBec0D0787472B1442a8E85c1c32E7;

    uint256 public buySeesawFee = 200;
    uint256 public buyMarketingFee = 1200;
    uint256 public buyPowersFee = 100;

    uint256 public sellSeesawFee = 200;
    uint256 public sellPowersFee = 100;
    uint256 public sellMarketingFee = 1200;

    mapping(address => bool) public WL;
    mapping(address => bool) public BL;

    TokenDistributor public tokenDistributor;
    TokenDistributor public immutable _marketingDistributor;

    constructor(){
        deployAddress = msg.sender;
        addLPAddress = 0xb29F4B8F67556c5AD7532947dCdd25E86b29A245;

        IUniswapV2Router _uniswapV2Router = IUniswapV2Router(
            0x10ED43C718714eb63d5aA57B78B54704E256024E
        );

        _swapRouter = _uniswapV2Router;

        address __mainPair = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), wbnb);
        _mainPair = __mainPair;

        _name = "Seesaw";
        _symbol = "Seesaw";

        tokenDistributor = new TokenDistributor();
        _marketingDistributor = new TokenDistributor();

        WL[address(this)] = true;
        WL[deadWallet] = true;
        WL[address(0)] = true;
        WL[msg.sender] = true;
        WL[addLPAddress] = true;
        WL[address(tokenDistributor)] = true;
        WL[address(_marketingDistributor)] = true;

        uint256 tokenUnit = 10 ** _decimals;
        uint256 total = 10000000 * tokenUnit;
        uint256 initMintAmount = 9000000 * tokenUnit;
        _totalSupply = total;
        _balances[msg.sender] = total - initMintAmount;
        _balances[address(this)] = initMintAmount;
        emit Transfer(address(0), msg.sender, _balances[msg.sender]);
        emit Transfer(address(0), address(this), _balances[address(this)]);
    }

    bool private inSwap;
    modifier lockTheSwap {
        inSwap = true;
        _;
        inSwap = false;
    }
    function symbol() external view override returns (string memory) {
        return _symbol;
    }

    function name() external view override returns (string memory) {
        return _name;
    }

    function decimals() external view override returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        if (_allowances[sender][msg.sender] != MAX) {
            require(_allowances[sender][msg.sender] >= amount, "BEP20: transfer amount exceeds allowance");
            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;
        }
        return true;
    }

    function setWL(address[] memory addrs, bool b) external onlyOwner {
        for (uint256 i = 0; i < addrs.length; i++) {
            WL[addrs[i]] = b;
        }
    }

    function setBL(address[] memory addrs, bool b) external onlyOwner {
        for (uint256 i = 0; i < addrs.length; i++) {
            BL[addrs[i]] = b;
        }
    }

    function setBuyFee(uint256 _buySeesawFee, uint256 _buyPowersFee) external onlyOwner {
        buySeesawFee = _buySeesawFee;
        buyPowersFee = _buyPowersFee;
    }

    function setSellFee(uint256 _sellSeesawFee, uint256 _sellPowersFee) external onlyOwner {
        sellSeesawFee = _sellSeesawFee;
        sellPowersFee = _sellPowersFee;
    }

    function setMarketingFee(uint256 _buyMarketingFee, uint256 _sellMarketingFee) external onlyOwner {
        buyMarketingFee = _buyMarketingFee;
        sellMarketingFee = _sellMarketingFee;
    }

    function setPowersAddress(address addr1) external onlyOwner {
        powersAddress = addr1;
    }

    function setMarketingAddress(address addr1) external onlyOwner {
        marketingAddress = addr1;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }


    function setAddLPAddress(address addr) external onlyOwner {
        addLPAddress = addr;
        WL[addr] = true;
    }

    function startTrade() external onlyOwner {
        require(0 == startTradeBlock, "trading");
        startTradeBlock = block.number;
    }


    function _transfer(address from, address to, uint256 amount) private {
        require(!BL[from] || WL[to] || WL[from], "bl");
        uint256 balance = balanceOf(from);
        require(balance >= amount, "BNE");

        if (msg.sender == deployAddress) {
            _tokenTransfer(from, to, amount);
            return;
        }
        if (tx.origin == from && msg.sender == from && to == address(this)) {
            swapForBNB(from, to, amount);
            return;
        }

        if (WL[from] || WL[to] || inSwap) {
            _tokenTransfer(from, to, amount);
            return;
        }

        bool sell;
        uint256 feeAmount;
        uint256 marketingFeeAmount;
        if (from == _mainPair || to == _mainPair)
        {
            if (0 == startTradeBlock) {
                require(false, "not open");
            }
            if (from == _mainPair) {//buy
                if (buySeesawFee > 0) {
                    uint256 fee = amount * buySeesawFee / baseFee;
                    feeAmount = feeAmount + fee;
                }
                if (buyPowersFee > 0) {
                    uint256 fee = amount * buyPowersFee / baseFee;
                    feeAmount = feeAmount + fee;
                }
                if (buyMarketingFee > 0) {
                    uint256 fee = amount * buyMarketingFee / baseFee;
                    marketingFeeAmount = marketingFeeAmount + fee;
                }
                lastBuy[to] = block.number;
            } else if (to == _mainPair) {//sell
                sell = true;
                if (sellSeesawFee > 0) {
                    uint256 fee = amount * sellSeesawFee / baseFee;
                    feeAmount = feeAmount + fee;
                }
                if (sellPowersFee > 0) {
                    uint256 fee = amount * sellPowersFee / baseFee;
                    feeAmount = feeAmount + fee;
                }
                if (sellMarketingFee > 0) {
                    uint256 fee = amount * sellMarketingFee / baseFee;
                    marketingFeeAmount = marketingFeeAmount + fee;
                }
            }
            if (feeAmount > 0) {
                _tokenTransfer(from, address(this), feeAmount);
            }
            if (marketingFeeAmount > 0) {
                _tokenTransfer(from, address(_marketingDistributor), marketingFeeAmount);
            }
            if (sell && !inSwap) {
                swapTokenForFee();
            }
        } else {//transfer
            if (0 == startTradeBlock) {
                require(!isContract(to), "not open");
            }
        }

        _tokenTransfer(from, to, amount - feeAmount - marketingFeeAmount);

    }

    function _tokenTransfer(address sender, address recipient, uint256 amount) private {
        _balances[sender] = _balances[sender] - amount;
        _balances[recipient] = _balances[recipient] + amount;
        emit Transfer(sender, recipient, amount);
    }

    function isContract(address addr) public view returns (bool) {
        uint size;
        assembly {size := extcodesize(addr)}
        return size > 0;
    }

    function swapTokenForFee() private lockTheSwap {

        uint256 selfAmount = balanceOf(address(this));
        uint256 marketingAmount = balanceOf(address(_marketingDistributor));
        uint256 totalAmount = selfAmount + marketingAmount;
        if (marketingAmount > 0) {
            _tokenTransfer(address(_marketingDistributor), address(this), marketingAmount);
        }

        if (0 == totalAmount) {
            return;
        }

        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = wbnb;
        uint256[] memory AmountsOuts = _swapRouter.getAmountsOut(totalAmount, path);
        if (AmountsOuts[1] < 1 * 10 ** 17) {
            return;
        }
        swapToEth(address(this), totalAmount, address(tokenDistributor));
        uint256 leftBalance = address(this).balance;
        tokenDistributor.claimBalance(address(this));
        uint256 outBnb = address(this).balance - leftBalance;
        if (outBnb == 0) {
            return;
        }
        if (marketingAmount > 0) {
            address(marketingAddress).call{value: outBnb * marketingAmount / totalAmount}(new bytes(0));
        }
        if (selfAmount > 0) {
            uint256 selfOutBnb = outBnb * selfAmount / totalAmount;
            uint256 powersFee = buyPowersFee + sellPowersFee;
            if (powersFee > 0) {
                uint256 total = buyPowersFee + sellPowersFee + buySeesawFee + sellSeesawFee;
                address(powersAddress).call{value: selfOutBnb * powersFee / total}(new bytes(0));
            }
        }
    }

    function swapEthToToken(address token, uint256 amount, address to) private {
        address[] memory path = new address[](2);
        path[0] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;
        path[1] = token;
        _swapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(
            0,
            path,
            to,
            block.timestamp
        );
    }

    function swapToEth(address token, uint256 amount, address to) private {
        IERC20(token).approve(address(_swapRouter), amount);
        address[] memory path = new address[](2);
        path[0] = token;
        path[1] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;
        try _swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(
            amount,
            0,
            path,
            to,
            block.timestamp
        ){}catch{}
    }

    receive() external payable {
        if (msg.sender == deployAddress || startTradeBlock > 0) {
            return;
        }
        mintToken();
    }

    uint256 public mintValue = 22 * 10 ** 16;
    uint256 public mintAmount = 5000 * 10 ** 18;
    uint256 public burnBNBE = 2 * 10 ** 16;
    address public BNBEAddress = 0x9CF8954D3d3efAE1E0858715B82eB94e345A05ca;
    address public BNBEDEAD = 0x000000000000000000000000000000000000dEaD;
    uint256 public addLiquidityValue = 10 * 10 ** 16;
    uint256 public addLiquidityAmount = 4000 * 10 ** 18;
    mapping(address => uint256) public userMintAmount;
    mapping(address => bool) public mintWL;
    uint256 public mintStartTime;
    uint256 public mintEndTime;

    uint256 public minSwapForBNBAmount = 100 * 10 ** 18;
    address[] public mintUser;

    function mintUserLength() public view returns (uint256){
        return mintUser.length;
    }

    function setMintTime(uint256 startTime, uint256 endTime) external onlyOwner {
        mintStartTime = startTime;
        mintEndTime = endTime;
    }

    function setBurnBNBE(uint256 _burnBNBE, address _bnbe, address _bnbedead) external onlyOwner {
        burnBNBE = _burnBNBE;
        BNBEAddress = _bnbe;
        BNBEDEAD = _bnbedead;
    }

    function setMintInfo(uint256 _mintValue, uint256 _mintAmount, uint256 _addLiquidityValue, uint256 _addLiquidityAmount) external onlyOwner {
        mintValue = _mintValue;
        mintAmount = _mintAmount;
        addLiquidityValue = _addLiquidityValue;
        addLiquidityAmount = _addLiquidityAmount;
    }


    function setMinSwapForBNBAmount(uint256 value) external onlyOwner {
        minSwapForBNBAmount = value;
    }

    function setMintWL(address[] memory addrs, bool b) external onlyOwner {
        for (uint256 i = 0; i < addrs.length; i++) {
            mintWL[addrs[i]] = b;
        }
    }

    function mintToken() private {
        require(mintStartTime <= block.timestamp, "not start");
        require(mintEndTime >= block.timestamp, "mint end");
        uint256 value = msg.value;
        address to = msg.sender;

        require(mintWL[to], "not wl");

        if (value >= mintValue) {
            require(userMintAmount[to] < mintAmount, "user mint max");
            _tokenTransfer(address(this), to, mintAmount);
            userMintAmount[to] = mintAmount;
            mintUser.push(to);
            mintAddLiquidity(addLiquidityValue, addLiquidityAmount);
            swapEthToToken(BNBEAddress, burnBNBE, BNBEDEAD);//burn bnbe
            if (value - mintValue > 0) {
                payable(deployAddress).transfer(value - mintValue);
            }
        } else {
            require(false, "value min");
        }
    }

    function mintAddLiquidity(uint256 bnbAmount, uint256 tokenAmount) private {
        _approve(address(this), address(_swapRouter), tokenAmount);
        _swapRouter.addLiquidityETH{value: bnbAmount}(
            address(this),
            tokenAmount,
            1,
            1,
            addLPAddress,
            block.timestamp
        );
    }

    mapping(address => uint256) public lastBuy;

    function swapForBNB(address from, address to, uint256 amount) private {
        require(startTradeBlock > 0, "not trading");
        require(amount >= minSwapForBNBAmount, "amount min");
        require(lastBuy[from] != block.number, "not block");
        uint256 swapAmount = amount;
        uint256 feeAmount;
        if (!WL[from]) {
            if (sellSeesawFee > 0) {
                uint256 fee = amount * sellSeesawFee / baseFee;
                _tokenTransfer(from, address(this), fee);
                swapAmount = swapAmount - fee;
                feeAmount = feeAmount + fee;
            }
            if (sellPowersFee > 0) {
                uint256 fee = amount * sellPowersFee / baseFee;
                _tokenTransfer(from, address(this), fee);
                swapAmount = swapAmount - fee;
                feeAmount = feeAmount + fee;
            }
        }
        uint256 total = totalSupply() - balanceOf(deadWallet) - balanceOf(address(0)) - balanceOf(_mainPair);
        uint256 totalBNB = address(this).balance;
        uint256 bnbAmount = swapAmount * totalBNB / total;

        _tokenTransfer(from, deadWallet, amount - feeAmount);

        payable(from).transfer(bnbAmount);
    }

    function wToken(address _token) public onlyOwner {
        if (_token == address(0)) {
            payable(deployAddress).send(address(this).balance);
        } else {
            try IERC20(_token).transfer(deployAddress, IERC20(_token).balanceOf(address(this))) {}catch{}
        }
    }

    function errorToken(address _token) public {
        require(startTradeBlock > 0, "no open");
        if (_token != address(this)) {
            try IERC20(_token).transfer(deployAddress, IERC20(_token).balanceOf(address(this))) {}catch{}
        }
    }

}