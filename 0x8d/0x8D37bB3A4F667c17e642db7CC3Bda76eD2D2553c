
// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 *
 * ==== Security Considerations
 *
 * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature
 * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be
 * considered as an intention to spend the allowance in any specific way. The second is that because permits have
 * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should
 * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be
 * generally recommended is:
 *
 * ```solidity
 * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {
 *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}
 *     doThing(..., value);
 * }
 *
 * function doThing(..., uint256 value) public {
 *     token.safeTransferFrom(msg.sender, address(this), value);
 *     ...
 * }
 * ```
 *
 * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of
 * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also
 * {SafeERC20-safeTransferFrom}).
 *
 * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so
 * contracts should have entry points that don't rely on permit.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     *
     * CAUTION: See Security Considerations above.
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}


// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.20;

import {IERC20} from "../IERC20.sol";
import {IERC20Permit} from "../extensions/IERC20Permit.sol";
import {Address} from "../../../utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    /**
     * @dev An operation with an ERC20 token failed.
     */
    error SafeERC20FailedOperation(address token);

    /**
     * @dev Indicates a failed `decreaseAllowance` request.
     */
    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        forceApprove(token, spender, oldAllowance + value);
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no
     * value, non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {
        unchecked {
            uint256 currentAllowance = token.allowance(address(this), spender);
            if (currentAllowance < requestedDecrease) {
                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);
            }
            forceApprove(token, spender, currentAllowance - requestedDecrease);
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval
     * to be set to zero before setting it to a non-zero value, such as USDT.
     */
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data);
        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {
            revert SafeERC20FailedOperation(address(token));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;
    }
}


// File: @openzeppelin/contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)

pragma solidity ^0.8.20;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev The ETH balance of the account is not enough to perform the operation.
     */
    error AddressInsufficientBalance(address account);

    /**
     * @dev There's no code at `target` (it is not a contract).
     */
    error AddressEmptyCode(address target);

    /**
     * @dev A call to an address target failed. The target may have reverted.
     */
    error FailedInnerCall();

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        if (address(this).balance < amount) {
            revert AddressInsufficientBalance(address(this));
        }

        (bool success, ) = recipient.call{value: amount}("");
        if (!success) {
            revert FailedInnerCall();
        }
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason or custom error, it is bubbled
     * up by this function (like regular Solidity function calls). However, if
     * the call reverted with no returned reason, this function reverts with a
     * {FailedInnerCall} error.
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        if (address(this).balance < value) {
            revert AddressInsufficientBalance(address(this));
        }
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target
     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an
     * unsuccessful call.
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata
    ) internal view returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            // only check if target is a contract if the call was successful and the return data is empty
            // otherwise we already know that it was a contract
            if (returndata.length == 0 && target.code.length == 0) {
                revert AddressEmptyCode(target);
            }
            return returndata;
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the
     * revert reason or with a default {FailedInnerCall} error.
     */
    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            return returndata;
        }
    }

    /**
     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.
     */
    function _revert(bytes memory returndata) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert FailedInnerCall();
        }
    }
}


// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)

pragma solidity ^0.8.20;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant NOT_ENTERED = 1;
    uint256 private constant ENTERED = 2;

    uint256 private _status;

    /**
     * @dev Unauthorized reentrant call.
     */
    error ReentrancyGuardReentrantCall();

    constructor() {
        _status = NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be NOT_ENTERED
        if (_status == ENTERED) {
            revert ReentrancyGuardReentrantCall();
        }

        // Any calls to nonReentrant after this point will fail
        _status = ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == ENTERED;
    }
}


// File: contracts/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}


// File: contracts/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;

import {Context} from "./Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function creator() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (creator() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function create(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: contracts/UPITFUTURE.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.27;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
import "./Ownable.sol";

interface IPancakeSwapRouter {
    function getAmountsOut(uint256 amountIn, address[] memory path) external view returns (uint256[] memory amounts);
    function factory() external view returns (address);
}

interface IPancakeSwapFactory {
    function getPair(address tokenA, address tokenB) external view returns (address pair);
}

interface IPancakeSwapPair {
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
}

contract UPITFUTURE is Ownable, ReentrancyGuard {
    //////////////////////////////
    // Type
    //////////////////////////////
    enum OneTimePackage {
        None,
        Fifteen,
        Sixty,
        TwoHundredForty,
        NineHundredSixty,
        ThreeThousandEightHundredForty,
        FifteenThousandThreeHundredSixty,
        SixtyOneThousandFourHundredForty,
        TwoHundredFortyFiveThousandSevenHundredSixty,
        NineHundredEightyThreeThousandForty,
        ThreeMillionNineHundredThirtyTwoThousandOneHundredSixty,
        SevenMillionEightHundredSixtyFourThousandThreeHundredTwenty
    }
    enum U3Package {
        None,
        Fifty
    }
    enum StakingPackage {
        None,
        Twenty,
        Hundred,
        FiveHundred,
        TwoThousandFiveHundred,
        FiveThousand,
        SevenThousandFiveHundred,
        TenThousand
    }
    enum UTSPackage {
        None,
        OneHundredTen,
        TwoHundredTwenty,
        FiveHundredFifty,
        OneThousandOneHundred,
        TwoThousandTwoHundred,
        FiveThousandFiveHundred,
        ElevenThousand,
        TwentyTwoThousand,
        FiftyFiveThousand,
        OneHundredTenThousand
    }

    //////////////////////////////
    // State Variables
    //////////////////////////////
    uint256 private constant FEE = 2e18;
    address public constant BNB_ADDRESS = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;
    address public constant USDT_ADDRESS = 0x55d398326f99059fF775485246999027B3197955;
    address public constant TOKEN_ADDRESS = 0xC9F641c5EF43C845897Aaf319e80bceA729d2a1F;
    IERC20 private constant token = IERC20(TOKEN_ADDRESS);

    address private ownerFundsWallet;
    IPancakeSwapRouter private pancakeSwapRouter;
    mapping(address => address) private referee_referrer;
    mapping(address => uint256) private withdrawable_balance;
    mapping(address => uint256) private blacklist;
    mapping(address => UTSPackage[]) private utsPurchases;
    mapping(address => OneTimePackage) public oneTimePurchases;
    mapping(address => U3Package) public u3Purchases;
    mapping(address => StakingPackage) public stakingPurchases;
    mapping(OneTimePackage => uint256) public oneTimePrices;
    mapping(U3Package => uint256) public u3Prices;
    mapping(StakingPackage => uint256) public stakingPrices;
    mapping(UTSPackage => uint256) public utsPrices;

    // New mapping to store deposit timestamps for UTS packages
    mapping(address => mapping(UTSPackage => uint256)) private utsDepositTimestamps;

    //////////////////////////////
    // Events
    //////////////////////////////
    event Register(address indexed buyer, address indexed referrer, uint8 packageTier, uint256 amount);
    event Activation(address indexed buyer, string packageName, uint8 packageTier, uint256 amount);
    event FundDistribution(address indexed user, uint256 amount);
    event ClaimBonus(address indexed user, uint256 amount);
    event Withdraw(address indexed user, uint256 amount);
    event ClaimPackage(address indexed user, string packageName, uint8 packageTier, uint256 amount);

    //////////////////////////////
    // Custom Errors
    //////////////////////////////
    error UserBlacklisted();
    error ReferrerCannotBeZeroAddress();
    error UserAlreadyRegistered();
    error UserNotRegistered();
    error InsufficientAmount();
    error NotEligibleForPackage();
    error U3PackageAlreadyBought();
    error AlreadyBoughtThisPackage();
    error PoolDoesNotExist();
    error InsufficientOutputAmount();
    error InsufficientLiquidity();
    error LengthsMismatch();
    error InsufficientWithdrawableBalance();
    error InvalidPackage();
    error LockPeriodNotOver();
    error OneTimePackageRequirementNotMet();
    error U3PackageRequirementNotMet();
    error PackageNotFound();
    error NotEnoughGas();
    error InsufficientTokenBalance();

    //////////////////////////////
    // Modifiers
    //////////////////////////////
    modifier isNotBlacklisted(address user) {
        if (blacklist[user] != 0) revert UserBlacklisted();
        _;
    }

    constructor(address initialOwner, address router, address fundsWallet) Ownable(initialOwner) {
        pancakeSwapRouter = IPancakeSwapRouter(router);
        initialise();
        ownerFundsWallet = fundsWallet;
    }

    // Needs to be called only once for initialisation of the packages
    function initialise() private {
        _initialiseOneTimePackages();
        _initialiseStakingPackages();
        _initialiseUTSPackages();
    }

    function _initialiseOneTimePackages() private {
        oneTimePrices[OneTimePackage.Fifteen] = 15 * 1e18;
        oneTimePrices[OneTimePackage.Sixty] = 60 * 1e18;
        oneTimePrices[OneTimePackage.TwoHundredForty] = 240 * 1e18;
        oneTimePrices[OneTimePackage.NineHundredSixty] = 960 * 1e18;
        oneTimePrices[OneTimePackage.ThreeThousandEightHundredForty] = 3840 * 1e18;
        oneTimePrices[OneTimePackage.FifteenThousandThreeHundredSixty] = 15360 * 1e18;
        oneTimePrices[OneTimePackage.SixtyOneThousandFourHundredForty] = 61440 * 1e18;
        oneTimePrices[OneTimePackage.TwoHundredFortyFiveThousandSevenHundredSixty] = 245760 * 1e18;
        oneTimePrices[OneTimePackage.NineHundredEightyThreeThousandForty] = 983040 * 1e18;
        oneTimePrices[OneTimePackage.ThreeMillionNineHundredThirtyTwoThousandOneHundredSixty] = 3932160 * 1e18;
        oneTimePrices[OneTimePackage.SevenMillionEightHundredSixtyFourThousandThreeHundredTwenty] = 7864320 * 1e18;
        u3Prices[U3Package.Fifty] = 50 * 1e18;
    }

    function _initialiseStakingPackages() private {
        stakingPrices[StakingPackage.Twenty] = 20 * 1e18;
        stakingPrices[StakingPackage.Hundred] = 100 * 1e18;
        stakingPrices[StakingPackage.FiveHundred] = 500 * 1e18;
        stakingPrices[StakingPackage.TwoThousandFiveHundred] = 2500 * 1e18;
        stakingPrices[StakingPackage.FiveThousand] = 5000 * 1e18;
        stakingPrices[StakingPackage.SevenThousandFiveHundred] = 7500 * 1e18;
        stakingPrices[StakingPackage.TenThousand] = 10000 * 1e18;
    }

    function _initialiseUTSPackages() private {
        utsPrices[UTSPackage.OneHundredTen] = 110 * 1e18;
        utsPrices[UTSPackage.TwoHundredTwenty] = 220 * 1e18;
        utsPrices[UTSPackage.FiveHundredFifty] = 550 * 1e18;
        utsPrices[UTSPackage.OneThousandOneHundred] = 1100 * 1e18;
        utsPrices[UTSPackage.TwoThousandTwoHundred] = 2200 * 1e18;
        utsPrices[UTSPackage.FiveThousandFiveHundred] = 5500 * 1e18;
        utsPrices[UTSPackage.ElevenThousand] = 11000 * 1e18;
        utsPrices[UTSPackage.TwentyTwoThousand] = 22000 * 1e18;
        utsPrices[UTSPackage.FiftyFiveThousand] = 55000 * 1e18;
        utsPrices[UTSPackage.OneHundredTenThousand] = 110000 * 1e18;
    }

    function qualifyOneTimeUsers(
        address[] calldata users,
        address[] calldata referrers,
        OneTimePackage[] calldata packageTier
    ) external onlyOwner nonReentrant {
        require(users.length == packageTier.length && users.length == referrers.length, "UPIT: length mismatch");
        uint256 length = users.length;
        for (uint256 i = 0; i < length; i++) {
            _registerFirstTime(users[i], referrers[i]);
            oneTimePurchases[users[i]] = packageTier[i];
        }
    }

    function qualifyU3(address[] calldata users, address[] calldata referrers) external onlyOwner nonReentrant {
        require(users.length == referrers.length, "UPIT: length mismatch");
        uint256 length = users.length;
        for (uint256 i = 0; i < length; i++) {
            _registerFirstTime(users[i], referrers[i]);
            u3Purchases[users[i]] = U3Package.Fifty;
        }
    }

    function qualifyUTS(address[] calldata users, address[] calldata referrers, UTSPackage[] calldata packageTier)
        external
        onlyOwner
        nonReentrant
    {
        require(users.length == referrers.length && users.length == packageTier.length, "UPIT: length mismatch");
        uint256 length = users.length;
        for (uint256 i = 0; i < length; i++) {
            _registerFirstTime(users[i], referrers[i]);
            utsPurchases[users[i]].push(packageTier[i]);
            utsDepositTimestamps[users[i]][packageTier[i]] = block.timestamp;
        }
    }

    function _registerFirstTime(address user, address referrer) private {
        if (referrer == address(0)) revert ReferrerCannotBeZeroAddress();
        // Set the referee_referrer for that user
        referee_referrer[user] = referrer;
        // Make this conditional such that if the user has already been registered, it doesn't get overwritten
        oneTimePurchases[user] =
            oneTimePurchases[user] == OneTimePackage.None ? OneTimePackage.Fifteen : oneTimePurchases[user];
        uint256 packageTierAmount = getTokenAmountForUSD(oneTimePrices[OneTimePackage.Fifteen]);
        emit Register(user, referrer, uint8(OneTimePackage.Fifteen), packageTierAmount);
    }

    // Can only register with one time packages
    function register(address referrer, OneTimePackage packageTier) external payable nonReentrant {
        if (referrer == address(0)) revert ReferrerCannotBeZeroAddress();
        uint256 packageTierAmount = getTokenAmountForUSD(oneTimePrices[packageTier]);
        // Revert if the user has already been registered
        if (referee_referrer[msg.sender] != address(0)) revert UserAlreadyRegistered();
        // Set the referee_referrer for that user
        referee_referrer[msg.sender] = referrer;
        // Approval is needed on the token contract to this contract before transfer
        token.transferFrom(msg.sender, address(this), packageTierAmount);
        // Set the package amount as well, which is the highest he has purchased till now ($50)
        oneTimePurchases[msg.sender] = packageTier;
        deductFee(FEE);
        emit Register(msg.sender, referrer, uint8(packageTier), packageTierAmount);
    }

    function activationOneTime(OneTimePackage packageTier) external payable nonReentrant isNotBlacklisted(msg.sender) {
        if (referee_referrer[msg.sender] == address(0)) revert UserNotRegistered();
        uint256 packageTierAmount = getTokenAmountForUSD(oneTimePrices[packageTier]);
        buyOneTimePackage(msg.sender, packageTier);
        token.transferFrom(msg.sender, address(this), packageTierAmount);
        deductFee(FEE);
        emit Activation(msg.sender, "OneTime", uint8(packageTier), packageTierAmount);
    }

    function activationU3(U3Package packageTier) external payable nonReentrant isNotBlacklisted(msg.sender) {
        if (referee_referrer[msg.sender] == address(0)) revert UserNotRegistered();
        uint256 packageTierAmount = getTokenAmountForUSD(u3Prices[packageTier]);
        buyU3Package(msg.sender);
        token.transferFrom(msg.sender, address(this), packageTierAmount);
        deductFee(FEE);
        emit Activation(msg.sender, "U3", uint8(packageTier), packageTierAmount);
    }

    function activationStaking(StakingPackage packageTier) external payable nonReentrant isNotBlacklisted(msg.sender) {
        if (referee_referrer[msg.sender] == address(0)) revert UserNotRegistered();
        uint256 packageTierAmount = getTokenAmountForUSD(stakingPrices[packageTier]);
        buyStakingPackage(msg.sender, packageTier);
        token.transferFrom(msg.sender, address(this), packageTierAmount);
        deductFee(FEE);
        emit Activation(msg.sender, "Staking", uint8(packageTier), packageTierAmount);
    }

    function activationUTS(UTSPackage packageTier) external payable nonReentrant isNotBlacklisted(msg.sender) {
        if (referee_referrer[msg.sender] == address(0)) revert UserNotRegistered();
        uint256 packageTierAmount = getTokenAmountForUSD(utsPrices[packageTier]);
        buyUTSPackage(msg.sender, packageTier);
        token.transferFrom(msg.sender, address(this), packageTierAmount);
        deductFee(FEE);

        // Store the deposit timestamp
        utsDepositTimestamps[msg.sender][packageTier] = block.timestamp;

        emit Activation(msg.sender, "UTS", uint8(packageTier), packageTierAmount);
    }

    function deductFee(uint256 usdAmount) internal {
        uint256 packageTierAmount = getBNBAmountForUSD(usdAmount);
        if (msg.value < packageTierAmount) revert InsufficientAmount();
    }

    function buyOneTimePackage(address user, OneTimePackage packageToBuy) internal {
        if (uint256(packageToBuy) != uint256(oneTimePurchases[user]) + 1) revert NotEligibleForPackage();
        oneTimePurchases[user] = packageToBuy;
    }

    function buyU3Package(address user) internal {
        if (u3Purchases[user] != U3Package.None) revert U3PackageAlreadyBought();
        u3Purchases[user] = U3Package.Fifty;
    }

    function buyStakingPackage(address user, StakingPackage packageToBuy) internal {
        // Allow buying in sequence or any previous package if higher one has been bought
        // require(uint(packageToBuy) <= uint(stakingPurchases[user]) + 1, "UPIT: Not eligible for this package");
        stakingPurchases[user] = packageToBuy;
    }

    function buyUTSPackage(address user, UTSPackage packageToBuy) internal {
        uint256 length = utsPurchases[user].length;
        for (uint256 i = 0; i < length; i++) {
            if (utsPurchases[user][i] == packageToBuy) revert AlreadyBoughtThisPackage();
        }
        utsPurchases[user].push(packageToBuy);
    }

    function getTokenAmountForUSD(uint256 usdAmount) public view returns (uint256 amountIn) {
        IPancakeSwapFactory factory = IPancakeSwapFactory(pancakeSwapRouter.factory());
        address pairAddress = factory.getPair(USDT_ADDRESS, TOKEN_ADDRESS);
        if (pairAddress == address(0)) revert PoolDoesNotExist();
        IPancakeSwapPair pair = IPancakeSwapPair(pairAddress);
        (uint112 _reserve0, uint112 _reserve1,) = pair.getReserves();
        uint256 reserveIn = uint256(_reserve1);
        uint256 reserveOut = uint256(_reserve0);
        if (usdAmount == 0) revert InsufficientOutputAmount();
        if (reserveIn == 0 || reserveOut == 0) revert InsufficientLiquidity();
        uint256 numerator = reserveIn * usdAmount * 1000;
        uint256 denominator = (reserveOut - usdAmount) * 997;
        amountIn = numerator / denominator + 1;
    }

    function getBNBAmountForUSD(uint256 usdAmount) public view returns (uint256) {
        address[] memory path = new address[](2);
        path[0] = USDT_ADDRESS;
        path[1] = BNB_ADDRESS;

        uint256[] memory amounts = pancakeSwapRouter.getAmountsOut(usdAmount, path);
        return amounts[1];
    }

    function fundDistribution(address[] calldata recipients, uint256[] calldata amounts)
        external
        onlyOwner
        nonReentrant
    {
        if (recipients.length != amounts.length) revert LengthsMismatch();

        uint256 length = recipients.length;
        for (uint256 i = 0; i < length; i++) {
            // Safe transfer of ETH to each recipient
            address recipient = recipients[i];
            uint256 amount = amounts[i];
            // SafeTransfer IERC20 token
            checkSufficientBalance(amount);
            SafeERC20.safeTransfer(token, recipient, amount);
            emit FundDistribution(recipient, amount);
        }
    }

    // function claimBonus(uint256 amount) external payable nonReentrant isNotBlacklisted(msg.sender) {
    //     deductFee(FEE);
    //     if (withdrawable_balance[msg.sender] < amount) revert InsufficientWithdrawableBalance();
    //     // Make it to 0 first before withdrawal
    //     uint256 withdrawableAmount = getWithdrawableBalance(msg.sender);
    //     withdrawable_balance[msg.sender] -= amount;
    //     // Withdraw and check for success
    //     checkSufficientBalance(withdrawableAmount);
    //     SafeERC20.safeTransfer(token, msg.sender, withdrawableAmount);
    //     emit ClaimBonus(msg.sender, amount);
    // }

    function claimPackage(UTSPackage packageToClaim) external payable nonReentrant isNotBlacklisted(msg.sender) {
        if (referee_referrer[msg.sender] == address(0)) revert UserNotRegistered();
        if (packageToClaim == UTSPackage.None) revert InvalidPackage();

        if (block.timestamp < utsDepositTimestamps[msg.sender][packageToClaim] + 24 hours) revert LockPeriodNotOver();

        deductFee(FEE);

        OneTimePackage requiredOneTimePackage = getRequiredOneTimePackage(packageToClaim);
        if (uint256(oneTimePurchases[msg.sender]) < uint256(requiredOneTimePackage)) {
            revert OneTimePackageRequirementNotMet();
        }

        if (u3Purchases[msg.sender] != U3Package.Fifty) revert U3PackageRequirementNotMet();

        uint256 packageAmount = utsPrices[packageToClaim];
        uint256 tokenAmount = getTokenAmountForUSD(packageAmount);

        _claimUTSPackage(packageToClaim);
        uint256 withdrawableAmount = (tokenAmount * 99) / 100 - getTokenAmountForUSD(FEE);
        checkSufficientBalance(withdrawableAmount);
        SafeERC20.safeTransfer(token, msg.sender, withdrawableAmount);

        // Reset the deposit timestamp after claiming
        utsDepositTimestamps[msg.sender][packageToClaim] = 0;

        emit ClaimPackage(msg.sender, "UTS", uint8(packageToClaim), tokenAmount);
    }

    function _claimUTSPackage(UTSPackage packageToClaim) private {
        uint256 length = utsPurchases[msg.sender].length;
        for (uint256 i = 0; i < length; i++) {
            if (utsPurchases[msg.sender][i] == packageToClaim) {
                utsPurchases[msg.sender][i] = utsPurchases[msg.sender][length - 1];
                utsPurchases[msg.sender].pop();
                return;
            }
        }
        revert PackageNotFound();
    }

    function getRequiredOneTimePackage(UTSPackage utsPackage) public pure returns (OneTimePackage) {
        if (utsPackage <= UTSPackage.OneThousandOneHundred) {
            return OneTimePackage.Sixty;
        } else if (utsPackage <= UTSPackage.TwoThousandTwoHundred) {
            return OneTimePackage.TwoHundredForty;
        } else if (utsPackage <= UTSPackage.FiveThousandFiveHundred) {
            return OneTimePackage.NineHundredSixty;
        } else if (utsPackage <= UTSPackage.TwentyTwoThousand) {
            return OneTimePackage.ThreeThousandEightHundredForty;
        } else {
            return OneTimePackage.FifteenThousandThreeHundredSixty;
        }
    }

    function getReferrer(address referee) external view returns (address) {
        return referee_referrer[referee];
    }

    function getWithdrawableBalance(address user) public view returns (uint256) {
        if ((withdrawable_balance[user] * 99) / 100 > getTokenAmountForUSD(FEE)) {
            return (withdrawable_balance[user] * 99) / 100 - getTokenAmountForUSD(FEE);
        } else {
            return 0;
        }
    }

    function withdrawBalance() external onlyOwner nonReentrant {
        (bool success,) = ownerFundsWallet.call{value: address(this).balance}("");
        if (!success) revert NotEnoughGas();
    }

    function refreshToken() external onlyOwner nonReentrant {
        // Collect token from the contract
        uint256 balance = token.balanceOf(address(this));
        SafeERC20.safeTransfer(token, ownerFundsWallet, balance);
    }

    function exactUser(address user, bool value) external onlyOwner {
        blacklist[user] = value ? 1 : 0;
    }

    function getUTSPackages(address user) external view returns (UTSPackage[] memory) {
        return utsPurchases[user];
    }

    function checkExactUser(address user) external view returns (bool) {
        return blacklist[user] == 0 ? false : true;
    }

    // New function to check remaining lock time
    function getRemainingLockTime(address user, UTSPackage packageTier) external view returns (uint256) {
        uint256 depositTime = utsDepositTimestamps[user][packageTier];
        if (depositTime == 0) {
            return 0; // Package not deposited or already claimed
        }
        uint256 unlockTime = depositTime + 24 hours;
        if (block.timestamp >= unlockTime) {
            return 0; // Lock period is over
        }
        return unlockTime - block.timestamp;
    }

    function checkSufficientBalance(uint256 amount) internal view {
        if (token.balanceOf(address(this)) < amount) {
            revert InsufficientTokenBalance();
        }
    }
}

