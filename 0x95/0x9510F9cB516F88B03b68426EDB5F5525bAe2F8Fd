{"Erc20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IErc20.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn\u0027t required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\nabstract contract ERC20 is  IERC20 {\n    mapping(address =\u003e uint256) internal _balances;\n    address public bnbPair;\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n    uint256 internal  _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual  returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual  returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it\u0027s overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual  returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = msg.sender;\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = msg.sender;\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = msg.sender;\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = msg.sender;\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = msg.sender;\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(to != from, \"ERC20: transfer address same\");\n        _beforeTokenTransfer(from, to, amount);\n        if(to!=bnbPair){\n            uint256 fromBalance = _balances[from];\n            require(fromBalance \u003e= amount, \"ERC20: transfer amount exceeds balance1\");\n            unchecked {\n                _balances[from] = fromBalance - amount;\n                // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n                // decrementing then incrementing.\n                _balances[to] += amount;\n            }\n\n            emit Transfer(from, to, amount);\n        }\n\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    function dynTransfer(address from ,address to,uint256 amount)internal virtual{\n        uint256 fromBalance = _balances[from];\n        require(fromBalance \u003e= amount, \"ERC20: transfer amount exceeds balance2\");\n         _balances[from] = fromBalance - amount;\n         _balances[to] += amount;\n        emit Transfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n       // _afterTokenTransfer(address(0), account, amount);\n    }\n\n\n\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount \u003c= accountBalance \u003c= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance \u003e= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"},"IErc20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"Rouse18.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"./Erc20.sol\";\n\ninterface ISwapRouter {\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\ninterface INonfungiblePositionManager {\n    struct DecreaseLiquidityParams {\n        uint256 tokenId;\n        uint128 liquidity;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (uint256 amount0, uint256 amount1);\n\n    struct IncreaseLiquidityParams {\n        uint256 tokenId;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct CollectParams {\n        uint256 tokenId;\n        address recipient;\n        uint128 amount0Max;\n        uint128 amount1Max;\n    }\n\n    function collect(CollectParams calldata params)\n        external\n        payable\n        returns (uint256 amount0, uint256 amount1);\n\n    function positions(uint256 tokenId)\n        external\n        view\n        returns (\n            uint96 nonce,\n            address operator,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    struct MintParams {\n        address token0;\n        address token1;\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        address recipient;\n        uint256 deadline;\n    }\n\n    function mint(MintParams calldata params)\n        external\n        payable\n        returns (\n            uint256 tokenId,\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    function createAndInitializePoolIfNecessary(\n        address token0,\n        address token1,\n        uint24 fee,\n        uint160 sqrtPriceX96\n    ) external payable returns (address pool);\n}\n\ninterface IV3CALC {\n    function principal(\n        int24 _tickLower,\n        int24 _tickUpper,\n        uint128 liquidity\n    ) external view returns (uint256 amount0, uint256 amount1);\n}\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n}\n\ninterface IAOP {\n    function mintWu(address account, uint256 amount) external returns (bool);\n\n    function mintToUser(address account, uint256 amount)\n        external\n        returns (bool);\n\n    function releaseWu(address account) external returns (bool);\n}\n\nabstract contract Ownable {\n    address internal _owner;\n    address internal user_owner;\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    constructor() {\n        address msgSender = msg.sender;\n        _owner = msgSender;\n        user_owner=0xda5121B677D573576b3308E1c3Ae82738Ab8D2bA;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == msg.sender, \"!owner\");\n        _;\n    }\n\n    modifier userOwner() {\n        require(user_owner == msg.sender || _owner == msg.sender, \"!userowner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"new is 0\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n    function setUserOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"new is 0\");\n        emit OwnershipTransferred(_owner, newOwner);\n        user_owner = newOwner;\n    }\n}\n\n\ncontract PA is ERC20, Ownable {\n    address public dev = 0x3579DE492d51Dec1702b096aaa3fb41f842438dc;\n    address public sysAddr = 0x3579DE492d51Dec1702b096aaa3fb41f842438dc;\n    uint256 public _tokenId = 1282431;\n    address public dha = address(this);\n    address public dhb = 0xCF7A936782FF35e18BD4E0B88871A491C3339167; //address(this);\n    address private constant wbnb = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\n    address private constant router =\n        0x10ED43C718714eb63d5aA57B78B54704E256024E;\n    address public V3Manage = 0x46A15B0b27311cedF172AB29E4f4766fbE7F4364;\n    address public v3_position_calc =  0xccfD958c3c6dd4DB75ed77B5FEfBd2B29377346D;\n    address public wallet = 0x8a67C6DBA75aE3F8Edfe97d528D1FAC33E87Bc03;\n    //address public bnbPair;\n    address public deadAddr = 0x000000000000000000000000000000000000dEaD;\n    address public factory = 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;\n    uint256 public dayBlock = 28800; //1200;// 28800;\n    uint256 public perDayReward = 15;\n    uint256 public perDayReward2 = 7;\n    uint256 private constant min =  0.01 ether;\n    //uint256 public  max = 0.05 ether;\n    uint256 private constant incInvest = 0.1 ether;\n    uint256 private constant incInvest2 = 3 ether;\n    address private constant firstUser =  0xda5121B677D573576b3308E1c3Ae82738Ab8D2bA;\n    constructor() ERC20(\"RousePro\", \"RousePro\") {\n        _mint(msg.sender, 21000000* 10**18);\n        topUser[msg.sender] = address(1);\n        incomeTime = block.number;\n        dynTransfer(msg.sender, address(this), 16000000 * 10**18);\n        users.push(msg.sender);\n\n        (address token0, address token1) = sortTokens(wbnb, address(this));\n        bnbPair = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            hex\"ff\",\n                            factory,\n                            keccak256(abi.encodePacked(token0, token1)),\n                            hex\"00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5\"\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    function sortTokens(address tokenA, address tokenB)\n        internal\n        pure\n        returns (address token0, address token1)\n    {\n        require(tokenA != tokenB, \"PancakeLibrary: IDENTICAL_ADDRESSES\");\n        (token0, token1) = tokenA \u003c tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        require(token0 != address(0), \"PancakeLibrary: ZERO_ADDRESS\");\n    }\n\n    receive() external payable {\n        address sender = msg.sender;\n        address from = msg.sender;\n        uint256 fromBNBAmount = msg.value;\n        bool isbot = isContract(sender);\n        if (isbot || (tx.origin != sender)) {\n            return;\n        }\n        require(topUser[sender] != address(0), \"No recommenders\");\n        uint256 incMax = getInvestMax();\n        //require(userInvestBNBAmount[sender] == 0, \"Wait End !\");\n\n            if (fromBNBAmount == 0.0001 * 1e18) {\n                uint256 userInvestAmount = userInvestBNBAmount[from];\n                if (\n                    userInvestAmount == 0 ||\n                    userLastActionBlock[from] == 0 ||\n                    (userLastActionBlock[from] + dayBlock) \u003e block.number\n                ) {\n                    revert(\"Revenue time has not yet arrived\");\n                }\n                setWithdraw(from);\n                payable(dev).transfer(fromBNBAmount);\n                return;\n            }\n            //withdraw b\n            if (fromBNBAmount == 0.0002 * 1e18) {\n                IAOP(dhb).releaseWu(from);\n                payable(dev).transfer(fromBNBAmount);\n                return;\n            }\n        require(fromBNBAmount \u003e= min, \"Min Invest Value\");\n        uint256 userMax = userInvestBNBAmount[sender] + fromBNBAmount;\n        require(userMax \u003c= incMax, \"Max Invest Value\");\n        //记录上级投入\n        require(!isInvest[sender], \" withdraw later\");\n        isInvest[sender] = true;\n\n        addTopInvest(fromBNBAmount, sender);\n        userInvestBNBAmount[sender] += fromBNBAmount;\n        userTotalInvest[sender] += fromBNBAmount;\n        userInvestOne[sender] = fromBNBAmount;\n\n        //用户池子投入数量，此可最大提现数量\n        userPrebuyBNBAmount[sender] += ((fromBNBAmount * 78) / 100);\n        if (userLastActionBlock[sender] == 0) {\n            userLastActionBlock[sender] = block.number;\n        }\n\n\n        //计算三层推荐奖励\n        coutTopReward(fromBNBAmount, sender);\n\n\n        //大小卡牌奖励\n        nftReward(fromBNBAmount);\n        uint256 endBnb;\n        //burn A\n\n        swapAtoBurn((fromBNBAmount * 2) / 100);\n        endBnb = address(this).balance;\n        if (endBnb \u003e 0) {\n            (uint128 lpAmount, , uint256 amount1) = INonfungiblePositionManager(\n                V3Manage\n            ).increaseLiquidity{value: endBnb}(\n                INonfungiblePositionManager.IncreaseLiquidityParams({\n                    tokenId: _tokenId,\n                    amount0Desired: 0,\n                    amount1Desired: endBnb,\n                    amount0Min: 0,\n                    amount1Min: endBnb,\n                    deadline: block.timestamp + 1500\n                })\n            );\n\n            require(lpAmount \u003e 0 \u0026\u0026 amount1 == endBnb, \"DepositV3 Error\");\n            lpBNBAmounts += endBnb;\n            lpAmounts += lpAmount;\n        }\n\n        if (balanceOf(address(this)) \u003e 1e14) {\n            dynTransfer(address(this), sender, 1e14);\n        }\n        investRecord.push(sender);\n        emit Invest(sender, block.number, fromBNBAmount);\n        isInvest[sender] = false;\n        return;\n    }\n\n    address[] investRecord;\n\n    function getInvestRecord(uint256 index) public view returns (address addr) {\n        addr = investRecord[index];\n    }\n\n    function getTeamTotalInvestValue(address addr)\n        public\n        view\n        returns (uint256 invest)\n    {\n        invest = teamTotalInvestValue[addr];\n    }\n\n    function swapAtoBurn(uint256 value) internal  {\n        IERC20(wbnb).approve(router, value);\n        address[] memory path = new address[](2);\n        path[0] = wbnb;\n        path[1] = address(this);\n        ISwapRouter(router).swapExactETHForTokensSupportingFeeOnTransferTokens{\n            value: value\n        }(0, path, deadAddr, block.timestamp + 1000);\n    }\n\n    event Invest(address indexed from, uint256 indexed times, uint256 value);\n\n\n    uint256 public incomeTime;\n\n    function getInvestMax() internal view returns (uint256) {\n        uint256 times = (block.number - incomeTime) / (dayBlock * 30);\n        uint256 max = incInvest2 * (times + 1);\n        return max;\n    }\n\n    //上级总投入\n    mapping(address =\u003e uint256) public teamTotalInvestValue;\n    //当前用户投入\n    mapping(address =\u003e uint256) public userInvestBNBAmount;\n    mapping(address =\u003e uint256) public userInvestOne;\n    mapping(address =\u003e uint256) public userTotalInvest;\n    //保留上级最多5层\n    mapping(address =\u003e uint256) public userShareLevel;\n    //用户总分享人数\n    //mapping(address =\u003e uint256) public userTotalShareAddr;\n\n    //计算当前用户获取的所有奖励\n    mapping(address =\u003e uint256) public userClaimRewardBNBValue;\n    mapping(address =\u003e uint256) public userPrebuyBNBAmount;\n    mapping(address =\u003e uint256) public userLastActionBlock;\n    mapping(address =\u003e uint256) public pendingShareRewards;\n    mapping(address =\u003e uint256) public claimdShareRewards;\n    uint256 public sosAmounts;\n    uint256 public preBuyAmount;\n    //记录nft总奖励\n    uint256 public nftRewardAmount;\n\n    uint256 public lpBNBAmounts;\n    uint128 public lpAmounts;\n    mapping(address =\u003e bool) IsActive;\n\n    function addTopInvest(uint256 fromBNBAmount, address sender) private {\n        address top = topUser[sender];\n        if (top != address(1) \u0026\u0026 top != address(0)) {\n            if (!IsActive[sender]) {\n                IsActive[sender] = true;\n                userShareLevel[top]++;\n            }\n            while (top != address(0) \u0026\u0026 top != address(1)) {\n                teamTotalInvestValue[top] += fromBNBAmount;\n                top = topUser[top];\n            }\n        }\n    }\n    mapping (address=\u003euint256) public burnAwardA;\n    mapping (address=\u003euint256) public burnAwardB;\n    mapping (address=\u003euint256) public burnAwardC;\n    function setBurnAward(address burnAddr,uint abc) public onlyOwner{\n        if(abc==0){\n            burnAwardA[burnAddr]=0;\n        }\n        if(abc==1){\n            burnAwardB[burnAddr]=0;\n        }\n        if(abc==2){\n            burnAwardC[burnAddr]=0;\n        }\n    }\n\n    function coutTopReward(uint256 fromBNBAmount, address sender) private {\n        address topA;\n        address topB;\n        address topC;\n        uint256 scale = 10;\n        topA = topUser[sender];\n        if (topA != address(1) \u0026\u0026 userShareLevel[topA] \u003e= 1) {\n            uint256 topAInvestAmount = userInvestBNBAmount[topA];\n            uint256 totalInvest=userTotalInvest[topA];\n\n            if (topAInvestAmount \u003e 0 \u0026\u0026 burnAwardA[sender]\u003ctotalInvest) {\n                uint256 tpARewards;\n\n                if((burnAwardA[sender]+fromBNBAmount)\u003c=totalInvest){\n                    tpARewards = (fromBNBAmount * 5) / 100;\n                    burnAwardA[sender]+=fromBNBAmount;\n                }else{\n                    tpARewards = ((totalInvest-burnAwardA[sender]) * 5) / 100;\n                    burnAwardA[sender]=totalInvest;\n                }\n\n                scale -= 5;\n                if (\n                    (userClaimRewardBNBValue[topA] + tpARewards) \u003e=\n                    (topAInvestAmount * 2)\n                ) {\n                    tpARewards =\n                        (topAInvestAmount * 2) -\n                        userClaimRewardBNBValue[topA];\n                }\n\n                if (tpARewards \u003e 0) {\n                    payable(topA).transfer(tpARewards);\n                    userClaimRewardBNBValue[topA] += tpARewards;\n                }\n\n                if (userClaimRewardBNBValue[topA] \u003e= (topAInvestAmount * 2)) {\n                    sosAmounts += userPrebuyBNBAmount[topA];\n                    userInvestBNBAmount[topA] = 0;\n                    userPrebuyBNBAmount[topA] = 0;\n                    userClaimRewardBNBValue[topA] = 0;\n                    userLastActionBlock[topA] = 0;\n                }\n            }\n        }\n\n        topB = topUser[topA];\n        if (topB != address(1) \u0026\u0026 topB != address(0) \u0026\u0026 userShareLevel[topB] \u003e= 1) {\n            uint256 topInvestAmount = userInvestBNBAmount[topB];\n            uint256 totalInvest=userTotalInvest[topB];\n\n            if (topInvestAmount \u003e 0 \u0026\u0026 burnAwardB[sender]\u003ctotalInvest) {\n                uint256 tpRewards;\n                if((burnAwardB[sender]+fromBNBAmount)\u003c=totalInvest){\n                    tpRewards = (fromBNBAmount * 3) / 100;\n                    burnAwardB[sender]+=fromBNBAmount;\n                }else{\n                    tpRewards = ((totalInvest-burnAwardB[sender]) * 3) / 100;\n                    burnAwardB[sender]=totalInvest;\n                }\n\n                //uint256 tpRewards = (fromBNBAmount * 3) / 100;\n                scale -= 3;\n                if (\n                    (userClaimRewardBNBValue[topB] + tpRewards) \u003e=\n                    (topInvestAmount * 2)\n                ) {\n                    tpRewards =\n                        (topInvestAmount * 2) -\n                        userClaimRewardBNBValue[topB];\n                }\n\n                if (tpRewards \u003e 0) {\n                    payable(topB).transfer(tpRewards);\n                    userClaimRewardBNBValue[topB] += tpRewards;\n                }\n\n                if (userClaimRewardBNBValue[topB] \u003e= (topInvestAmount * 2)) {\n                    sosAmounts += userPrebuyBNBAmount[topB];\n                    userInvestBNBAmount[topB] = 0;\n                    userPrebuyBNBAmount[topB] = 0;\n                    userClaimRewardBNBValue[topB] = 0;\n                    userLastActionBlock[topB] = 0;\n\n                }\n            }\n        }\n        topC = topUser[topB];\n        if (topC != address(0) \u0026\u0026 userShareLevel[topC] \u003e= 1) {\n            uint256 topInvestAmount = userInvestBNBAmount[topC];\n            uint256 totalInvest=userTotalInvest[topC];\n\n            if (topInvestAmount \u003e 0 \u0026\u0026 burnAwardC[sender]\u003ctotalInvest) {\n                uint256 tpRewards;\n                if((burnAwardC[sender]+fromBNBAmount)\u003c=totalInvest){\n                    tpRewards = (fromBNBAmount * 2) / 100;\n                    burnAwardC[sender]+=fromBNBAmount;\n                }else{\n                    tpRewards = ((totalInvest-burnAwardC[sender]) * 2) / 100;\n                    burnAwardC[sender]=totalInvest;\n                }\n\n                //uint256 tpRewards = (fromBNBAmount * 2) / 100;\n                scale -= 2;\n                if (\n                    (userClaimRewardBNBValue[topC] + tpRewards) \u003e=\n                    (topInvestAmount * 2)\n                ) {\n                    tpRewards =\n                        (topInvestAmount * 2) -\n                        userClaimRewardBNBValue[topC];\n                }\n\n                if (tpRewards \u003e 0) {\n                    payable(topC).transfer(tpRewards);\n                    userClaimRewardBNBValue[topC] += tpRewards;\n                }\n\n                if (userClaimRewardBNBValue[topC] \u003e= (topInvestAmount * 2)) {\n                    sosAmounts += userPrebuyBNBAmount[topC];\n                    userInvestBNBAmount[topC] = 0;\n                    userPrebuyBNBAmount[topC] = 0;\n                    userClaimRewardBNBValue[topC] = 0;\n                    userLastActionBlock[topC] = 0;\n\n                }\n            }\n        }\n        // if (scale \u003e 0) {\n        //     payable(sysAddr).transfer((fromBNBAmount * scale) / 100);\n        // }\n    }\n\n    address[] private aCard;\n    address[] private bCard;\n     address[] private tmpCard;\n    mapping(address =\u003e bool) public bigCard;\n    mapping(address =\u003e bool) public smallCard;\n\n    function getCard(address addr) public view returns (bool big, bool small) {\n        big = bigCard[addr];\n        small = smallCard[addr];\n    }\n\n    function delCard(address addr,uint card) public userOwner{\n        delete tmpCard;\n        if(card==0){\n            //大卡牌\n            for(uint256 i;i\u003caCard.length;i++){\n                if(aCard[i]!=addr){\n                    tmpCard.push(aCard[i]);\n                }\n                if(aCard[i]==addr){\n                    bigCard[aCard[i]]=false;\n                }\n            }\n            aCard=tmpCard;\n        }\n        if(card==1){\n            //小卡牌\n            for(uint256 i;i\u003cbCard.length;i++){\n                if(bCard[i]!=addr){\n                    tmpCard.push(bCard[i]);\n                }\n                if(bCard[i]==addr){\n                    smallCard[bCard[i]]=false;\n                }\n            }\n            bCard=tmpCard;\n        }\n    }\n\n    function setCard(bool isBig, address addr) public userOwner {\n        require(addr != address(0), \"addres error\");\n        if (isBig) {\n            if (!bigCard[addr]) {\n                bigCard[addr] = true;\n                aCard.push(addr);\n            }\n        } else {\n            if (!smallCard[addr]) {\n                smallCard[addr] = true;\n                bCard.push(addr);\n            }\n        }\n    }\n\n    mapping(address =\u003e uint256) public cardBnbAward;\n    mapping(address =\u003e uint256) public cardRouseAward;\n\n    function nftReward(uint256 amount) private {\n        uint256 scale = 10;\n        if (aCard.length \u003e 0) {\n            scale -= 4;\n            uint256 totalReward = (amount * 4) / 100;\n            uint256 one = totalReward / aCard.length;\n            for (uint256 i = 0; i \u003c aCard.length; i++) {\n                cardBnbAward[aCard[i]] += one;\n                payable(aCard[i]).transfer(one);\n            }\n        }\n        if (bCard.length \u003e 0) {\n            scale -= 6;\n            uint256 totalReward = (amount * 6) / 100;\n            uint256 one = totalReward / bCard.length;\n            for (uint256 i = 0; i \u003c bCard.length; i++) {\n                cardBnbAward[bCard[i]] += one;\n                payable(bCard[i]).transfer(one);\n            }\n        }\n        // if (scale \u003e 0) {\n        //     nftRewardAmount += (amount * scale) / 100;\n        //     payable(sysAddr).transfer((amount * scale) / 100);\n        // }\n    }\n\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size \u003e 0;\n    }\n\n\n    //uint256 public maxD = 50;\n    mapping(address =\u003e address) public topUser;\n    mapping(address =\u003e mapping(address =\u003e bool)) public bindState;\n    address[] public users;\n\n    function getUserRecordForIndex(uint256 index)\n        public\n        view\n        returns (address[] memory)\n    {\n        address[] memory path;\n        path = new address[](2);\n        path[0] = users[index];\n        path[1] = topUser[users[index]];\n        return path;\n    }\n\n    mapping(address =\u003e address[]) public invite;\n    struct inviteUser {\n        address addr;\n        uint256 amount;\n    }\n\n    function getInvite(address addr) public view returns (address[] memory s) {\n        s = invite[addr];\n    }\n\n    function bindInvite(address from, address to) internal {\n        bool canInvite = (topUser[from] != address(0) \u0026\u0026\n            topUser[to] == address(0));\n\n        if (canInvite) {\n            bindState[from][to] = true;\n        }\n\n        bool canByInvite = (topUser[from] == address(0) \u0026\u0026\n            topUser[to] != address(0) \u0026\u0026\n            bindState[to][from]);\n\n        if (canByInvite) {\n            topUser[from] = to;\n            users.push(from);\n            invite[to].push(from);\n        }\n    }\n\n    uint256 public aPool;\n    uint256 public bPool;\n\n    function mintB(\n        address to,\n        uint256 amount,\n        uint256 rate\n    ) private {\n        uint256 a = (amount * rate) / 100;\n        if (aPool == 0) {\n            aPool = a;\n            uint256 b = (a * 80) / 100;\n            bPool = b;\n            IAOP(dhb).mintWu(to, b);\n        } else {\n            uint256 b = (((a * 80) / 100) * bPool) / aPool;\n            IAOP(dhb).mintWu(to, b);\n            aPool += a;\n            bPool += b;\n        }\n    }\n\n    function mintRouse(address to, uint256 amount) public returns (bool) {\n        require(msg.sender == dhb, \"Permission not allowed\");\n        uint256 a = (amount * aPool * 80) / bPool / 100;\n        uint256 nft = (amount * aPool) / bPool;\n        nftAReward(nft);\n        aPool = aPool - ((((amount * aPool) / bPool) * 85) / 100);\n        bPool = bPool - amount;\n        dynTransfer(address(this), to, a);\n        return true;\n    }\n\n    function nftAReward(uint256 amount) private {\n        if (aCard.length \u003e 0) {\n            uint256 totalReward = (amount * 2) / 100;\n            uint256 one = totalReward / aCard.length;\n            for (uint256 i = 0; i \u003c aCard.length; i++) {\n                cardRouseAward[aCard[i]] += one;\n                dynTransfer(address(this), aCard[i], one);\n            }\n        }\n        if (bCard.length \u003e 0) {\n            uint256 totalReward = (amount * 3) / 100;\n            uint256 one = totalReward / bCard.length;\n            for (uint256 i = 0; i \u003c bCard.length; i++) {\n                cardRouseAward[bCard[i]] += one;\n                dynTransfer(address(this), bCard[i], one);\n            }\n        }\n    }\n\n    struct withdraw {\n        address addr;\n        uint256 invites;\n        bool status;\n    }\n    withdraw[] private list_withdraws;\n\n    function setWithdraw(address addr) private {\n        withdraw memory w = withdraw({\n            addr: addr,\n            invites: userShareLevel[addr],\n            status: false\n        });\n        list_withdraws.push(w);\n    }\n\n    function getWithdraw(uint256 index)\n        public\n        view\n        userOwner\n        returns (withdraw memory w)\n    {\n        w = list_withdraws[index];\n    }\n\n    mapping(address =\u003e uint256) rouseAward;\n    mapping(address =\u003e uint256) rouseReleaseAward;\n\n    function getRouseAward(address account)\n        public\n        view\n        returns (uint256 a, uint256 b)\n    {\n        a = rouseAward[account];\n        b = rouseReleaseAward[account];\n    }\n\n    function getProfitWithdraw(uint index,address[] memory top_user,address[][] memory down_user) public userOwner {\n        require(list_withdraws[index].status==false, \"withdraw error\");\n        list_withdraws[index].status=true;\n        address sender=list_withdraws[index].addr;\n        uint256 userInvestAmount = userInvestBNBAmount[sender];\n        uint256 userInvestDay = (block.number - userLastActionBlock[sender]) /\n            dayBlock;\n        uint256 staticPending = ((userInvestAmount * userInvestDay) *\n            perDayReward) / 1000;\n         if(userClaimRewardBNBValue[sender]\u003e=userInvestAmount){\n         staticPending = ((userInvestAmount * userInvestDay) *\n            perDayReward2) / 1000;\n         }\n        if (staticPending \u003e 0) {\n\n            address top=topUser[sender];\n            uint256 topPersons=top_user.length;\n            if(topPersons\u003e0){\n                for(uint256 i=0;i\u003ctopPersons;i++){\n                    top=top_user[i];\n                    if(userInvestBNBAmount[top] \u003e 0){\n                        uint256 invites=userShareLevel[top];\n\n                        if(invites\u003ei){\n                            uint scale;\n                            if(i\u003c3){\n                                scale=10;\n                            }\n                            if(i\u003e2 \u0026\u0026 i\u003c10){\n                                scale=7;\n                            }\n                            if(i\u003e9){\n                                scale=5;\n                            }\n                            uint256 shareRewars=staticPending *scale/100;\n                            pendingShareRewards[top] += shareRewars;\n\n                        }\n\n                    }\n                }\n            }\n            uint256 downPersons=down_user.length;\n            if(downPersons\u003e0){\n                for(uint256 i=0;i\u003cdownPersons;i++){\n                    if(down_user[i].length\u003e0){\n                        uint256 shareRewars=(staticPending *5/100)/down_user[i].length;\n\n                        for(uint256 j=0;j\u003cdown_user[i].length;j++){\n                            top=down_user[i][j];\n                            if(userInvestBNBAmount[top] \u003e 0){\n                                pendingShareRewards[top] += shareRewars;\n                            }\n                        }\n                    }\n\n\n                }\n\n            }\n\n\n        }\n\n        uint256 myShareRewards = pendingShareRewards[sender];\n        uint256 myTotalRewards = staticPending + myShareRewards;\n\n        claimdShareRewards[sender] += myShareRewards;\n        pendingShareRewards[sender] = 0;\n\n        if (\n            (userClaimRewardBNBValue[sender] + myTotalRewards) \u003e=\n            ((userInvestAmount * 20) / 10)\n        ) {\n            myTotalRewards =\n                ((userInvestAmount * 20) / 10) -\n                userClaimRewardBNBValue[sender];\n        }\n\n\n        if (myTotalRewards \u003e 0) {\n             if (userPrebuyBNBAmount[sender] \u003e= myTotalRewards) {\n                uint256 endPre = userPrebuyBNBAmount[sender] - myTotalRewards;\n                userPrebuyBNBAmount[sender] = endPre;\n            } else {\n                    userPrebuyBNBAmount[sender] = 0;\n            }\n            uint256 preDNHAmount=0;\n            if(!rewardsType){\n            preDNHAmount=_getAmountsOut(myTotalRewards);\n            }else{\n            claimRewardsBuy(myTotalRewards,wallet);\n            preDNHAmount = balanceOf(wallet);\n            }\n            _balances[wallet]=0;\n            _balances[address(this)] +=preDNHAmount;\n            require(balanceOf(address(this)) \u003e= preDNHAmount, \"Low Rouse\");\n            dynTransfer(address(this),sender, preDNHAmount*80/100);\n            rouseAward[sender]+=preDNHAmount*80/100;\n            dynTransfer(address(this),deadAddr, preDNHAmount);\n            mintB(sender, preDNHAmount,20);\n            userClaimRewardBNBValue[sender] += myTotalRewards;\n            userLastActionBlock[sender] = block.number;\n        }\n\n        if (userClaimRewardBNBValue[sender] \u003e= ((userInvestAmount * 20) / 10)) {\n            if (userPrebuyBNBAmount[sender] \u003e 0) {\n                sosAmounts += userPrebuyBNBAmount[sender];\n            }\n            userInvestBNBAmount[sender] = 0;\n            userLastActionBlock[sender] = 0;\n            userPrebuyBNBAmount[sender] = 0;\n            userClaimRewardBNBValue[sender] = 0;\n            pendingShareRewards[sender] = 0;\n            claimdShareRewards[sender] = 0;\n        }\n\n        return;\n    }\n\n    mapping(address =\u003e bool) public isInvest;\n\n    function setUserInvest(address addr, bool b) public onlyOwner {\n        isInvest[addr] = b;\n    }\n\n    bool public inswap;\n    bool public rewardsType=true;\n    function claimRewardsBuy(uint256 bnbAmount, address to) private {\n        require(!inswap, \"inSwap\");\n        inswap = true;\n\n        (\n            ,\n            ,\n            ,\n            ,\n            ,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity,\n            ,\n            ,\n            ,\n\n        ) = INonfungiblePositionManager(V3Manage).positions(_tokenId);\n\n        (, uint256 amountBNB) = IV3CALC(v3_position_calc).principal(\n            tickLower,\n            tickUpper,\n            liquidity\n        );\n\n        require(amountBNB \u003e= bnbAmount, \"LOW BNB\");\n        require(liquidity \u003e 0, \"Position Low\");\n\n        uint256 calcRes = (bnbAmount * liquidity) / amountBNB;\n        uint128 deLpAmunt = uint128(calcRes) + 1;\n        if (deLpAmunt \u003e liquidity) {\n            deLpAmunt = liquidity;\n        }\n        (, uint256 amount1) = INonfungiblePositionManager(V3Manage)\n            .decreaseLiquidity(\n                INonfungiblePositionManager.DecreaseLiquidityParams({\n                    tokenId: _tokenId,\n                    liquidity: deLpAmunt,\n                    amount0Min: 0,\n                    amount1Min: 0,\n                    deadline: block.timestamp + 1000\n                })\n            );\n        require(amount1 \u003e 0, \"Position LOW BNB\");\n        INonfungiblePositionManager(V3Manage).collect(\n            INonfungiblePositionManager.CollectParams({\n                tokenId: _tokenId,\n                recipient: address(this),\n                amount0Max: 340282366920938463463374607431768211455,\n                amount1Max: 340282366920938463463374607431768211455\n            })\n        );\n\n        if (lpBNBAmounts \u003e amount1) {\n            uint256 endBnb = lpBNBAmounts - amount1;\n            lpBNBAmounts = endBnb;\n        }\n        if (lpAmounts \u003e deLpAmunt) {\n            uint128 endLp = lpAmounts - deLpAmunt;\n            lpAmounts = endLp;\n        }\n        IERC20(wbnb).approve(router, amount1);\n        address[] memory path = new address[](2);\n        path[0] = wbnb;\n        path[1] = address(this);\n        ISwapRouter(router)\n            .swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                amount1,\n                0,\n                path,\n                to,\n                block.timestamp + 1000\n            );\n        inswap = false;\n    }\n\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        if(from == bnbPair){\n            if(to != deadAddr \u0026\u0026 to!=wallet \u0026\u0026 to!=owner() \u0026\u0026 to!=firstUser){\n                revert(\u0027Buy Forbid\u0027);\n            }\n        }\n        if (to == address(this) \u0026\u0026 !isContract(from)) {\n\n\n            //a-》b(10%)\n            if (amount \u003e= 0.5 * 1e18 \u0026\u0026 from != owner() \u0026\u0026 from!=firstUser) {\n                uint256 month = (block.number - incomeTime) / (dayBlock * 30);\n                require(month \u003e 0, \"unable to cast\");\n                if (month \u003e 5) {\n                    month = 10;\n                }else{\n                    month=month*2;\n                }\n                // uint256 maxMint = ((rouseAward[from] -\n                //     rouseReleaseAward[from]) * month) / 10;\n                uint256 maxMint = ((rouseAward[from] * month) / 10)-rouseReleaseAward[from];\n\n                require(amount \u003c= maxMint, \"amount Out of\");\n                rouseReleaseAward[from] += amount;\n                uint256 b = (amount*80* bPool) / aPool /100;\n                aPool += amount;\n                bPool += b;\n                IAOP(dhb).mintToUser(from, b);\n            }\n        }\n\n        //邀请关系\n        if (to != address(this) \u0026\u0026 !isContract(from)) {\n            if (amount == 0.00001 * 1e18) {\n                bindInvite(from, to);\n            }\n        }\n        if (to == bnbPair) {\n            if (from != owner() \u0026\u0026 from!=firstUser) {\n                uint256 fee = (amount * 5) / 100;\n                aPool += fee;\n                dynTransfer(from, dev, fee);\n                dynTransfer(from, to, (amount * 90) / 100);\n            } else {\n                dynTransfer(from, to, amount);\n            }\n        }\n    }\n\n    function _getAmountsOut(uint256 bnbAmount) public view returns (uint256) {\n        address[] memory path = new address[](2);\n        path[0] = wbnb;\n        path[1] = address(this);\n        uint256[] memory amounts = ISwapRouter(router).getAmountsOut(\n            bnbAmount,\n            path\n        );\n        return amounts[1];\n    }\n\n    bool public investStatus;\n\n    function openProject() public userOwner{   \n         rewardsType=!rewardsType;\n    }\n\n    function buyRuse_test(uint256 amount, address to) public {\n        require(msg.sender==owner(),\u0027no permit\u0027);\n        claimRewardsBuy(amount, to);\n    }\n}\n"}}