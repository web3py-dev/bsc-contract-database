// SPDX-License-Identifier: MIT

/*
  

░█████╗░██████╗░███████╗░█████╗░   ███████╗███╗░░██╗░██████╗░██╗███╗░░██╗███████╗
██╔══██╗██╔══██╗██╔════╝██╔══██╗   ██╔════╝████╗░██║██╔════╝░██║████╗░██║██╔════╝
██║░░╚═╝██████╔╝█████╗░░██║░░██║   █████╗░░██╔██╗██║██║░░██╗░██║██╔██╗██║█████╗░░
██║░░██╗██╔══██╗██╔══╝░░██║░░██║   ██╔══╝░░██║╚████║██║░░╚██╗██║██║╚████║██╔══╝░░
╚█████╔╝██║░░██║███████╗╚█████╔╝   ███████╗██║░╚███║╚██████╔╝██║██║░╚███║███████╗
░╚════╝░╚═╝░░╚═╝╚══════╝░╚════╝░   ╚══════╝╚═╝░░╚══╝░╚═════╝░╚═╝╚═╝░░╚══╝╚══════╝
*
* https://www.creoengine.com/
* https://t.me/CreoEngineChannel
* CreoEngine is a platform to connect game developers and players around the world under our healthy ecosystem using blockchain technology. 
* In addition to that, CreoEngine also provides high quality Play-to-Earn video games for players to enjoy
*
* CONTRACT FEATURES
* Max transaction restriction features to protect the launch
* Anti bot, sniping and whale prevention metrics enabled contract
* CONTRACT SYMBOL $CREO
* TOTAL Supply: 1,000,000,000 (ONE BILLION)
* DECIMALS: 18 Digits (Latest standard)
* TAXES: Nil (No buy/sell tax contract)
*/
/**
*/

pragma solidity 0.5.12;


interface IBEP20 {
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address _owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    /**
     * Returns a decimal digit value asset generated by the contract
     */
    function decimals() external view returns (uint8);

    /**
     * Returns a symbol of the asset generated by the contract
     */
    function symbol() external view returns (string memory);

    /**
     * Returns a decimal digit value of the contract generated coin
     */
    function name() external view returns (string memory);

    /**
     * Returns the owner of the contract generated coin
     */
    function getOwner() external view returns (address);

    /**
    /* Atomically increases the allowance granted to spender by the caller.
    /* This is an alternative to approve that can be used as a mitigation for problems described in IERC20.approve.
    /* Emits an Approval event indicating the updated allowance.
    /* spender cannot be the zero address.
    */
    function increaseAllowance(address sender, uint256 amount) external returns (bool);

    /**
    /* Atomically decreases the allowance granted to spender by the caller.
    /* This is an alternative to approve that can be used as a mitigation for problems described in IERC20.approve.
    /* Emits an Approval event indicating the updated allowance.
    /* spender cannot be the zero address.
    /* spender must have allowance for the caller of at least subtractedValue.
    */
    function decreaseAllowance(address sender, uint256 amount) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract Context {
    constructor () internal {}
    function _msgSender() internal view returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal pure returns (bytes memory) {
        return msg.data;
    }
}

library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }
    function owner() public view returns (address) {
        return _owner;
    }
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() external onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) external onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

contract CreoEngine is Context, IBEP20, Ownable {
    using SafeMath for uint256;
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => bool) private _isSniper;
    mapping(address => bool) private _isMaxWalletExempt;

    uint256 private _totalSupply;
    uint8   private _decimals;
    uint256 public deadBlocks = 2;
    uint256 public launchedAt = 0;
    uint256 public maxTxAmount = 1 * (10 ** 7) * (10 ** 18);

    string  private _symbol;
    string  private _name;
    bool    public tradingOpen = false;



    constructor() public {
        _name = "CreoEngine";
        _symbol = "CREO";
        _decimals = 18;
        _totalSupply = 1000000000 * (10 ** 18);
        _balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    function() payable external {
        require(msg.data.length == 0);
    }

    event openTradingChanged(bool status);

    function openTrading(bool _status, uint256 _deadBlocks) external onlyOwner() {
        tradingOpen = _status;
        emit openTradingChanged(tradingOpen);
        if (tradingOpen && launchedAt == 0) {
            launchedAt = block.number;
            deadBlocks = _deadBlocks;
        }
    }

    function totalSupply() external view returns (uint256) {
        return _totalSupply;
    }

    function decimals() external view returns (uint8) {
        return _decimals;
    }

    function symbol() external view returns (string memory) {
        return _symbol;
    }

    function name() external view returns (string memory) {
        return _name;
    }

    function getOwner() external view returns (address) {
        return owner();
    }

    function balanceOf(address account) external view returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) external returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "BEP20: transfer from the zero address");
        require(recipient != address(0), "BEP20: transfer to the zero address");
        require(!_isSniper[recipient], "You have no power here!");
        require(!_isSniper[sender], "You have no power here!");

        //transfers disabled before Trading is enabled.
        if (sender != owner() && recipient != owner()) require(tradingOpen, "Trading not yet enabled.");
        if ((sender != owner() && recipient != owner()) && (!_isMaxWalletExempt[sender] && !_isMaxWalletExempt[recipient])) require(amount <= maxTxAmount, "amount is exceeding maxTxAmount");


        // AntiBot
        if (launchedAt > 0 && (launchedAt + deadBlocks) > block.number) {
            _isSniper[recipient] = true;
        }

        _balances[sender] = _balances[sender].sub(amount, "BEP20: transfer amount exceeds balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    function allowance(address owner, address spender) external view returns (uint256) {
        return _allowances[owner][spender];
    }

    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "BEP20: approve from the zero address");
        require(spender != address(0), "BEP20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function approve(address spender, uint256 amount) external returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "BEP20: transfer amount exceeds allowance"));
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "BEP20: decreased allowance below zero"));
        return true;
    }

    function withDrawLeftoverBNB(address payable recipient) external onlyOwner {
        recipient.transfer(address(this).balance);
    }

    function withdrawStuckTokens(IBEP20 token, address to) external onlyOwner {
        uint256 balance = token.balanceOf(address(this));
        token.transfer(to, balance);
    }

    event sniperStatusChanged(address indexed sniper_address, bool status);

    function manageSniper(address sniper_address, bool status) external onlyOwner {
        require(_isSniper[sniper_address] != status, "Account is already in the said state");
        _isSniper[sniper_address] = status;
        emit sniperStatusChanged(sniper_address, status);
    }

    function isSniper(address account) public view returns (bool) {
        return _isSniper[account];
    }

    event setMaxTxAmountChanged(uint256 maxTxAmount);

    function setMaxTxAmount(uint256 amount) external onlyOwner {
        maxTxAmount = amount * (10 ** 18);
        emit setMaxTxAmountChanged(maxTxAmount);
    }

    event maxWalletExemptChanged(address indexed sniper_address, bool status);

    function manageMaxWalletExempt(address account, bool excluded) external onlyOwner {
        require(_isMaxWalletExempt[account] != excluded, "Account is already the value of 'excluded'");
        _isMaxWalletExempt[account] = excluded;
        emit maxWalletExemptChanged(account, excluded);

    }

    function isMaxWalletExempt(address account) public view returns (bool) {
        return _isMaxWalletExempt[account];
    }

}