pragma solidity ^0.8.13;

// SPDX-License-Identifier: MIT
/* Created by Rayyan Jafri (Potion Seller) for Chromia */
interface IFixedPriceSale {
    /**
     * @dev Event emitted
     */
    /**
     * @dev Event emitted once asset ownership transfer transaction has been completed
     * @param from The address of the seller associated with the transaction
     * @param to The address of the buyer associated with the transaction
     * @param nftContract The ERC721 Contract address on which the asset resides (The context used to transfer the asset)
     * @param tokenID The EVM-safe tokenID of the asset that was transferrred
     * @param price The price the asset was sold for (before any deductions)
     * @param royaltyFee The royalty percentage deduction (if any)
     * @param secondaryMarketFee The secondary market fee deduction
     * @param primary Indicates if the sale was on a primary asset
     * @param offer Indicates if the sale ended directly or via an offer
     */
    event FixedPriceTransfer(
        address indexed from,
        address indexed to,
        address indexed nftContract,
        uint256 tokenID,
        uint256 price,
        uint256 royaltyFee,
        uint256 secondaryMarketFee,
        bool primary,
        bool offer
    );
    /**
     * @dev Event emitted when an asset owner posts their listing
     * @param nftContract The contract where the asset resides
     * @param tokenID The tokenID of the asset
     * @param price The price of the asset (in ALICE)
     * @param primary Indicates if the asset was listed by the Market or an Individual
     */
    event AssetListing(address indexed nftContract, uint256 tokenID, uint256 price, bool primary);
    /**
     * @dev Event emitted when an asset owner re-prices their listing
     * @param nftContract The contract where the asset resides
     * @param tokenID The tokenID of the asset
     * @param newPrice The new price of the asset
     */
    event AssetRelisting(address indexed nftContract, uint256 tokenID, uint256 newPrice);
    /**
     * @dev Event emitted when an offer is made
     * Useful for marketplace listener to notify user dashboard for both buyer and seller
     */
    event AssetDelisting(address nftContract, uint256 tokenID);
    /**
     * @dev Event emitted when an offer is retracted from a listed asset
     * @param offerer The wallet that made the offer on the asset
     * @param nftContract The contract where the asset resides
     * @param tokenID The tokenID of the asset
     * @param amount The amount of tokens for the offer
     */
    event AssetOffer(address indexed offerer, address indexed nftContract, uint256 tokenID, uint256 amount);
    /**
     * @dev Event emitted when an offer is declined
     * @param decliner The address that declined the offer (Seller || Contract when offer was outbid)
     * @param declinedOfferer The address which was reimbursed for a failed offer
     * @param nftContract The contract where the asset resides
     * @param tokenID The tokenID of the asset
     */
    event OfferDeclined(address indexed decliner, address indexed declinedOfferer, address indexed nftContract, uint256 tokenID);
    /**
     * @dev A datastore representing an offer made on a listed asset
     * @param offerer The EVM compatible address that made the offer
     * @param amount The amount (in Alice) the offerer has offered (> Asset listing price)
     */
    struct Offer {
        address offerer;
        uint256 amount;
    }
    /**
     * @param owner The address of the owner of asset @param tokenID within the context of @param contract
     * @param price The minimum amount (in ERC20 Alice) payable for a successful asset transfer
     * @param latestOffer The latest offer that exceeded previous offers (if any)
     * @param forSale Indicates whether this asset is listed for fixed price sale (Defaults to 0 (Not for sale) on initialization)
     */

    struct Asset {
        address owner;
        uint256 price;
        Offer latestOffer;
        bool forSale;
        bool primary;
    }

    /**
     * @dev Function invoked by a marketplace User to list their asset for sale
     * The contract address must be whitelisted
     * The user must have ownership of the asset on the respective ERC721 Contract
     * If the asset is already up for sale, the price must be updated
     * @param tokenID The tokenID the user wishes to list for sale
     * @param nftContract The EVM compatible whitelisted ERC721 on which the asset resides
     * @param price The price (in ERC20 Alice) that the asset will be listed for
     */
    function sell(
        uint256 tokenID,
        address nftContract,
        uint256 price
    ) external;

    /**
     * @dev Function invoked by a marketplace User to de-list their asset for sale
     * The user must have ownership of the asset on the respective ERC721 Contract
     * If the asset is already up for sale, the price must be updated
     * @param tokenID The tokenID the user wishes to list for sale
     * @param nftContract The EVM compatible whitelisted ERC721 on which the asset resides
     */
    function delist(uint256 tokenID, address nftContract) external;

    /**
     * @dev Function invoked by a marketplace User to pay and transfer ownership of a whitelisted NFT
     * @param nftContract The EVM compatible whitelisted ERC721 on which the asset resides
     * @param tokenID EVM-supported tokenID
     * Only an ERC20 instance of Alice Token is accepted as payment. The payment must be equal or greater than the Price
     * The tokenID must exist, must be marked as 'For Sale'
     * The payment amount must be transferred to the Asset owner
     */
    function purchase(address nftContract, uint256 tokenID) external;

    /**
     * @dev Function invoked by a marketplace User to place an offer on an asset listing
     * @param nftContract The EVM compatible whitelisted ERC721 on which the asset resides
     * @param price The offer made by the User
     * The invoker must approve the contract in the context of the ERC721 Contract
     * The invoker must transfer funds to the contract for holding
     * The offer must be greater than any previous offer made
     */
    function offer(
        address nftContract,
        uint256 tokenID,
        uint256 price
    ) external;

    /**
     * @dev Function invoked by a marketplace User to accept an offer made on an asset they've listed
     * @param nftContract The EVM compatible whitelisted ERC721 on which the asset resides
     * @param tokenID The ERC721 compatible tokenID
     * The invoker must own the assert in question
     * There must be an existing offer present on the asset
     * The amount must be transferred from the contract vault to the owner
     */
    function acceptOffer(address nftContract, uint256 tokenID) external;

    /**
     * @dev Function invoked by a marketplace User to decline an offer made on an asset they own
     * @param nftContract The EVM compatible whitelisted ERC721 on which the asset resides
     * @param tokenID The ERC721 compatible tokenID
     * The escrow amount must be transferred back to the offerer
     * The asset datastores `Offer` should be reset
     */
    function declineOffer(address nftContract, uint256 tokenID) external;

    /**
     * @dev Function invoked by an offer to recede their offer on a listed asset
     * @param nftContract The EVM compatible whitelisted ERC721 on which the asset resides
     * @param tokenID The ERC721 compatible tokenID
     * The invoker must be the offerer
     * The escrow amount must be reimbursed
     * The asset datastores Escrow Agreement & Offer status must be reset
     */
    function withdrawOffer(address nftContract, uint256 tokenID) external;

    /**
     * @dev Admin access level function to enable an ERC721 Contract instance to interface with the MNA Fixed Price Sales system
     * @param nftContract The EVM compatible ERC721 contract address to enable interfacing with
     * The provided address must support the ERC721 interface
     */
    function whitelist(address nftContract) external;

    /**
     * @dev Admin access level function to disable an ERC721 Contract instance to interface with the MNA Fixed Price Sales system
     * @param nftContract The EVM compatible ERC721 contract address to disable interfacing with
     *
     */
    function blacklist(address nftContract) external;
}

interface IMarketFees {
    //Events for fee changes + wallet changes?
    //Constructor must have parameters 'primaryWallet' & 'secondaryWallet' address values, must have secondaryFee uint256 parameter (% percentage)
    //Sell Cycle
    //Mark Asset as Primary if Admin wallet invokes 'sell' else Mark Asset as Secondary
    //boolean Asset.primary
    //Purchasing Cycle (Accept Offer + Direct Purchase)
    //Check if Asset address is Royalty => true? Subtract royalty from total revenue and transfer to address provided by Royalty Interface : revenue unchanged
    //Check Asset.primary on purchase function execution =? true? Transfer revenue to primary wallet & end routine : subtract secondaryFee percentage from revenue and transfer to secondaryWallet
    //Transfer revenue to Asset owner

    /**
     * @dev Admin only function used to re-assign the secondary market fees
     * @param value The percentage of a sale revenue that goes to the Secondary Wallet (must fit percentage constraints of 0-100)
     */
    function setSecondaryMarketFee(uint8 value) external;

    /**
     * @dev Admin only function used to re-assign the secondary wallet address
     * @param wallet The new wallet address that will receive secondary market revenue
     */
    function setSecondaryWallet(address wallet) external;

    /**
     * @dev Admin only function used to re-assign the primary wallet address
     * @param wallet The new wallet address that will receieve primary sales revenue
     */
    function setPrimaryWallet(address wallet) external;
}

// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)
/**
 * @dev External interface of AccessControl declared to support ERC165 detection.
 */
interface IAccessControl {
    /**
     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`
     *
     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite
     * {RoleAdminChanged} not being emitted signaling this.
     *
     * _Available since v3.1._
     */
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);

    /**
     * @dev Emitted when `account` is granted `role`.
     *
     * `sender` is the account that originated the contract call, an admin role
     * bearer except when using {AccessControl-_setupRole}.
     */
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Emitted when `account` is revoked `role`.
     *
     * `sender` is the account that originated the contract call:
     *   - if using `revokeRole`, it is the admin role bearer
     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)
     */
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) external view returns (bool);

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {AccessControl-_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) external view returns (bytes32);

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function grantRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     */
    function revokeRole(bytes32 role, address account) external;

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been granted `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `account`.
     */
    function renounceRole(bytes32 role, address account) external;
}

// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)
/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)
/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
    uint8 private constant _ADDRESS_LENGTH = 20;

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }

    /**
     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.
     */
    function toHexString(address addr) internal pure returns (string memory) {
        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
    }
}

// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)
/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)
/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}

// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)
/**
 * @dev Contract module that allows children to implement role-based access
 * control mechanisms. This is a lightweight version that doesn't allow enumerating role
 * members except through off-chain means by accessing the contract event logs. Some
 * applications may benefit from on-chain enumerability, for those cases see
 * {AccessControlEnumerable}.
 *
 * Roles are referred to by their `bytes32` identifier. These should be exposed
 * in the external API and be unique. The best way to achieve this is by
 * using `public constant` hash digests:
 *
 * ```
 * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");
 * ```
 *
 * Roles can be used to represent a set of permissions. To restrict access to a
 * function call, use {hasRole}:
 *
 * ```
 * function foo() public {
 *     require(hasRole(MY_ROLE, msg.sender));
 *     ...
 * }
 * ```
 *
 * Roles can be granted and revoked dynamically via the {grantRole} and
 * {revokeRole} functions. Each role has an associated admin role, and only
 * accounts that have a role's admin role can call {grantRole} and {revokeRole}.
 *
 * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means
 * that only accounts with this role will be able to grant or revoke other
 * roles. More complex role relationships can be created by using
 * {_setRoleAdmin}.
 *
 * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to
 * grant and revoke this role. Extra precautions should be taken to secure
 * accounts that have been granted it.
 */
abstract contract AccessControl is Context, IAccessControl, ERC165 {
    struct RoleData {
        mapping(address => bool) members;
        bytes32 adminRole;
    }

    mapping(bytes32 => RoleData) private _roles;

    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;

    /**
     * @dev Modifier that checks that an account has a specific role. Reverts
     * with a standardized message including the required role.
     *
     * The format of the revert reason is given by the following regular expression:
     *
     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
     *
     * _Available since v4.1._
     */
    modifier onlyRole(bytes32 role) {
        _checkRole(role);
        _;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);
    }

    /**
     * @dev Returns `true` if `account` has been granted `role`.
     */
    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {
        return _roles[role].members[account];
    }

    /**
     * @dev Revert with a standard message if `_msgSender()` is missing `role`.
     * Overriding this function changes the behavior of the {onlyRole} modifier.
     *
     * Format of the revert message is described in {_checkRole}.
     *
     * _Available since v4.6._
     */
    function _checkRole(bytes32 role) internal view virtual {
        _checkRole(role, _msgSender());
    }

    /**
     * @dev Revert with a standard message if `account` is missing `role`.
     *
     * The format of the revert reason is given by the following regular expression:
     *
     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
     */
    function _checkRole(bytes32 role, address account) internal view virtual {
        if (!hasRole(role, account)) {
            revert(
                string(
                    abi.encodePacked(
                        "AccessControl: account ",
                        Strings.toHexString(uint160(account), 20),
                        " is missing role ",
                        Strings.toHexString(uint256(role), 32)
                    )
                )
            );
        }
    }

    /**
     * @dev Returns the admin role that controls `role`. See {grantRole} and
     * {revokeRole}.
     *
     * To change a role's admin, use {_setRoleAdmin}.
     */
    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {
        return _roles[role].adminRole;
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     *
     * May emit a {RoleGranted} event.
     */
    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
        _grantRole(role, account);
    }

    /**
     * @dev Revokes `role` from `account`.
     *
     * If `account` had been granted `role`, emits a {RoleRevoked} event.
     *
     * Requirements:
     *
     * - the caller must have ``role``'s admin role.
     *
     * May emit a {RoleRevoked} event.
     */
    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {
        _revokeRole(role, account);
    }

    /**
     * @dev Revokes `role` from the calling account.
     *
     * Roles are often managed via {grantRole} and {revokeRole}: this function's
     * purpose is to provide a mechanism for accounts to lose their privileges
     * if they are compromised (such as when a trusted device is misplaced).
     *
     * If the calling account had been revoked `role`, emits a {RoleRevoked}
     * event.
     *
     * Requirements:
     *
     * - the caller must be `account`.
     *
     * May emit a {RoleRevoked} event.
     */
    function renounceRole(bytes32 role, address account) public virtual override {
        require(account == _msgSender(), "AccessControl: can only renounce roles for self");

        _revokeRole(role, account);
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * If `account` had not been already granted `role`, emits a {RoleGranted}
     * event. Note that unlike {grantRole}, this function doesn't perform any
     * checks on the calling account.
     *
     * May emit a {RoleGranted} event.
     *
     * [WARNING]
     * ====
     * This function should only be called from the constructor when setting
     * up the initial roles for the system.
     *
     * Using this function in any other way is effectively circumventing the admin
     * system imposed by {AccessControl}.
     * ====
     *
     * NOTE: This function is deprecated in favor of {_grantRole}.
     */
    function _setupRole(bytes32 role, address account) internal virtual {
        _grantRole(role, account);
    }

    /**
     * @dev Sets `adminRole` as ``role``'s admin role.
     *
     * Emits a {RoleAdminChanged} event.
     */
    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
        bytes32 previousAdminRole = getRoleAdmin(role);
        _roles[role].adminRole = adminRole;
        emit RoleAdminChanged(role, previousAdminRole, adminRole);
    }

    /**
     * @dev Grants `role` to `account`.
     *
     * Internal function without access restriction.
     *
     * May emit a {RoleGranted} event.
     */
    function _grantRole(bytes32 role, address account) internal virtual {
        if (!hasRole(role, account)) {
            _roles[role].members[account] = true;
            emit RoleGranted(role, account, _msgSender());
        }
    }

    /**
     * @dev Revokes `role` from `account`.
     *
     * Internal function without access restriction.
     *
     * May emit a {RoleRevoked} event.
     */
    function _revokeRole(bytes32 role, address account) internal virtual {
        if (hasRole(role, account)) {
            _roles[role].members[account] = false;
            emit RoleRevoked(role, account, _msgSender());
        }
    }
}

// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)
/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)
/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)
/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the value {ERC20} uses, unless this function is
     * overridden;
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     */
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
        }
        _balances[to] += amount;

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}

// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)
/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);
}

library console {
        address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);

        function _sendLogPayload(bytes memory payload) private view {
                uint256 payloadLength = payload.length;
                address consoleAddress = CONSOLE_ADDRESS;
                assembly {
                        let payloadStart := add(payload, 32)
                        let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)
                }
        }

        function log() internal view {
                _sendLogPayload(abi.encodeWithSignature("log()"));
        }

        function logInt(int p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(int)", p0));
        }

        function logUint(uint p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint)", p0));
        }

        function logString(string memory p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string)", p0));
        }

        function logBool(bool p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool)", p0));
        }

        function logAddress(address p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address)", p0));
        }

        function logBytes(bytes memory p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes)", p0));
        }

        function logBytes1(bytes1 p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes1)", p0));
        }

        function logBytes2(bytes2 p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes2)", p0));
        }

        function logBytes3(bytes3 p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes3)", p0));
        }

        function logBytes4(bytes4 p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes4)", p0));
        }

        function logBytes5(bytes5 p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes5)", p0));
        }

        function logBytes6(bytes6 p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes6)", p0));
        }

        function logBytes7(bytes7 p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes7)", p0));
        }

        function logBytes8(bytes8 p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes8)", p0));
        }

        function logBytes9(bytes9 p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes9)", p0));
        }

        function logBytes10(bytes10 p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes10)", p0));
        }

        function logBytes11(bytes11 p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes11)", p0));
        }

        function logBytes12(bytes12 p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes12)", p0));
        }

        function logBytes13(bytes13 p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes13)", p0));
        }

        function logBytes14(bytes14 p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes14)", p0));
        }

        function logBytes15(bytes15 p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes15)", p0));
        }

        function logBytes16(bytes16 p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes16)", p0));
        }

        function logBytes17(bytes17 p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes17)", p0));
        }

        function logBytes18(bytes18 p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes18)", p0));
        }

        function logBytes19(bytes19 p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes19)", p0));
        }

        function logBytes20(bytes20 p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes20)", p0));
        }

        function logBytes21(bytes21 p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes21)", p0));
        }

        function logBytes22(bytes22 p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes22)", p0));
        }

        function logBytes23(bytes23 p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes23)", p0));
        }

        function logBytes24(bytes24 p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes24)", p0));
        }

        function logBytes25(bytes25 p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes25)", p0));
        }

        function logBytes26(bytes26 p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes26)", p0));
        }

        function logBytes27(bytes27 p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes27)", p0));
        }

        function logBytes28(bytes28 p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes28)", p0));
        }

        function logBytes29(bytes29 p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes29)", p0));
        }

        function logBytes30(bytes30 p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes30)", p0));
        }

        function logBytes31(bytes31 p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes31)", p0));
        }

        function logBytes32(bytes32 p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bytes32)", p0));
        }

        function log(uint p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint)", p0));
        }

        function log(string memory p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string)", p0));
        }

        function log(bool p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool)", p0));
        }

        function log(address p0) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address)", p0));
        }

        function log(uint p0, uint p1) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,uint)", p0, p1));
        }

        function log(uint p0, string memory p1) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,string)", p0, p1));
        }

        function log(uint p0, bool p1) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,bool)", p0, p1));
        }

        function log(uint p0, address p1) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,address)", p0, p1));
        }

        function log(string memory p0, uint p1) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,uint)", p0, p1));
        }

        function log(string memory p0, string memory p1) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,string)", p0, p1));
        }

        function log(string memory p0, bool p1) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,bool)", p0, p1));
        }

        function log(string memory p0, address p1) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,address)", p0, p1));
        }

        function log(bool p0, uint p1) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,uint)", p0, p1));
        }

        function log(bool p0, string memory p1) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,string)", p0, p1));
        }

        function log(bool p0, bool p1) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,bool)", p0, p1));
        }

        function log(bool p0, address p1) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,address)", p0, p1));
        }

        function log(address p0, uint p1) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,uint)", p0, p1));
        }

        function log(address p0, string memory p1) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,string)", p0, p1));
        }

        function log(address p0, bool p1) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,bool)", p0, p1));
        }

        function log(address p0, address p1) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,address)", p0, p1));
        }

        function log(uint p0, uint p1, uint p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint)", p0, p1, p2));
        }

        function log(uint p0, uint p1, string memory p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,uint,string)", p0, p1, p2));
        }

        function log(uint p0, uint p1, bool p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool)", p0, p1, p2));
        }

        function log(uint p0, uint p1, address p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,uint,address)", p0, p1, p2));
        }

        function log(uint p0, string memory p1, uint p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,string,uint)", p0, p1, p2));
        }

        function log(uint p0, string memory p1, string memory p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,string,string)", p0, p1, p2));
        }

        function log(uint p0, string memory p1, bool p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,string,bool)", p0, p1, p2));
        }

        function log(uint p0, string memory p1, address p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,string,address)", p0, p1, p2));
        }

        function log(uint p0, bool p1, uint p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint)", p0, p1, p2));
        }

        function log(uint p0, bool p1, string memory p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,bool,string)", p0, p1, p2));
        }

        function log(uint p0, bool p1, bool p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool)", p0, p1, p2));
        }

        function log(uint p0, bool p1, address p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,bool,address)", p0, p1, p2));
        }

        function log(uint p0, address p1, uint p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,address,uint)", p0, p1, p2));
        }

        function log(uint p0, address p1, string memory p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,address,string)", p0, p1, p2));
        }

        function log(uint p0, address p1, bool p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,address,bool)", p0, p1, p2));
        }

        function log(uint p0, address p1, address p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,address,address)", p0, p1, p2));
        }

        function log(string memory p0, uint p1, uint p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,uint,uint)", p0, p1, p2));
        }

        function log(string memory p0, uint p1, string memory p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,uint,string)", p0, p1, p2));
        }

        function log(string memory p0, uint p1, bool p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,uint,bool)", p0, p1, p2));
        }

        function log(string memory p0, uint p1, address p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,uint,address)", p0, p1, p2));
        }

        function log(string memory p0, string memory p1, uint p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,string,uint)", p0, p1, p2));
        }

        function log(string memory p0, string memory p1, string memory p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,string,string)", p0, p1, p2));
        }

        function log(string memory p0, string memory p1, bool p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,string,bool)", p0, p1, p2));
        }

        function log(string memory p0, string memory p1, address p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,string,address)", p0, p1, p2));
        }

        function log(string memory p0, bool p1, uint p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint)", p0, p1, p2));
        }

        function log(string memory p0, bool p1, string memory p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,bool,string)", p0, p1, p2));
        }

        function log(string memory p0, bool p1, bool p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool)", p0, p1, p2));
        }

        function log(string memory p0, bool p1, address p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,bool,address)", p0, p1, p2));
        }

        function log(string memory p0, address p1, uint p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,address,uint)", p0, p1, p2));
        }

        function log(string memory p0, address p1, string memory p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,address,string)", p0, p1, p2));
        }

        function log(string memory p0, address p1, bool p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,address,bool)", p0, p1, p2));
        }

        function log(string memory p0, address p1, address p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,address,address)", p0, p1, p2));
        }

        function log(bool p0, uint p1, uint p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint)", p0, p1, p2));
        }

        function log(bool p0, uint p1, string memory p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,uint,string)", p0, p1, p2));
        }

        function log(bool p0, uint p1, bool p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool)", p0, p1, p2));
        }

        function log(bool p0, uint p1, address p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,uint,address)", p0, p1, p2));
        }

        function log(bool p0, string memory p1, uint p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint)", p0, p1, p2));
        }

        function log(bool p0, string memory p1, string memory p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,string,string)", p0, p1, p2));
        }

        function log(bool p0, string memory p1, bool p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool)", p0, p1, p2));
        }

        function log(bool p0, string memory p1, address p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,string,address)", p0, p1, p2));
        }

        function log(bool p0, bool p1, uint p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint)", p0, p1, p2));
        }

        function log(bool p0, bool p1, string memory p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string)", p0, p1, p2));
        }

        function log(bool p0, bool p1, bool p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool)", p0, p1, p2));
        }

        function log(bool p0, bool p1, address p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address)", p0, p1, p2));
        }

        function log(bool p0, address p1, uint p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint)", p0, p1, p2));
        }

        function log(bool p0, address p1, string memory p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,address,string)", p0, p1, p2));
        }

        function log(bool p0, address p1, bool p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool)", p0, p1, p2));
        }

        function log(bool p0, address p1, address p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,address,address)", p0, p1, p2));
        }

        function log(address p0, uint p1, uint p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,uint,uint)", p0, p1, p2));
        }

        function log(address p0, uint p1, string memory p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,uint,string)", p0, p1, p2));
        }

        function log(address p0, uint p1, bool p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,uint,bool)", p0, p1, p2));
        }

        function log(address p0, uint p1, address p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,uint,address)", p0, p1, p2));
        }

        function log(address p0, string memory p1, uint p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,string,uint)", p0, p1, p2));
        }

        function log(address p0, string memory p1, string memory p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,string,string)", p0, p1, p2));
        }

        function log(address p0, string memory p1, bool p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,string,bool)", p0, p1, p2));
        }

        function log(address p0, string memory p1, address p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,string,address)", p0, p1, p2));
        }

        function log(address p0, bool p1, uint p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint)", p0, p1, p2));
        }

        function log(address p0, bool p1, string memory p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,bool,string)", p0, p1, p2));
        }

        function log(address p0, bool p1, bool p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool)", p0, p1, p2));
        }

        function log(address p0, bool p1, address p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,bool,address)", p0, p1, p2));
        }

        function log(address p0, address p1, uint p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,address,uint)", p0, p1, p2));
        }

        function log(address p0, address p1, string memory p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,address,string)", p0, p1, p2));
        }

        function log(address p0, address p1, bool p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,address,bool)", p0, p1, p2));
        }

        function log(address p0, address p1, address p2) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,address,address)", p0, p1, p2));
        }

        function log(uint p0, uint p1, uint p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,uint)", p0, p1, p2, p3));
        }

        function log(uint p0, uint p1, uint p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,string)", p0, p1, p2, p3));
        }

        function log(uint p0, uint p1, uint p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,bool)", p0, p1, p2, p3));
        }

        function log(uint p0, uint p1, uint p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,address)", p0, p1, p2, p3));
        }

        function log(uint p0, uint p1, string memory p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,uint)", p0, p1, p2, p3));
        }

        function log(uint p0, uint p1, string memory p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,string)", p0, p1, p2, p3));
        }

        function log(uint p0, uint p1, string memory p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,bool)", p0, p1, p2, p3));
        }

        function log(uint p0, uint p1, string memory p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,address)", p0, p1, p2, p3));
        }

        function log(uint p0, uint p1, bool p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,uint)", p0, p1, p2, p3));
        }

        function log(uint p0, uint p1, bool p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,string)", p0, p1, p2, p3));
        }

        function log(uint p0, uint p1, bool p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,bool)", p0, p1, p2, p3));
        }

        function log(uint p0, uint p1, bool p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,address)", p0, p1, p2, p3));
        }

        function log(uint p0, uint p1, address p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,uint)", p0, p1, p2, p3));
        }

        function log(uint p0, uint p1, address p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,string)", p0, p1, p2, p3));
        }

        function log(uint p0, uint p1, address p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,bool)", p0, p1, p2, p3));
        }

        function log(uint p0, uint p1, address p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,address)", p0, p1, p2, p3));
        }

        function log(uint p0, string memory p1, uint p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,uint)", p0, p1, p2, p3));
        }

        function log(uint p0, string memory p1, uint p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,string)", p0, p1, p2, p3));
        }

        function log(uint p0, string memory p1, uint p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,bool)", p0, p1, p2, p3));
        }

        function log(uint p0, string memory p1, uint p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,address)", p0, p1, p2, p3));
        }

        function log(uint p0, string memory p1, string memory p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,string,string,uint)", p0, p1, p2, p3));
        }

        function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,string,string,string)", p0, p1, p2, p3));
        }

        function log(uint p0, string memory p1, string memory p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,string,string,bool)", p0, p1, p2, p3));
        }

        function log(uint p0, string memory p1, string memory p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,string,string,address)", p0, p1, p2, p3));
        }

        function log(uint p0, string memory p1, bool p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,uint)", p0, p1, p2, p3));
        }

        function log(uint p0, string memory p1, bool p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,string)", p0, p1, p2, p3));
        }

        function log(uint p0, string memory p1, bool p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,bool)", p0, p1, p2, p3));
        }

        function log(uint p0, string memory p1, bool p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,address)", p0, p1, p2, p3));
        }

        function log(uint p0, string memory p1, address p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,string,address,uint)", p0, p1, p2, p3));
        }

        function log(uint p0, string memory p1, address p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,string,address,string)", p0, p1, p2, p3));
        }

        function log(uint p0, string memory p1, address p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,string,address,bool)", p0, p1, p2, p3));
        }

        function log(uint p0, string memory p1, address p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,string,address,address)", p0, p1, p2, p3));
        }

        function log(uint p0, bool p1, uint p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,uint)", p0, p1, p2, p3));
        }

        function log(uint p0, bool p1, uint p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,string)", p0, p1, p2, p3));
        }

        function log(uint p0, bool p1, uint p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,bool)", p0, p1, p2, p3));
        }

        function log(uint p0, bool p1, uint p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,address)", p0, p1, p2, p3));
        }

        function log(uint p0, bool p1, string memory p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,uint)", p0, p1, p2, p3));
        }

        function log(uint p0, bool p1, string memory p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,string)", p0, p1, p2, p3));
        }

        function log(uint p0, bool p1, string memory p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,bool)", p0, p1, p2, p3));
        }

        function log(uint p0, bool p1, string memory p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,address)", p0, p1, p2, p3));
        }

        function log(uint p0, bool p1, bool p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,uint)", p0, p1, p2, p3));
        }

        function log(uint p0, bool p1, bool p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,string)", p0, p1, p2, p3));
        }

        function log(uint p0, bool p1, bool p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,bool)", p0, p1, p2, p3));
        }

        function log(uint p0, bool p1, bool p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,address)", p0, p1, p2, p3));
        }

        function log(uint p0, bool p1, address p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,uint)", p0, p1, p2, p3));
        }

        function log(uint p0, bool p1, address p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,string)", p0, p1, p2, p3));
        }

        function log(uint p0, bool p1, address p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,bool)", p0, p1, p2, p3));
        }

        function log(uint p0, bool p1, address p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,address)", p0, p1, p2, p3));
        }

        function log(uint p0, address p1, uint p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,uint)", p0, p1, p2, p3));
        }

        function log(uint p0, address p1, uint p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,string)", p0, p1, p2, p3));
        }

        function log(uint p0, address p1, uint p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,bool)", p0, p1, p2, p3));
        }

        function log(uint p0, address p1, uint p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,address)", p0, p1, p2, p3));
        }

        function log(uint p0, address p1, string memory p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,address,string,uint)", p0, p1, p2, p3));
        }

        function log(uint p0, address p1, string memory p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,address,string,string)", p0, p1, p2, p3));
        }

        function log(uint p0, address p1, string memory p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,address,string,bool)", p0, p1, p2, p3));
        }

        function log(uint p0, address p1, string memory p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,address,string,address)", p0, p1, p2, p3));
        }

        function log(uint p0, address p1, bool p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,uint)", p0, p1, p2, p3));
        }

        function log(uint p0, address p1, bool p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,string)", p0, p1, p2, p3));
        }

        function log(uint p0, address p1, bool p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,bool)", p0, p1, p2, p3));
        }

        function log(uint p0, address p1, bool p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,address)", p0, p1, p2, p3));
        }

        function log(uint p0, address p1, address p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,address,address,uint)", p0, p1, p2, p3));
        }

        function log(uint p0, address p1, address p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,address,address,string)", p0, p1, p2, p3));
        }

        function log(uint p0, address p1, address p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,address,address,bool)", p0, p1, p2, p3));
        }

        function log(uint p0, address p1, address p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(uint,address,address,address)", p0, p1, p2, p3));
        }

        function log(string memory p0, uint p1, uint p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,uint)", p0, p1, p2, p3));
        }

        function log(string memory p0, uint p1, uint p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,string)", p0, p1, p2, p3));
        }

        function log(string memory p0, uint p1, uint p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,bool)", p0, p1, p2, p3));
        }

        function log(string memory p0, uint p1, uint p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,address)", p0, p1, p2, p3));
        }

        function log(string memory p0, uint p1, string memory p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,uint,string,uint)", p0, p1, p2, p3));
        }

        function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,uint,string,string)", p0, p1, p2, p3));
        }

        function log(string memory p0, uint p1, string memory p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,uint,string,bool)", p0, p1, p2, p3));
        }

        function log(string memory p0, uint p1, string memory p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,uint,string,address)", p0, p1, p2, p3));
        }

        function log(string memory p0, uint p1, bool p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,uint)", p0, p1, p2, p3));
        }

        function log(string memory p0, uint p1, bool p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,string)", p0, p1, p2, p3));
        }

        function log(string memory p0, uint p1, bool p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,bool)", p0, p1, p2, p3));
        }

        function log(string memory p0, uint p1, bool p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,address)", p0, p1, p2, p3));
        }

        function log(string memory p0, uint p1, address p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,uint,address,uint)", p0, p1, p2, p3));
        }

        function log(string memory p0, uint p1, address p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,uint,address,string)", p0, p1, p2, p3));
        }

        function log(string memory p0, uint p1, address p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,uint,address,bool)", p0, p1, p2, p3));
        }

        function log(string memory p0, uint p1, address p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,uint,address,address)", p0, p1, p2, p3));
        }

        function log(string memory p0, string memory p1, uint p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,string,uint,uint)", p0, p1, p2, p3));
        }

        function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,string,uint,string)", p0, p1, p2, p3));
        }

        function log(string memory p0, string memory p1, uint p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,string,uint,bool)", p0, p1, p2, p3));
        }

        function log(string memory p0, string memory p1, uint p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,string,uint,address)", p0, p1, p2, p3));
        }

        function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,string,string,uint)", p0, p1, p2, p3));
        }

        function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,string,string,string)", p0, p1, p2, p3));
        }

        function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,string,string,bool)", p0, p1, p2, p3));
        }

        function log(string memory p0, string memory p1, string memory p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,string,string,address)", p0, p1, p2, p3));
        }

        function log(string memory p0, string memory p1, bool p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,string,bool,uint)", p0, p1, p2, p3));
        }

        function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,string,bool,string)", p0, p1, p2, p3));
        }

        function log(string memory p0, string memory p1, bool p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,string,bool,bool)", p0, p1, p2, p3));
        }

        function log(string memory p0, string memory p1, bool p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,string,bool,address)", p0, p1, p2, p3));
        }

        function log(string memory p0, string memory p1, address p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,string,address,uint)", p0, p1, p2, p3));
        }

        function log(string memory p0, string memory p1, address p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,string,address,string)", p0, p1, p2, p3));
        }

        function log(string memory p0, string memory p1, address p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,string,address,bool)", p0, p1, p2, p3));
        }

        function log(string memory p0, string memory p1, address p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,string,address,address)", p0, p1, p2, p3));
        }

        function log(string memory p0, bool p1, uint p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,uint)", p0, p1, p2, p3));
        }

        function log(string memory p0, bool p1, uint p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,string)", p0, p1, p2, p3));
        }

        function log(string memory p0, bool p1, uint p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,bool)", p0, p1, p2, p3));
        }

        function log(string memory p0, bool p1, uint p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,address)", p0, p1, p2, p3));
        }

        function log(string memory p0, bool p1, string memory p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,bool,string,uint)", p0, p1, p2, p3));
        }

        function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,bool,string,string)", p0, p1, p2, p3));
        }

        function log(string memory p0, bool p1, string memory p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,bool,string,bool)", p0, p1, p2, p3));
        }

        function log(string memory p0, bool p1, string memory p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,bool,string,address)", p0, p1, p2, p3));
        }

        function log(string memory p0, bool p1, bool p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,uint)", p0, p1, p2, p3));
        }

        function log(string memory p0, bool p1, bool p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,string)", p0, p1, p2, p3));
        }

        function log(string memory p0, bool p1, bool p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,bool)", p0, p1, p2, p3));
        }

        function log(string memory p0, bool p1, bool p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,address)", p0, p1, p2, p3));
        }

        function log(string memory p0, bool p1, address p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,bool,address,uint)", p0, p1, p2, p3));
        }

        function log(string memory p0, bool p1, address p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,bool,address,string)", p0, p1, p2, p3));
        }

        function log(string memory p0, bool p1, address p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,bool,address,bool)", p0, p1, p2, p3));
        }

        function log(string memory p0, bool p1, address p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,bool,address,address)", p0, p1, p2, p3));
        }

        function log(string memory p0, address p1, uint p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,address,uint,uint)", p0, p1, p2, p3));
        }

        function log(string memory p0, address p1, uint p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,address,uint,string)", p0, p1, p2, p3));
        }

        function log(string memory p0, address p1, uint p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,address,uint,bool)", p0, p1, p2, p3));
        }

        function log(string memory p0, address p1, uint p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,address,uint,address)", p0, p1, p2, p3));
        }

        function log(string memory p0, address p1, string memory p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,address,string,uint)", p0, p1, p2, p3));
        }

        function log(string memory p0, address p1, string memory p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,address,string,string)", p0, p1, p2, p3));
        }

        function log(string memory p0, address p1, string memory p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,address,string,bool)", p0, p1, p2, p3));
        }

        function log(string memory p0, address p1, string memory p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,address,string,address)", p0, p1, p2, p3));
        }

        function log(string memory p0, address p1, bool p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,address,bool,uint)", p0, p1, p2, p3));
        }

        function log(string memory p0, address p1, bool p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,address,bool,string)", p0, p1, p2, p3));
        }

        function log(string memory p0, address p1, bool p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,address,bool,bool)", p0, p1, p2, p3));
        }

        function log(string memory p0, address p1, bool p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,address,bool,address)", p0, p1, p2, p3));
        }

        function log(string memory p0, address p1, address p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,address,address,uint)", p0, p1, p2, p3));
        }

        function log(string memory p0, address p1, address p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,address,address,string)", p0, p1, p2, p3));
        }

        function log(string memory p0, address p1, address p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,address,address,bool)", p0, p1, p2, p3));
        }

        function log(string memory p0, address p1, address p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(string,address,address,address)", p0, p1, p2, p3));
        }

        function log(bool p0, uint p1, uint p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,uint)", p0, p1, p2, p3));
        }

        function log(bool p0, uint p1, uint p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,string)", p0, p1, p2, p3));
        }

        function log(bool p0, uint p1, uint p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,bool)", p0, p1, p2, p3));
        }

        function log(bool p0, uint p1, uint p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,address)", p0, p1, p2, p3));
        }

        function log(bool p0, uint p1, string memory p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,uint)", p0, p1, p2, p3));
        }

        function log(bool p0, uint p1, string memory p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,string)", p0, p1, p2, p3));
        }

        function log(bool p0, uint p1, string memory p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,bool)", p0, p1, p2, p3));
        }

        function log(bool p0, uint p1, string memory p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,address)", p0, p1, p2, p3));
        }

        function log(bool p0, uint p1, bool p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,uint)", p0, p1, p2, p3));
        }

        function log(bool p0, uint p1, bool p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,string)", p0, p1, p2, p3));
        }

        function log(bool p0, uint p1, bool p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,bool)", p0, p1, p2, p3));
        }

        function log(bool p0, uint p1, bool p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,address)", p0, p1, p2, p3));
        }

        function log(bool p0, uint p1, address p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,uint)", p0, p1, p2, p3));
        }

        function log(bool p0, uint p1, address p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,string)", p0, p1, p2, p3));
        }

        function log(bool p0, uint p1, address p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,bool)", p0, p1, p2, p3));
        }

        function log(bool p0, uint p1, address p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,address)", p0, p1, p2, p3));
        }

        function log(bool p0, string memory p1, uint p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,uint)", p0, p1, p2, p3));
        }

        function log(bool p0, string memory p1, uint p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,string)", p0, p1, p2, p3));
        }

        function log(bool p0, string memory p1, uint p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,bool)", p0, p1, p2, p3));
        }

        function log(bool p0, string memory p1, uint p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,address)", p0, p1, p2, p3));
        }

        function log(bool p0, string memory p1, string memory p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,string,string,uint)", p0, p1, p2, p3));
        }

        function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,string,string,string)", p0, p1, p2, p3));
        }

        function log(bool p0, string memory p1, string memory p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,string,string,bool)", p0, p1, p2, p3));
        }

        function log(bool p0, string memory p1, string memory p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,string,string,address)", p0, p1, p2, p3));
        }

        function log(bool p0, string memory p1, bool p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,uint)", p0, p1, p2, p3));
        }

        function log(bool p0, string memory p1, bool p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,string)", p0, p1, p2, p3));
        }

        function log(bool p0, string memory p1, bool p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,bool)", p0, p1, p2, p3));
        }

        function log(bool p0, string memory p1, bool p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,address)", p0, p1, p2, p3));
        }

        function log(bool p0, string memory p1, address p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,string,address,uint)", p0, p1, p2, p3));
        }

        function log(bool p0, string memory p1, address p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,string,address,string)", p0, p1, p2, p3));
        }

        function log(bool p0, string memory p1, address p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,string,address,bool)", p0, p1, p2, p3));
        }

        function log(bool p0, string memory p1, address p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,string,address,address)", p0, p1, p2, p3));
        }

        function log(bool p0, bool p1, uint p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,uint)", p0, p1, p2, p3));
        }

        function log(bool p0, bool p1, uint p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,string)", p0, p1, p2, p3));
        }

        function log(bool p0, bool p1, uint p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,bool)", p0, p1, p2, p3));
        }

        function log(bool p0, bool p1, uint p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,address)", p0, p1, p2, p3));
        }

        function log(bool p0, bool p1, string memory p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,uint)", p0, p1, p2, p3));
        }

        function log(bool p0, bool p1, string memory p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,string)", p0, p1, p2, p3));
        }

        function log(bool p0, bool p1, string memory p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,bool)", p0, p1, p2, p3));
        }

        function log(bool p0, bool p1, string memory p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,address)", p0, p1, p2, p3));
        }

        function log(bool p0, bool p1, bool p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,uint)", p0, p1, p2, p3));
        }

        function log(bool p0, bool p1, bool p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,string)", p0, p1, p2, p3));
        }

        function log(bool p0, bool p1, bool p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,bool)", p0, p1, p2, p3));
        }

        function log(bool p0, bool p1, bool p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,address)", p0, p1, p2, p3));
        }

        function log(bool p0, bool p1, address p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,uint)", p0, p1, p2, p3));
        }

        function log(bool p0, bool p1, address p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,string)", p0, p1, p2, p3));
        }

        function log(bool p0, bool p1, address p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,bool)", p0, p1, p2, p3));
        }

        function log(bool p0, bool p1, address p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,address)", p0, p1, p2, p3));
        }

        function log(bool p0, address p1, uint p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,uint)", p0, p1, p2, p3));
        }

        function log(bool p0, address p1, uint p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,string)", p0, p1, p2, p3));
        }

        function log(bool p0, address p1, uint p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,bool)", p0, p1, p2, p3));
        }

        function log(bool p0, address p1, uint p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,address)", p0, p1, p2, p3));
        }

        function log(bool p0, address p1, string memory p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,address,string,uint)", p0, p1, p2, p3));
        }

        function log(bool p0, address p1, string memory p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,address,string,string)", p0, p1, p2, p3));
        }

        function log(bool p0, address p1, string memory p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,address,string,bool)", p0, p1, p2, p3));
        }

        function log(bool p0, address p1, string memory p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,address,string,address)", p0, p1, p2, p3));
        }

        function log(bool p0, address p1, bool p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,uint)", p0, p1, p2, p3));
        }

        function log(bool p0, address p1, bool p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,string)", p0, p1, p2, p3));
        }

        function log(bool p0, address p1, bool p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,bool)", p0, p1, p2, p3));
        }

        function log(bool p0, address p1, bool p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,address)", p0, p1, p2, p3));
        }

        function log(bool p0, address p1, address p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,uint)", p0, p1, p2, p3));
        }

        function log(bool p0, address p1, address p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,string)", p0, p1, p2, p3));
        }

        function log(bool p0, address p1, address p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,bool)", p0, p1, p2, p3));
        }

        function log(bool p0, address p1, address p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(bool,address,address,address)", p0, p1, p2, p3));
        }

        function log(address p0, uint p1, uint p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,uint)", p0, p1, p2, p3));
        }

        function log(address p0, uint p1, uint p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,string)", p0, p1, p2, p3));
        }

        function log(address p0, uint p1, uint p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,bool)", p0, p1, p2, p3));
        }

        function log(address p0, uint p1, uint p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,address)", p0, p1, p2, p3));
        }

        function log(address p0, uint p1, string memory p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,uint,string,uint)", p0, p1, p2, p3));
        }

        function log(address p0, uint p1, string memory p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,uint,string,string)", p0, p1, p2, p3));
        }

        function log(address p0, uint p1, string memory p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,uint,string,bool)", p0, p1, p2, p3));
        }

        function log(address p0, uint p1, string memory p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,uint,string,address)", p0, p1, p2, p3));
        }

        function log(address p0, uint p1, bool p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,uint)", p0, p1, p2, p3));
        }

        function log(address p0, uint p1, bool p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,string)", p0, p1, p2, p3));
        }

        function log(address p0, uint p1, bool p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,bool)", p0, p1, p2, p3));
        }

        function log(address p0, uint p1, bool p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,address)", p0, p1, p2, p3));
        }

        function log(address p0, uint p1, address p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,uint,address,uint)", p0, p1, p2, p3));
        }

        function log(address p0, uint p1, address p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,uint,address,string)", p0, p1, p2, p3));
        }

        function log(address p0, uint p1, address p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,uint,address,bool)", p0, p1, p2, p3));
        }

        function log(address p0, uint p1, address p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,uint,address,address)", p0, p1, p2, p3));
        }

        function log(address p0, string memory p1, uint p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,string,uint,uint)", p0, p1, p2, p3));
        }

        function log(address p0, string memory p1, uint p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,string,uint,string)", p0, p1, p2, p3));
        }

        function log(address p0, string memory p1, uint p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,string,uint,bool)", p0, p1, p2, p3));
        }

        function log(address p0, string memory p1, uint p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,string,uint,address)", p0, p1, p2, p3));
        }

        function log(address p0, string memory p1, string memory p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,string,string,uint)", p0, p1, p2, p3));
        }

        function log(address p0, string memory p1, string memory p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,string,string,string)", p0, p1, p2, p3));
        }

        function log(address p0, string memory p1, string memory p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,string,string,bool)", p0, p1, p2, p3));
        }

        function log(address p0, string memory p1, string memory p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,string,string,address)", p0, p1, p2, p3));
        }

        function log(address p0, string memory p1, bool p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,string,bool,uint)", p0, p1, p2, p3));
        }

        function log(address p0, string memory p1, bool p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,string,bool,string)", p0, p1, p2, p3));
        }

        function log(address p0, string memory p1, bool p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,string,bool,bool)", p0, p1, p2, p3));
        }

        function log(address p0, string memory p1, bool p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,string,bool,address)", p0, p1, p2, p3));
        }

        function log(address p0, string memory p1, address p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,string,address,uint)", p0, p1, p2, p3));
        }

        function log(address p0, string memory p1, address p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,string,address,string)", p0, p1, p2, p3));
        }

        function log(address p0, string memory p1, address p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,string,address,bool)", p0, p1, p2, p3));
        }

        function log(address p0, string memory p1, address p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,string,address,address)", p0, p1, p2, p3));
        }

        function log(address p0, bool p1, uint p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,uint)", p0, p1, p2, p3));
        }

        function log(address p0, bool p1, uint p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,string)", p0, p1, p2, p3));
        }

        function log(address p0, bool p1, uint p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,bool)", p0, p1, p2, p3));
        }

        function log(address p0, bool p1, uint p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,address)", p0, p1, p2, p3));
        }

        function log(address p0, bool p1, string memory p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,bool,string,uint)", p0, p1, p2, p3));
        }

        function log(address p0, bool p1, string memory p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,bool,string,string)", p0, p1, p2, p3));
        }

        function log(address p0, bool p1, string memory p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,bool,string,bool)", p0, p1, p2, p3));
        }

        function log(address p0, bool p1, string memory p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,bool,string,address)", p0, p1, p2, p3));
        }

        function log(address p0, bool p1, bool p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,uint)", p0, p1, p2, p3));
        }

        function log(address p0, bool p1, bool p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,string)", p0, p1, p2, p3));
        }

        function log(address p0, bool p1, bool p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,bool)", p0, p1, p2, p3));
        }

        function log(address p0, bool p1, bool p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,address)", p0, p1, p2, p3));
        }

        function log(address p0, bool p1, address p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,uint)", p0, p1, p2, p3));
        }

        function log(address p0, bool p1, address p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,string)", p0, p1, p2, p3));
        }

        function log(address p0, bool p1, address p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,bool)", p0, p1, p2, p3));
        }

        function log(address p0, bool p1, address p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,bool,address,address)", p0, p1, p2, p3));
        }

        function log(address p0, address p1, uint p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,address,uint,uint)", p0, p1, p2, p3));
        }

        function log(address p0, address p1, uint p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,address,uint,string)", p0, p1, p2, p3));
        }

        function log(address p0, address p1, uint p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,address,uint,bool)", p0, p1, p2, p3));
        }

        function log(address p0, address p1, uint p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,address,uint,address)", p0, p1, p2, p3));
        }

        function log(address p0, address p1, string memory p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,address,string,uint)", p0, p1, p2, p3));
        }

        function log(address p0, address p1, string memory p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,address,string,string)", p0, p1, p2, p3));
        }

        function log(address p0, address p1, string memory p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,address,string,bool)", p0, p1, p2, p3));
        }

        function log(address p0, address p1, string memory p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,address,string,address)", p0, p1, p2, p3));
        }

        function log(address p0, address p1, bool p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,uint)", p0, p1, p2, p3));
        }

        function log(address p0, address p1, bool p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,string)", p0, p1, p2, p3));
        }

        function log(address p0, address p1, bool p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,bool)", p0, p1, p2, p3));
        }

        function log(address p0, address p1, bool p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,address,bool,address)", p0, p1, p2, p3));
        }

        function log(address p0, address p1, address p2, uint p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,address,address,uint)", p0, p1, p2, p3));
        }

        function log(address p0, address p1, address p2, string memory p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,address,address,string)", p0, p1, p2, p3));
        }

        function log(address p0, address p1, address p2, bool p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,address,address,bool)", p0, p1, p2, p3));
        }

        function log(address p0, address p1, address p2, address p3) internal view {
                _sendLogPayload(abi.encodeWithSignature("log(address,address,address,address)", p0, p1, p2, p3));
        }

}

// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)
/**
 * @dev Interface for the NFT Royalty Standard.
 *
 * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal
 * support for royalty payments across all NFT marketplaces and ecosystem participants.
 *
 * _Available since v4.5._
 */
interface IERC2981 is IERC165 {
    /**
     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of
     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.
     */
    function royaltyInfo(uint256 tokenId, uint256 salePrice)
        external
        view
        returns (address receiver, uint256 royaltyAmount);
}

contract AccessController is AccessControl {
    bytes32 public constant ADMIN = keccak256('dsfmw9j23-g@!!fwmgop2fq<##!');
    modifier onlyAdmin() {
        require(hasRole(ADMIN, msg.sender), 'Invalid access level');
        _;
    }
}

abstract contract MarketFees is IMarketFees, AccessController {
    address internal primaryWallet;
    address internal secondaryWallet;
    uint256 internal secondaryMarketFee;
    ERC20 internal aliceToken;
    bytes4 private constant _INTERFACE_ID_ERC2981 = 0x2a55205a;

    function setSecondaryMarketFee(uint8 value) external override onlyAdmin {
        require(value >= 0 && value <= 100, 'Value must be 0-100');
        secondaryMarketFee = value;
    }

    function setSecondaryWallet(address wallet) external override onlyAdmin {
        secondaryWallet = wallet;
    }

    function setPrimaryWallet(address wallet) external override onlyAdmin {
        primaryWallet = wallet;
    }

    function obtainRoyaltyFee(
        address nftContract,
        uint256 tokenID,
        uint256 revenue
    ) private view returns (uint256 royaltyAmount, address reciever) {
        //Check if Asset address is Royalty => true? Subtract royalty from total revenue and transfer to address provided by Royalty Interface
        IERC2981 royaltyContract = IERC2981(nftContract);
        if (royaltyContract.supportsInterface(_INTERFACE_ID_ERC2981)) {
            (reciever, royaltyAmount) = royaltyContract.royaltyInfo(tokenID, revenue);
            if (royaltyAmount > 0) {
                return (royaltyAmount, reciever);
            }
        }
        return (0, address(0));
    }

    /**
     * @dev Performs checks & tranfers on Royalty, Primary and Secondary Fees
     * @dev Invoked in the purchase and acceptOffer cycles
     */
    function purchaseFeeCycle(
        address nftContract,
        uint256 tokenID,
        uint256 revenue,
        address invoker
    ) internal returns (uint256 secondaryFee, uint256 royaltyFee) {
        address royaltyReceiver;
        (royaltyFee, royaltyReceiver) = obtainRoyaltyFee(nftContract, tokenID, revenue);
        transferRoyalty(royaltyReceiver, royaltyFee, invoker);
        secondaryFee = (revenue - royaltyFee) * secondaryMarketFee;
        require(secondaryFee >= secondaryMarketFee, "Overflow@PurchaseFeeCycle");
        secondaryFee /= 10000;
        secondaryFee = secondaryFee == 0 ? 1 : secondaryFee;
        require(aliceToken.transferFrom(invoker, secondaryWallet, secondaryFee),"Transfer to Secondary Wallet failed");
        return (secondaryFee, royaltyFee);
    }

    function transferRoyalty(
        address royaltyReceiver,
        uint256 royaltyFee,
        address invoker
    ) private {
        if (royaltyReceiver != address(0)) {
            require(aliceToken.transferFrom(invoker, royaltyReceiver, royaltyFee), "Transfer to Royalty Receiver failed");
        }
    }
}

struct sLogReporting {
    string contractName;
}

library LogReporting {
    function reportError(sLogReporting storage self, string memory error)
        public
        view
        returns (string memory)
    {
        return string(abi.encodePacked(self.contractName, " - [ERROR]: ", error));
    }

    function reportError(
        sLogReporting storage self,
        string memory error1,
        string memory error2
    ) public view returns (string memory) {
        return string(abi.encodePacked(self.contractName, " - [ERROR]: ", error1, error2));
    }
}

// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)
/**
 * @dev Library used to query support of an interface declared via {IERC165}.
 *
 * Note that these functions return the actual result of the query: they do not
 * `revert` if an interface is not supported. It is up to the caller to decide
 * what to do in these cases.
 */
library ERC165Checker {
    // As per the EIP-165 spec, no interface should ever match 0xffffffff
    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;

    /**
     * @dev Returns true if `account` supports the {IERC165} interface,
     */
    function supportsERC165(address account) internal view returns (bool) {
        // Any contract that implements ERC165 must explicitly indicate support of
        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid
        return
            _supportsERC165Interface(account, type(IERC165).interfaceId) &&
            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);
    }

    /**
     * @dev Returns true if `account` supports the interface defined by
     * `interfaceId`. Support for {IERC165} itself is queried automatically.
     *
     * See {IERC165-supportsInterface}.
     */
    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {
        // query support of both ERC165 as per the spec and support of _interfaceId
        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);
    }

    /**
     * @dev Returns a boolean array where each value corresponds to the
     * interfaces passed in and whether they're supported or not. This allows
     * you to batch check interfaces for a contract where your expectation
     * is that some interfaces may not be supported.
     *
     * See {IERC165-supportsInterface}.
     *
     * _Available since v3.4._
     */
    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)
        internal
        view
        returns (bool[] memory)
    {
        // an array of booleans corresponding to interfaceIds and whether they're supported or not
        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);

        // query support of ERC165 itself
        if (supportsERC165(account)) {
            // query support of each interface in interfaceIds
            for (uint256 i = 0; i < interfaceIds.length; i++) {
                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);
            }
        }

        return interfaceIdsSupported;
    }

    /**
     * @dev Returns true if `account` supports all the interfaces defined in
     * `interfaceIds`. Support for {IERC165} itself is queried automatically.
     *
     * Batch-querying can lead to gas savings by skipping repeated checks for
     * {IERC165} support.
     *
     * See {IERC165-supportsInterface}.
     */
    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {
        // query support of ERC165 itself
        if (!supportsERC165(account)) {
            return false;
        }

        // query support of each interface in _interfaceIds
        for (uint256 i = 0; i < interfaceIds.length; i++) {
            if (!_supportsERC165Interface(account, interfaceIds[i])) {
                return false;
            }
        }

        // all interfaces supported
        return true;
    }

    /**
     * @notice Query if a contract implements an interface, does not check ERC165 support
     * @param account The address of the contract to query for support of an interface
     * @param interfaceId The interface identifier, as specified in ERC-165
     * @return true if the contract at account indicates support of the interface with
     * identifier interfaceId, false otherwise
     * @dev Assumes that account contains a contract that supports ERC165, otherwise
     * the behavior of this method is undefined. This precondition can be checked
     * with {supportsERC165}.
     * Interface identification is specified in ERC-165.
     */
    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {
        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);
        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);
        if (result.length < 32) return false;
        return success && abi.decode(result, (bool));
    }
}

//@todo: Lock pragma version to prevent forward compiler hacking
contract FixedPriceSale is IFixedPriceSale, MarketFees {
    using LogReporting for sLogReporting;
    using ERC165Checker for address;
    sLogReporting private logger;

    bytes4 private constant ERC721_SIGNATURE = 0x80ac58cd;
    /**
     * @dev A datastore for all whitelisted ERC721 Contract addresses (Defaults to 0 == blacklisted)
     */
    mapping(address => bool) private whitelisted;
    /**
     * @dev A data store constructed by mapp    ng each whitelisted NFT contract to a mapping of it"s respective tokenIDs to the Asset datastore
     */
    mapping(address => mapping(uint256 => Asset)) private assetRegister;

    modifier onlyWhitelist(address nftContract) {
        require(whitelisted[nftContract] == true, "Invalid contract");
        _;
    }
    modifier onlyNFTOwner(address nftContract, uint256 token) {
        IERC721 tokenInstance = IERC721(nftContract);
        require(tokenInstance.ownerOf(token) == msg.sender, "Invalid ownership");
        _;
    }
    modifier onlyApproved(address nftContract, uint256 tokenID) {
        IERC721 assetContract = IERC721(nftContract);
        require(assetContract.getApproved(tokenID) == address(this), "Invalid Asset/Owner revoked approval");
        _;
    }

    constructor(
        address _aliceToken,
        address admin,
        address _primaryWallet,
        address _secondaryWallet,
        uint256 _secondaryMarketFees
    ) {
        logger = sLogReporting("FixedPriceSale");
        _setRoleAdmin(ADMIN, DEFAULT_ADMIN_ROLE);
        _grantRole(ADMIN, admin);
        aliceToken = ERC20(_aliceToken);
        secondaryWallet = _secondaryWallet;
        primaryWallet = _primaryWallet;
        secondaryMarketFee = _secondaryMarketFees;
    }

    function whitelist(address nftContract) public override onlyAdmin {
        IERC721 assertInstance = IERC721(nftContract);
        require(assertInstance.supportsInterface(ERC721_SIGNATURE), logger.reportError("Invalid ERC721 Contract"));
        whitelisted[nftContract] = true;
        return;
    }

    function blacklist(address nftContract) public onlyAdmin {
        whitelisted[nftContract] = false;
        return;
    }

    function purchase(address nftContract, uint256 tokenID)
        public
        override
        onlyWhitelist(nftContract)
    {
        Asset memory _asset = assetRegister[nftContract][tokenID];
        require(_asset.forSale, logger.reportError("Not for sale"));
        require(
            _asset.price <= aliceToken.balanceOf(msg.sender),
            logger.reportError("Insufficient funds")
        );
        require(
            aliceToken.allowance(msg.sender, address(this)) >= _asset.price,
            logger.reportError("Asset price exceeds allowance")
        );
        IERC721 assetContract = IERC721(nftContract);
        if (assetContract.getApproved(tokenID) != address(this)) {
            _delist(tokenID, nftContract);
            return;
        }
        assetRegister[nftContract][tokenID].latestOffer = _declineOffer(_asset.latestOffer, nftContract, tokenID);
        uint256 secondaryFee = 0;
        uint256 royaltyFee = 0;
        if(_asset.primary){
            aliceToken.transferFrom(msg.sender, primaryWallet, _asset.price);
        } else {
            (secondaryFee, royaltyFee) = purchaseFeeCycle(
                nftContract,
                tokenID,
                _asset.price,
                msg.sender
            );
            _asset.price =  _asset.price - royaltyFee - secondaryFee;
            aliceToken.transferFrom(msg.sender, _asset.owner, _asset.price);
        }
        assetContract.safeTransferFrom(_asset.owner, msg.sender, tokenID);

        emit FixedPriceTransfer(
            _asset.owner,
            msg.sender,
            nftContract,
            tokenID,
            _asset.price,
            royaltyFee,
            secondaryFee,
            _asset.primary,
            false
        );
        delete assetRegister[nftContract][tokenID];
        return;
    }

    function sell(
        uint256 tokenID,
        address nftContract,
        uint256 price
    ) public override onlyWhitelist(nftContract) onlyNFTOwner(nftContract, tokenID) {
        require(price > 0, "Price cannot be 0");
        Asset memory _asset = assetRegister[nftContract][tokenID];
        IERC721 tokenInstance = IERC721(nftContract);
        require(
            tokenInstance.getApproved((tokenID)) == address(this),
            "Approve token for transfer"
        );
        assetRegister[nftContract][tokenID] = assetRegister[nftContract][tokenID].forSale
            ? relist(nftContract, tokenID, _asset, price)
            : list(nftContract, tokenID, price);
    }

    function delist(uint256 tokenID, address nftContract)
        public
        override
        onlyWhitelist(nftContract)
        onlyNFTOwner(nftContract, tokenID)
    {
        _delist(tokenID, nftContract);
    }
    function _delist(uint256 tokenID, address nftContract) private {
        Asset memory asset = assetRegister[nftContract][tokenID];
        require(asset.forSale, "Asset not listed");
        _declineOffer(asset.latestOffer, nftContract, tokenID);
        delete assetRegister[nftContract][tokenID];
        emit AssetDelisting(nftContract, tokenID);
    }
    function relist(
        address nftContract,
        uint256 tokenID,
        Asset memory _asset,
        uint256 price
    ) private returns (Asset memory modifiedAsset) {
        _asset.price = price;
        _asset.latestOffer = _declineOffer(_asset.latestOffer, nftContract, tokenID);
        emit AssetRelisting(nftContract, tokenID, price);
        return _asset;
    }

    function list(
        address nftContract,
        uint256 tokenID,
        uint256 price
    ) private returns (Asset memory modifiedAsset) {
        bool isPrimaryAsset = hasRole(ADMIN, msg.sender);
        emit AssetListing(nftContract, tokenID, price, isPrimaryAsset);
        return Asset(msg.sender, price, Offer(address(0), 0), true, isPrimaryAsset);
    }

    function offer(
        address nftContract,
        uint256 tokenID,
        uint256 offerAmount
    ) public onlyWhitelist(nftContract) onlyApproved(nftContract, tokenID) {
        Asset memory _asset = assetRegister[nftContract][tokenID];
        require(_asset.forSale, "Invalid asset");
        Offer memory _offer = _asset.latestOffer;
        require(
            offerAmount < _asset.price && _offer.amount < offerAmount,
            "latest offer < Offer < listing price"
        );
        require(aliceToken.balanceOf(msg.sender) >= offerAmount, "Insufficient funds");
        require(aliceToken.allowance(msg.sender, address(this)) >= offerAmount, "ERC20 not approved for this amount");
        _declineOffer(_offer, nftContract, tokenID);
        assetRegister[nftContract][tokenID].latestOffer = Offer(msg.sender, offerAmount);
        emit AssetOffer(msg.sender, nftContract, tokenID, offerAmount);
    }

    function acceptOffer(address nftContract, uint256 tokenID)
        public
        override
        onlyWhitelist(nftContract)
        onlyNFTOwner(nftContract, tokenID)
        onlyApproved(nftContract, tokenID)
    {
        Asset memory _asset = assetRegister[nftContract][tokenID];
        require(_asset.latestOffer.offerer != address(0), "No valid offer exists");
        require(aliceToken.allowance(_asset.latestOffer.offerer, address(this)) >= _asset.latestOffer.amount, "Bidder ERC20 no longer approved for this amount");
        uint256 secondaryFee = 0;
        uint256 royaltyFee = 0;
        if(_asset.primary){
            aliceToken.transferFrom(_asset.latestOffer.offerer, _asset.owner, _asset.latestOffer.amount);
        } else {
            (secondaryFee, royaltyFee) = purchaseFeeCycle(
                nftContract,
                tokenID,
                _asset.latestOffer.amount,
                _asset.latestOffer.offerer
            );
            _asset.latestOffer.amount = _asset.latestOffer.amount - royaltyFee - secondaryFee;
            aliceToken.transferFrom(_asset.latestOffer.offerer, _asset.owner, _asset.latestOffer.amount);
        }
        IERC721 assetContract = IERC721(nftContract);
        assetContract.safeTransferFrom(_asset.owner, _asset.latestOffer.offerer, tokenID);
        emit FixedPriceTransfer(
            _asset.owner,
            _asset.latestOffer.offerer,
            nftContract,
            tokenID,
            _asset.latestOffer.amount,
            royaltyFee,
            secondaryFee,
            _asset.primary,
            true
        );
        delete assetRegister[nftContract][tokenID];
    }

    function declineOffer(address nftContract, uint256 tokenID)
        public
        onlyWhitelist(nftContract)
        onlyNFTOwner(nftContract, tokenID)
    {
        assetRegister[nftContract][tokenID].latestOffer = _declineOffer(
            assetRegister[nftContract][tokenID].latestOffer, nftContract, tokenID
        );
    }

    function withdrawOffer(address nftContract, uint256 tokenID)
        public
        override
        onlyWhitelist(nftContract)
    {
        Asset memory _asset = assetRegister[nftContract][tokenID];
        require(
            _asset.latestOffer.offerer == msg.sender,
            logger.reportError("Only Offerer is permitted")
        );
        assetRegister[nftContract][tokenID].latestOffer = _declineOffer(_asset.latestOffer, nftContract, tokenID);
    }

    function _declineOffer(Offer memory _offer, address nftContract, uint256 tokenID) internal returns (Offer memory declinedOffer) {
        if (_offer.offerer != address(0)) {
            emit OfferDeclined(msg.sender, _offer.offerer, nftContract, tokenID);
        }
        _offer.offerer = address(0);
        _offer.amount = 0;
        return _offer;
    }
}