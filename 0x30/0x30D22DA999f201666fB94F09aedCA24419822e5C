/**
 *Submitted for verification at BscScan.com on 2024-08-19
*/

/**
 *Submitted for verification at BscScan.com on 2024-07-11
*/

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol


// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}

// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol


// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 *
 * ==== Security Considerations
 *
 * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature
 * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be
 * considered as an intention to spend the allowance in any specific way. The second is that because permits have
 * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should
 * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be
 * generally recommended is:
 *
 * ```solidity
 * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {
 *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}
 *     doThing(..., value);
 * }
 *
 * function doThing(..., uint256 value) public {
 *     token.safeTransferFrom(msg.sender, address(this), value);
 *     ...
 * }
 * ```
 *
 * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of
 * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also
 * {SafeERC20-safeTransferFrom}).
 *
 * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so
 * contracts should have entry points that don't rely on permit.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     *
     * CAUTION: See Security Considerations above.
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}

// File: @openzeppelin/contracts/utils/Address.sol


// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)

pragma solidity ^0.8.20;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev The ETH balance of the account is not enough to perform the operation.
     */
    error AddressInsufficientBalance(address account);

    /**
     * @dev There's no code at `target` (it is not a contract).
     */
    error AddressEmptyCode(address target);

    /**
     * @dev A call to an address target failed. The target may have reverted.
     */
    error FailedInnerCall();

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        if (address(this).balance < amount) {
            revert AddressInsufficientBalance(address(this));
        }

        (bool success, ) = recipient.call{value: amount}("");
        if (!success) {
            revert FailedInnerCall();
        }
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason or custom error, it is bubbled
     * up by this function (like regular Solidity function calls). However, if
     * the call reverted with no returned reason, this function reverts with a
     * {FailedInnerCall} error.
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        if (address(this).balance < value) {
            revert AddressInsufficientBalance(address(this));
        }
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target
     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an
     * unsuccessful call.
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata
    ) internal view returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            // only check if target is a contract if the call was successful and the return data is empty
            // otherwise we already know that it was a contract
            if (returndata.length == 0 && target.code.length == 0) {
                revert AddressEmptyCode(target);
            }
            return returndata;
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the
     * revert reason or with a default {FailedInnerCall} error.
     */
    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            return returndata;
        }
    }

    /**
     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.
     */
    function _revert(bytes memory returndata) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert FailedInnerCall();
        }
    }
}

// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol


// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.20;




/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    /**
     * @dev An operation with an ERC20 token failed.
     */
    error SafeERC20FailedOperation(address token);

    /**
     * @dev Indicates a failed `decreaseAllowance` request.
     */
    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        forceApprove(token, spender, oldAllowance + value);
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no
     * value, non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {
        unchecked {
            uint256 currentAllowance = token.allowance(address(this), spender);
            if (currentAllowance < requestedDecrease) {
                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);
            }
            forceApprove(token, spender, currentAllowance - requestedDecrease);
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval
     * to be set to zero before setting it to a non-zero value, such as USDT.
     */
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data);
        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {
            revert SafeERC20FailedOperation(address(token));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;
    }
}

// File: paca finance.sol


pragma solidity ^0.8.25;



contract PacafinanceV2 {
    using SafeERC20 for IERC20;

    /// @notice Mapping to keep track of owners.
    mapping(address => bool) public owners;

    /// @notice Struct representing the staking pool.
    struct Pool {
        uint256 lockupPeriod;        // Lockup period in seconds.
        uint256 dailyRewardRate;     // Daily reward rate in basis points (1/100th of a percent).
        uint256 totalStaked;         // Total tokens staked in the pool.
        uint256 totalRewards;        // Total rewards available in the pool.
        address tokenAddress;        // Address of the ERC20 token.
    }

    /// @notice Struct representing a user's stake.
    struct Stake {
        uint256 amount;              // Current amount of tokens staked.
        uint256 originalAmount;      // Original amount of tokens staked.
        uint256 lastClaimed;         // Timestamp of the last reward claim.
        uint256 lockupPeriod;        // Lockup period applicable to this stake.
        uint256 dailyRewardRate;     // Daily reward rate applicable to this stake.
        uint256 createdAt;           // Timestamp when the stake was created.
        bool isGifted;               // Indicates if the stake was gifted.
        bool claimed;                // Indicates if the stake has been claimed.
    }

    Pool public pool;
    mapping(address => Stake[]) public stakes;
    mapping(address => uint256) public referralPoints;
    mapping(address => address[]) public referrals;
    mapping(address => address) public lastUsedReferrer;
    uint256 public minimumClaimAmount;
    uint256 public minimumCompoundAmount;
    uint256 public totalStakesCreated;
    uint256 public totalAmountDeposited;
    mapping(address => address) public referrer;
    address[] public topReferrers;
    address[] public allReferrers;

    event Staked(address indexed user, uint256 amount, address referrer);
    event Claimed(address indexed user, uint256 reward);
    event Unstaked(address indexed user, uint256 originalAmount);
    event ReferralRewarded(address indexed referrer, uint256 points);
    event RewardsDeposited(address indexed depositor, uint256 amount);
    event StakeGifted(address indexed from, address indexed to, uint256 amount);
    event RewardsCompounded(address indexed user, uint256 compoundedAmount);
    event OriginalAmountReset(address indexed user, uint256 stakeIndex);
    event PoolUpdated(uint256 lockupPeriod, uint256 dailyRewardRate);
    event TokensWithdrawn(address indexed owner, uint256 amount);
    event OwnerAdded(address indexed newOwner);
    event OwnerRemoved(address indexed removedOwner);
    event MinimumCompoundAmountUpdated(uint256 minimumCompoundAmount);
    event StakeCreatedForUser(address indexed owner, address indexed user, uint256 amount);
    event StakeClaimed(address indexed user, uint256 amount);
    event InsufficientFunds(uint256 available, uint256 required);
    event LeaderboardReset();

    /**
     * @dev Initializes the contract by setting the deployer as the first owner and initializing the pool.
     * @param _tokenAddress The address of the ERC20 token.
     */
    constructor(address _tokenAddress) {
        owners[msg.sender] = true;
        pool = Pool({
            lockupPeriod: 0,
            dailyRewardRate: 0,
            totalStaked: 0,
            totalRewards: 0,
            tokenAddress: _tokenAddress
        });
        totalStakesCreated = 0;
        totalAmountDeposited = 0;
    }

    modifier onlyOwner() {
        require(owners[msg.sender], "Only owner can call this function.");
        _;
    }

    /**
     * @notice Adds a new owner.
     * @param _newOwner The address of the new owner.
     */
    function addOwner(address _newOwner) external onlyOwner {
        owners[_newOwner] = true;
        emit OwnerAdded(_newOwner);
    }

    /**
     * @notice Removes an existing owner.
     * @param _owner The address of the owner to remove.
     */
    function removeOwner(address _owner) external onlyOwner {
        require(owners[_owner], "Address is not an owner");
        owners[_owner] = false;
        emit OwnerRemoved(_owner);
    }

    /**
     * @notice Updates the lockup period and daily reward rate of the pool.
     * @param _lockupPeriod The lockup period in seconds.
     * @param _dailyRewardRate The daily reward rate in basis points.
     */
    function updatePool(uint256 _lockupPeriod, uint256 _dailyRewardRate) external onlyOwner {
        pool.lockupPeriod = _lockupPeriod;
        pool.dailyRewardRate = _dailyRewardRate;
        emit PoolUpdated(_lockupPeriod, _dailyRewardRate);
    }

    /**
     * @notice Creates a new stake for the caller or another user.
     * @param _amount The amount of tokens to stake.
     * @param _referrer The address of the referrer.
     * @param _to The address of the recipient (if gifting the stake).
     */
    function createStake(uint256 _amount, address _referrer, address _to) external {
        require(_amount > 0, "Stake amount must be greater than zero.");
        require(_referrer != msg.sender, "You cannot refer yourself.");
        require(_to != msg.sender, "Cannot gift to yourself.");

        address recipient = _to == address(0) ? msg.sender : _to;

        IERC20 token = IERC20(pool.tokenAddress);
        token.safeTransferFrom(msg.sender, address(this), _amount);

        pool.totalStaked += _amount;
        totalStakesCreated += 1;
        totalAmountDeposited += _amount;

        if (_referrer != address(0) && recipient == msg.sender) {
            referrer[msg.sender] = _referrer;
            lastUsedReferrer[msg.sender] = _referrer;
            if (referralPoints[_referrer] == 0) {
                allReferrers.push(_referrer);
            }
            referralPoints[_referrer] += _amount;
            referrals[_referrer].push(msg.sender);
            _updateTopReferrers(_referrer);
            emit ReferralRewarded(_referrer, _amount);
        }

        stakes[recipient].push(Stake({
            amount: _amount,
            originalAmount: _amount,
            lastClaimed: block.timestamp,
            lockupPeriod: pool.lockupPeriod,
            dailyRewardRate: pool.dailyRewardRate,
            createdAt: block.timestamp,
            isGifted: _to != address(0),
            claimed: false
        }));

        emit Staked(recipient, _amount, _referrer);
    }

    /**
     * @notice Creates a new stake for a user without transferring tokens.
     * @param _user The address of the user.
     * @param _amount The amount of tokens to stake.
     */
    function createStakeForUser(address _user, uint256 _amount, uint256 _lockupPeriod, uint256 _dailyRewardRate) external onlyOwner {        require(_amount > 0, "Stake amount must be greater than zero.");
        pool.totalStaked += _amount;
        totalStakesCreated += 1;        totalAmountDeposited += _amount;
        stakes[_user].push(Stake({
            amount: _amount,            originalAmount: _amount,
            lastClaimed: block.timestamp,            lockupPeriod: _lockupPeriod,
            dailyRewardRate: _dailyRewardRate,            createdAt: block.timestamp,
            isGifted: false,            claimed: false
        }));
        emit StakeCreatedForUser(msg.sender, _user, _amount);    }
    /**
     * @notice Claims all rewards for the user's stakes.
     */
    function claimAllRewards() public {
        uint256 totalReward = 0;
        Stake[] storage userStakes = stakes[msg.sender];

        for (uint256 i = 0; i < userStakes.length; i++) {
            uint256 reward = calculateReward(userStakes[i]);
            if (reward > 0) {
                userStakes[i].lastClaimed = block.timestamp;
                totalReward += reward;
            }
        }

        require(totalReward >= minimumClaimAmount, "No rewards to claim or minimum claim amount not reached.");

        uint256 contractBalance = IERC20(pool.tokenAddress).balanceOf(address(this));
        require(contractBalance >= totalReward, "Insufficient contract balance to pay rewards");
        if (contractBalance < totalReward) {
            emit InsufficientFunds(contractBalance, totalReward);
            return;
        }

        pool.totalRewards -= totalReward;

        IERC20 token = IERC20(pool.tokenAddress);
        token.safeTransfer(msg.sender, totalReward);

        emit Claimed(msg.sender, totalReward);
    }

    /**
     * @notice Claims the staked amount after the lockup period ends.
     * @param stakeIndex The index of the stake to claim.
     */
    function claimStake(uint256 stakeIndex) external {
        Stake storage userStake = stakes[msg.sender][stakeIndex];
        require(!userStake.claimed, "Stake already claimed.");
        require(block.timestamp >= userStake.createdAt + userStake.lockupPeriod, "Lockup period not yet ended.");

        uint256 amountToClaim = userStake.amount;
        userStake.amount = 0;
        userStake.claimed = true;

        pool.totalStaked -= amountToClaim;

        IERC20 token = IERC20(pool.tokenAddress);
        token.safeTransfer(msg.sender, amountToClaim);

        emit StakeClaimed(msg.sender, amountToClaim);
    }

    /**
     * @notice Compounds all rewards for the user's stakes into a new stake.
     */
    function compoundAllRewards() external {
        uint256 totalReward = 0;
        Stake[] storage userStakes = stakes[msg.sender];

        for (uint256 i = 0; i < userStakes.length; i++) {
            uint256 reward = calculateReward(userStakes[i]);
            if (reward > 0) {
                userStakes[i].lastClaimed = block.timestamp;
                totalReward += reward;
            }
        }

        require(totalReward >= minimumCompoundAmount, "No rewards to compound or minimum compound amount not reached.");

        // Create a new stake with the compounded rewards
        stakes[msg.sender].push(Stake({
            amount: totalReward,
            originalAmount: totalReward,
            lastClaimed: block.timestamp,
            lockupPeriod: pool.lockupPeriod,
            dailyRewardRate: pool.dailyRewardRate,
            createdAt: block.timestamp,
            isGifted: false,
            claimed: false
        }));

        pool.totalStaked += totalReward;
        pool.totalRewards -= totalReward;

        emit RewardsCompounded(msg.sender, totalReward);
    }

    /**
     * @notice Calculates the reward for a specific stake based on the rate at the time of staking.
     * @param stake The stake to calculate the reward for.
     * @return The reward amount.
     */
    function calculateReward(Stake storage stake) private view returns (uint256) {
        uint256 timeElapsed = block.timestamp - stake.lastClaimed;
        uint256 reward = stake.originalAmount * stake.dailyRewardRate / 10000 * timeElapsed / 86400;
        return reward;
    }

    /**
     * @notice Views the rewards for all stakes of a user.
     * @param _user The address of the user.
     * @return The total rewards for the user.
     */
    function viewAllRewards(address _user) public view returns (uint256) {
        uint256 totalRewards = 0;
        Stake[] storage userStakes = stakes[_user];

        for (uint256 i = 0; i < userStakes.length; i++) {
            totalRewards += calculateReward(userStakes[i]);
        }

        return totalRewards;
    }

    /**
     * @notice Views all stakes for a user.
     * @param _user The address of the user.
     * @return An array of all stakes for the user.
     */
    function getStakes(address _user) external view returns (Stake[] memory) {
        return stakes[_user];
    }

    /**
     * @notice Views the referral points for a specific address.
     * @param _referrer The address of the referrer.
     * @return The total referral points for the referrer.
     */
    function getReferralPoints(address _referrer) external view returns (uint256) {
        return referralPoints[_referrer];
    }

    /**
     * @notice Views the last used referral address for a specific user.
     * @param _user The address of the user.
     * @return The last used referral address.
     */
    function getLastUsedReferrer(address _user) external view returns (address) {
        return lastUsedReferrer[_user];
    }

    /**
     * @notice Returns the top 5 referrers.
     * @return An array of the top 5 referrers.
     */
    function getTopReferrers() external view returns (address[] memory) {
        uint256 length = topReferrers.length < 5 ? topReferrers.length : 5;
        address[] memory top = new address[](length);
        for (uint256 i = 0; i < length; i++) {
            top[i] = topReferrers[i];
        }
        return top;
    }

    /**
     * @notice Sets the minimum claim amount.
     * @param _amount The minimum claim amount.
     */
    function setMinimumClaimAmount(uint256 _amount) external onlyOwner {
        minimumClaimAmount = _amount;
    }

    /**
     * @notice Sets the minimum compound amount.
     * @param _amount The minimum compound amount.
     */
    function setMinimumCompoundAmount(uint256 _amount) external onlyOwner {
        minimumCompoundAmount = _amount;
        emit MinimumCompoundAmountUpdated(_amount);
    }

    /**
     * @notice Deposits reward tokens into the pool.
     * @param _amount The amount of tokens to deposit.
     */
    function depositRewardTokens(uint256 _amount) external {
        IERC20 token = IERC20(pool.tokenAddress);
        token.safeTransferFrom(msg.sender, address(this), _amount);

        pool.totalRewards += _amount;

        emit RewardsDeposited(msg.sender, _amount);
    }

    /**
     * @notice Gifts a stake to another address.
     * @param stakeIndex The index of the stake to gift.
     * @param _to The address to gift the stake to.
     */
    function giftStake(uint256 stakeIndex, address _to) external {
        require(_to != address(0), "Cannot gift to the zero address.");
        require(_to != msg.sender, "Cannot gift to yourself.");

        Stake storage senderStake = stakes[msg.sender][stakeIndex];
        require(senderStake.amount > 0, "No stake to gift.");

        stakes[_to].push(Stake({
            amount: senderStake.amount,
            originalAmount: senderStake.originalAmount,
            lastClaimed: senderStake.lastClaimed,
            lockupPeriod: senderStake.lockupPeriod,
            dailyRewardRate: senderStake.dailyRewardRate,
            createdAt: senderStake.createdAt,
            isGifted: true,
            claimed: senderStake.claimed
        }));

        emit StakeGifted(msg.sender, _to, senderStake.amount);

        senderStake.amount = 0;
        senderStake.originalAmount = 0;
    }

    /**
     * @notice Removes a specific amount of tokens from the contract balance.
     * @param _amount The amount of tokens to remove.
     */
    function withdrawTokens(uint256 _amount) external onlyOwner {
        IERC20 token = IERC20(pool.tokenAddress);
        token.safeTransfer(msg.sender, _amount);

        emit TokensWithdrawn(msg.sender, _amount);
    }

    /**
     * @notice Resets the original amount of a user's stake.
     * @param _user The address of the user.
     * @param stakeIndex The index of the stake to reset.
     */
    function resetOriginalAmount(address _user, uint256 stakeIndex) external onlyOwner {
        Stake storage userStake = stakes[_user][stakeIndex];
        userStake.originalAmount = 0;

        emit OriginalAmountReset(_user, stakeIndex);
    }

    /**
     * @notice Returns the number of days remaining until the stake unlocks.
     * @param _user The address of the user.
     * @param stakeIndex The index of the stake to check.
     * @return The number of days remaining.
     */
    function daysRemaining(address _user, uint256 stakeIndex) external view returns (uint256) {
        Stake storage userStake = stakes[_user][stakeIndex];
        uint256 elapsedTime = block.timestamp - userStake.createdAt;
        if (elapsedTime >= userStake.lockupPeriod) {
            return 0;
        } else {
            uint256 remainingTime = userStake.lockupPeriod - elapsedTime;
            return remainingTime / 86400; // Convert seconds to days
        }
    }

    /**
     * @notice Checks if a stake is gifted.
     * @param _user The address of the user.
     * @param stakeIndex The index of the stake to check.
     * @return Boolean indicating if the stake is gifted.
     */
    function isStakeGifted(address _user, uint256 stakeIndex) external view returns (bool) {
        Stake storage userStake = stakes[_user][stakeIndex];
        return userStake.isGifted;
    }

    /**
     * @notice Returns the current lockup period and daily reward rate of the pool.
     * @return The lockup period and daily reward rate.
     */
    function getPoolDetails() external view returns (uint256, uint256) {
        return (pool.lockupPeriod, pool.dailyRewardRate);
    }

    /**
     * @notice Returns the current lockup period of the pool.
     * @return The lockup period.
     */
    function getPoolLockupPeriod() external view returns (uint256) {
        return pool.lockupPeriod;
    }

    /**
     * @notice Returns the current daily reward rate of the pool.
     * @return The daily reward rate.
     */
    function getPoolDailyRewardRate() external view returns (uint256) {
        return pool.dailyRewardRate;
    }

    /**
     * @notice Returns the total number of stakes created and the total amount deposited.
     * @return totalStakesCreated and totalAmountDeposited.
     */
    function getTotalStakesAndDeposited() external view returns (uint256, uint256) {
        return (totalStakesCreated, totalAmountDeposited);
    }

    /**
     * @notice Resets the referral leaderboard and sets all referral points back to zero.
     */
    function resetLeaderboard() external onlyOwner {
        for (uint256 i = 0; i < allReferrers.length; i++) {
            referralPoints[allReferrers[i]] = 0;
        }
        delete topReferrers;
        delete allReferrers;
        emit LeaderboardReset();
    }

    /**
     * @notice Internal function to update the top referrers list.
     * @param _referrer The address of the referrer to update.
     */
    function _updateTopReferrers(address _referrer) internal {
        for (uint256 i = 0; i < topReferrers.length; i++) {
            if (topReferrers[i] == _referrer) {
                // Bubble up the referrer in the list if necessary
                for (uint256 j = i; j > 0; j--) {
                    if (referralPoints[topReferrers[j]] > referralPoints[topReferrers[j - 1]]) {
                        (topReferrers[j], topReferrers[j - 1]) = (topReferrers[j - 1], topReferrers[j]);
                    } else {
                        break;
                    }
                }
                return;
            }
        }

        // If the referrer is not in the list, add them if there's room or they have more points than the last referrer
        if (topReferrers.length < 5) {
            topReferrers.push(_referrer);
        } else if (referralPoints[_referrer] > referralPoints[topReferrers[topReferrers.length - 1]]) {
            topReferrers[topReferrers.length - 1] = _referrer;
        }

        // Bubble up the new referrer in the list
        for (uint256 k = topReferrers.length - 1; k > 0; k--) {
            if (referralPoints[topReferrers[k]] > referralPoints[topReferrers[k - 1]]) {
                (topReferrers[k], topReferrers[k - 1]) = (topReferrers[k - 1], topReferrers[k]);
            } else {
                break;
            }
        }
    }
}