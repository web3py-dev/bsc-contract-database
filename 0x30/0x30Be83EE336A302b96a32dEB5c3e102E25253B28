/**
 *Submitted for verification at BscScan.com on 2024-09-17
*/

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IBEP20 {
  function totalSupply() external view returns (uint256);
  function balanceOf(address who) external view returns (uint256);
  function allowance(address owner, address spender) external view returns (uint256);
  function transfer(address to, uint256 value) external returns (bool);
  function approve(address spender, uint256 value) external returns (bool);
  
  function transferFrom(address from, address to, uint256 value) external returns (bool);
  function burn(uint256 value) external returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract World_Speaks{
  
    event Multisended(uint256 value, address indexed sender);
    event Airdropped(address indexed _userAddress, uint256 _amount);
	event NewRegistration(string referralId, uint investment, address referralWallet);
	event Reinvestment(string investorId, uint256 investment, address indexed investor, string pool_name);
	event WithDraw(string investorId, address indexed investor, uint256 WithAmt, uint netAmt);
	event MenberPayment(string investorId, address indexed investor, uint256 WithAmt, uint netAmt);
	event Payment(uint256 NetQty);
	
    IBEP20 private USDT; 
    address public operator;   
   
    constructor(address operatorAddress, IBEP20 _USDT) {
        operator = operatorAddress;  
        USDT = _USDT;
    }
    
    function registerUser(string memory referralId, uint PackAmt,address BoxWallet, address referralWallet, uint Amount) public payable {
	    USDT.transferFrom(msg.sender, referralWallet, Amount);
	    USDT.transferFrom(msg.sender, BoxWallet, PackAmt);
		emit NewRegistration(referralId, PackAmt, referralWallet);
	}

	function BuyBox(string memory memberid,address BoxWallet, uint BoxAmt, string memory pool) public payable {
	    
		USDT.transferFrom(msg.sender, BoxWallet, BoxAmt);
		emit Reinvestment(memberid, BoxAmt, msg.sender, pool);
	}

    function multisendBNB(address payable[] memory _contributors, uint256[] memory _balances) public payable {
        uint256 total = msg.value;
        uint256 i = 0;
        for (i; i < _contributors.length; i++) {
            require(total >= _balances[i], "Insufficient total balance");
            total -= _balances[i];
            _contributors[i].transfer(_balances[i]);
        }
    }
    
    function BuySlot(address payable[] memory _contributors, uint256[] memory _balances, uint256 totalQty) public payable {
    	uint256 total = totalQty;
        uint256 i = 0;
        for (i; i < _contributors.length; i++) {
            require(total >= _balances[i], "Insufficient total token balance");
            total -= _balances[i];
            USDT.transferFrom(msg.sender, _contributors[i], _balances[i]);
        }
		emit Payment(totalQty);
    }
    
	function multisendWithdraw(address payable[] memory _contributors, uint256[] memory _balances) public payable {
    	require(msg.sender == operator, "Only operator can execute this");
        uint256 i = 0;
        for (i; i < _contributors.length; i++) {
              USDT.transfer(_contributors[i], _balances[i]);
        }
    }
    
    function withdrawLostBNBFromBalance(address payable _sender) public {
        require(msg.sender == operator, "Only operator can withdraw");
        _sender.transfer(address(this).balance);
    }
    
    function withdrawincome(address payable _userAddress, uint256 WithAmt) public {
        require(msg.sender == operator, "Only operator can withdraw income");
        USDT.transferFrom(msg.sender, _userAddress, WithAmt);
    }
     
	function withdrawLostTokenFromBalance(uint QtyAmt) public {
        require(msg.sender == operator, "Only operator can withdraw tokens");
        USDT.transfer(operator, QtyAmt);
	}
}