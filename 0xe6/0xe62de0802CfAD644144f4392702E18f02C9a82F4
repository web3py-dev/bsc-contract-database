pragma solidity 0.6.12;
pragma experimental ABIEncoderV2;


// a library for performing overflow-safe math, updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math)
library BoringMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {require((c = a + b) >= b, "BoringMath: Add Overflow");}
    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {require((c = a - b) <= a, "BoringMath: Underflow");}
    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {require(b == 0 || (c = a * b)/b == a, "BoringMath: Mul Overflow");}
    function to128(uint256 a) internal pure returns (uint128 c) {
        require(a <= uint128(-1), "BoringMath: uint128 Overflow");
        c = uint128(a);
    }
    function to64(uint256 a) internal pure returns (uint64 c) {
        require(a <= uint64(-1), "BoringMath: uint64 Overflow");
        c = uint64(a);
    }
    function to32(uint256 a) internal pure returns (uint32 c) {
        require(a <= uint32(-1), "BoringMath: uint32 Overflow");
        c = uint32(a);
    }
}

library BoringMath128 {
    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {require((c = a + b) >= b, "BoringMath: Add Overflow");}
    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {require((c = a - b) <= a, "BoringMath: Underflow");}
}

library BoringMath64 {
    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {require((c = a + b) >= b, "BoringMath: Add Overflow");}
    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {require((c = a - b) <= a, "BoringMath: Underflow");}
}

library BoringMath32 {
    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {require((c = a + b) >= b, "BoringMath: Add Overflow");}
    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {require((c = a - b) <= a, "BoringMath: Underflow");}
}

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    // EIP 2612
    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;
}

library BoringERC20 {
    function safeSymbol(IERC20 token) internal view returns(string memory) {
        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x95d89b41));
        return success && data.length > 0 ? abi.decode(data, (string)) : "???";
    }

    function safeName(IERC20 token) internal view returns(string memory) {
        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x06fdde03));
        return success && data.length > 0 ? abi.decode(data, (string)) : "???";
    }

    function safeDecimals(IERC20 token) internal view returns (uint8) {
        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x313ce567));
        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;
    }

    function safeTransfer(IERC20 token, address to, uint256 amount) internal {
        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0xa9059cbb, to, amount));
        require(success && (data.length == 0 || abi.decode(data, (bool))), "BoringERC20: Transfer failed");
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {
        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0x23b872dd, from, to, amount));
        require(success && (data.length == 0 || abi.decode(data, (bool))), "BoringERC20: TransferFrom failed");
    }
}

// Audit on 5-Jan-2021 by Keno and BoringCrypto
// P1 - P3: OK
// solhint-disable avoid-low-level-calls
// T1 - T4: OK
contract BaseBoringBatchable {
    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {
        // If the _res length is less than 68, then the transaction failed silently (without a revert message)
        if (_returnData.length < 68) return "Transaction reverted silently";

        assembly {
            // Slice the sighash.
            _returnData := add(_returnData, 0x04)
        }
        return abi.decode(_returnData, (string)); // All that remains is the revert string
    }    
    
    // F3 - F9: OK
    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense
    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value
    // C1 - C21: OK
    // C3: The length of the loop is fully under user control, so can't be exploited
    // C7: Delegatecall is only used on the same contract, so it's safe
    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns(bool[] memory successes, bytes[] memory results) {
        // Interactions
        successes = new bool[](calls.length);
        results = new bytes[](calls.length);
        for (uint256 i = 0; i < calls.length; i++) {
            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);
            require(success || !revertOnFail, _getRevertMsg(result));
            successes[i] = success;
            results[i] = result;
        }
    }
}

// T1 - T4: OK
contract BoringBatchable is BaseBoringBatchable {
    // F1 - F9: OK
    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)
    //     if part of a batch this could be used to grief once as the second call would not need the permit
    // C1 - C21: OK
    function permitToken(IERC20 token, address from, address to, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {
        // Interactions
        // X1 - X5
        token.permit(from, to, amount, deadline, v, r, s);
    }
}

// Audit on 5-Jan-2021 by Keno and BoringCrypto
// P1 - P3: OK
// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol
// Edited by BoringCrypto
// T1 - T4: OK
contract BoringOwnableData {
    // V1 - V5: OK
    address public owner;
    // V1 - V5: OK
    address public pendingOwner;
}

// T1 - T4: OK
contract BoringOwnable is BoringOwnableData {
    // E1: OK
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () public {
        owner = msg.sender;
        emit OwnershipTransferred(address(0), msg.sender);
    }

    // F1 - F9: OK
    // C1 - C21: OK
    function transferOwnership(address newOwner, bool direct, bool renounce) public onlyOwner {
        if (direct) {
            // Checks
            require(newOwner != address(0) || renounce, "Ownable: zero address");

            // Effects
            emit OwnershipTransferred(owner, newOwner);
            owner = newOwner;
            pendingOwner = address(0);
        } else {
            // Effects
            pendingOwner = newOwner;
        }
    }

    // F1 - F9: OK
    // C1 - C21: OK
    function claimOwnership() public {
        address _pendingOwner = pendingOwner;
        
        // Checks
        require(msg.sender == _pendingOwner, "Ownable: caller != pending owner");

        // Effects
        emit OwnershipTransferred(owner, _pendingOwner);
        owner = _pendingOwner;
        pendingOwner = address(0);
    }

    // M1 - M5: OK
    // C1 - C21: OK
    modifier onlyOwner() {
        require(msg.sender == owner, "Ownable: caller is not the owner");
        _;
    }
}

library SignedSafeMath {
    int256 constant private _INT256_MIN = -2**255;

    /**
     * @dev Returns the multiplication of two signed integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(int256 a, int256 b) internal pure returns (int256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        require(!(a == -1 && b == _INT256_MIN), "SignedSafeMath: multiplication overflow");

        int256 c = a * b;
        require(c / a == b, "SignedSafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two signed integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(int256 a, int256 b) internal pure returns (int256) {
        require(b != 0, "SignedSafeMath: division by zero");
        require(!(b == -1 && a == _INT256_MIN), "SignedSafeMath: division overflow");

        int256 c = a / b;

        return c;
    }

    /**
     * @dev Returns the subtraction of two signed integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(int256 a, int256 b) internal pure returns (int256) {
        int256 c = a - b;
        require((b >= 0 && c <= a) || (b < 0 && c > a), "SignedSafeMath: subtraction overflow");

        return c;
    }

    /**
     * @dev Returns the addition of two signed integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(int256 a, int256 b) internal pure returns (int256) {
        int256 c = a + b;
        require((b >= 0 && c >= a) || (b < 0 && c < a), "SignedSafeMath: addition overflow");

        return c;
    }

    function toUInt256(int256 a) internal pure returns (uint256) {
        require(a >= 0, "Integer < 0");
        return uint256(a);
    }
}

interface ISfexRewarder {
    using BoringERC20 for IERC20;
    function onSfexReward(uint256 pid, address user, address recipient, uint256 sfexAmount, uint256 newLpAmount) external;
    function pendingTokens(uint256 pid, address user, uint256 sfexAmount) external view returns (IERC20[] memory, uint256[] memory);
}

interface IMigratorChef {
    // Take the current LP token address and return the new LP token address.
    // Migrator should have full access to the caller's LP token.
    function migrate(IERC20 token) external returns (IERC20);
}

contract MissionControl is BoringOwnable, BoringBatchable {
    using BoringMath for uint256;
    using BoringMath128 for uint128;
    using BoringERC20 for IERC20;
    using SignedSafeMath for int256;

    /// @notice Info of each MC user.
    /// `amount` LP token amount the user has provided.
    /// `rewardDebt` The amount of SFEX entitled to the user.
    struct UserInfo {
        uint256 amount;
        int256 rewardDebt;
        uint64 lastClaimTime;
    }

    /// @notice Info of each MC pool.
    /// `allocPoint` The amount of allocation points assigned to the pool.
    /// Also known as the amount of SFEX to distribute per block.
    struct PoolInfo {
        uint128 accSfexPerShare;
        uint64 lastRewardTime;
        uint64 allocPoint;
        // lock time in seconds
        uint64 lockTime;
    }

    /// @notice Address of SFEX contract.
    IERC20 public immutable SFEX;
    // @notice The migrator contract. It has a lot of power. Can only be set through governance (owner).
    IMigratorChef public migrator;
    /// @notice Address where emergency withdraw fees are sent to
    address public feeCollector;
    uint256 public feePercent = 10;

    /// @notice Info of each MC pool.
    PoolInfo[] public poolInfo;
    /// @notice Address of the LP token for each MC pool.
    IERC20[] public lpToken;
    /// @notice Address of each `ISfexRewarder` contract in MC.
    ISfexRewarder[] public rewarder;

    /// @notice Info of each user that stakes LP tokens.
    mapping (uint256 => mapping (address => UserInfo)) public userInfo;
    /// @dev Total allocation points. Must be the sum of all allocation points in all pools.
    uint256 public totalAllocPoint;

    mapping (uint256 => uint256) public lpTokenDeposits;

    /// @notice SFEX rewards to pay per second. These are paid until the
    /// contract runs out of SFEX
    uint256 public sfexPerSecond;
    uint256 private constant ACC_SFEX_PRECISION = 1e12;

    /// @notice Total SFEX deposited in SFEX pool (if any exist)
    uint256 public SFEX_DEPOSITED;
    /// @dev Amount of SFEX from balance that is set aside to be harvested
    uint256 public PENDING_SFEX_REWARDS;

    event Deposit(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);
    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);
    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);
    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);
    event LogPoolAddition(uint256 indexed pid, uint256 allocPoint, IERC20 indexed lpToken, ISfexRewarder indexed rewarder, uint256 lockTime);
    event LogSetPool(uint256 indexed pid, uint256 allocPoint, ISfexRewarder indexed rewarder, bool overwrite, uint256 lockTime);
    event LogUpdatePool(uint256 indexed pid, uint64 lastRewardTime, uint256 lpSupply, uint256 accSfexPerShare);
    event LogSfexPerSecond(uint256 sfexPerSecond);

    /// @param _sfex The SFEX token contract address.
    /// @param _feeCollector Address to send emergency withdrawal fees to
    constructor(IERC20 _sfex, address _feeCollector) public {
        SFEX = _sfex;
        feeCollector = _feeCollector;
    }

    /// @notice Returns the number of MC pools.
    function poolLength() public view returns (uint256 pools) {
        pools = poolInfo.length;
    }

    /// @notice Add a new LP to the pool with time lock. Can only be called by the owner.
    /// @param allocPoint AP of the new pool.
    /// @param _lpToken Address of the LP ERC-20 token.
    /// @param _rewarder Address of the rewarder delegate.
    /// @param _lockTimeInSeconds Number of seconds to lock users tokens for
    function addWithLock(uint256 allocPoint, IERC20 _lpToken, ISfexRewarder _rewarder, uint256 _lockTimeInSeconds) public onlyOwner {
        totalAllocPoint = totalAllocPoint.add(allocPoint);
        lpToken.push(_lpToken);
        rewarder.push(_rewarder);

        poolInfo.push(PoolInfo({
            allocPoint: allocPoint.to64(),
            lastRewardTime: block.timestamp.to64(),
            accSfexPerShare: 0,
            lockTime: _lockTimeInSeconds.to64()
        }));
        emit LogPoolAddition(lpToken.length.sub(1), allocPoint, _lpToken, _rewarder, _lockTimeInSeconds);
    }

    function _getLpSupply(uint256 pid) private view returns (uint256) {
        if (lpToken[pid] == SFEX) {
            return SFEX_DEPOSITED;
        }
        return lpTokenDeposits[pid];
    }

    /// @notice Gives the total SFEX reward for all pools over time period
    function _getSfexRewardForTime(uint256 _time, uint64 allocPoint) private view returns (uint256) {
        uint256 rewardBalance = SFEX.balanceOf(address(this)).sub(SFEX_DEPOSITED).sub(PENDING_SFEX_REWARDS);
        uint256 desiredSfexReward = _time.mul(sfexPerSecond).mul(allocPoint) / totalAllocPoint;

        if (rewardBalance > desiredSfexReward) {
            return desiredSfexReward;
        } else {
            return rewardBalance;
        }
    }

    function _trackPendingSfexReward(uint256 amount) private {
        PENDING_SFEX_REWARDS = PENDING_SFEX_REWARDS.add(amount);
    }

    /// @notice Add a new LP to the pool. Can only be called by the owner.
    /// @param allocPoint AP of the new pool.
    /// @param _lpToken Address of the LP ERC-20 token.
    /// @param _rewarder Address of the rewarder delegate.
    function add(uint256 allocPoint, IERC20 _lpToken, ISfexRewarder _rewarder) public onlyOwner {
        addWithLock(allocPoint, _lpToken, _rewarder, 0);
    }


    /// @notice Update the given pool's SFEX allocation point and `ISfexRewarder` contract. Can only be called by the owner.
    /// @param _pid The index of the pool. See `poolInfo`.
    /// @param _allocPoint New AP of the pool.
    /// @param _rewarder Address of the rewarder delegate.
    /// @param overwrite True if _rewarder should be `set`. Otherwise `_rewarder` is ignored.
    /// @param _lockTime pool lock time in seconds. Set to 0 to remove lock
    function set(uint256 _pid, uint256 _allocPoint, ISfexRewarder _rewarder, bool overwrite, uint256 _lockTime) public onlyOwner {
        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);
        poolInfo[_pid].allocPoint = _allocPoint.to64();
        poolInfo[_pid].lockTime = _lockTime.to64();
        if (overwrite) { rewarder[_pid] = _rewarder; }
        emit LogSetPool(_pid, _allocPoint, overwrite ? _rewarder : rewarder[_pid], overwrite, _lockTime);
    }

    /// @notice Sets the sfex per second to be distributed. Can only be called by the owner.
    /// @param _sfexPerSecond The amount of Sfex to be distributed per second.
    function setSfexPerSecond(uint256 _sfexPerSecond) public onlyOwner {
        sfexPerSecond = _sfexPerSecond;
        emit LogSfexPerSecond(_sfexPerSecond);
    }

    /// @notice Set the `migrator` contract. Can only be called by the owner.
    /// @param _migrator The contract address to set.
    function setMigrator(IMigratorChef _migrator) public onlyOwner {
        migrator = _migrator;
    }

    /// @notice Migrate LP token to another LP contract through the `migrator` contract.
    /// @param _pid The index of the pool. See `poolInfo`.
    function migrate(uint256 _pid) public {
        require(address(migrator) != address(0), "MasterChefV2: no migrator set");

        IERC20 _lpToken = lpToken[_pid];
        uint256 bal = _getLpSupply(_pid);

        _lpToken.approve(address(migrator), bal);

        IERC20 newLpToken = migrator.migrate(_lpToken);

        // no need to update lpTokenDeposits as we guaratee the balances match
        require(bal == newLpToken.balanceOf(address(this)), "MasterChefV2: migrated balance must match");
        lpToken[_pid] = newLpToken;
    }

    /// @notice View function to see pending SFEX on frontend.
    /// @param _pid The index of the pool. See `poolInfo`.
    /// @param _user Address of user.
    /// @return pending SFEX reward for a given user.
    function pendingSfex(uint256 _pid, address _user) external view returns (uint256 pending) {
        PoolInfo memory pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][_user];
        uint256 accSfexPerShare = pool.accSfexPerShare;
        uint256 lpSupply = _getLpSupply(_pid);
        if (block.timestamp > pool.lastRewardTime && lpSupply != 0) {
            uint256 time = block.timestamp.sub(pool.lastRewardTime);
            uint256 sfexReward = _getSfexRewardForTime(time, pool.allocPoint);

            accSfexPerShare = accSfexPerShare.add(sfexReward.mul(ACC_SFEX_PRECISION) / lpSupply);
        }
        pending = int256(user.amount.mul(accSfexPerShare) / ACC_SFEX_PRECISION).sub(user.rewardDebt).toUInt256();
    }

    /// @notice Update reward variables for all pools. Be careful of gas spending!
    /// @param pids Pool IDs of all to be updated. Make sure to update all active pools.
    function massUpdatePools(uint256[] calldata pids) external {
        uint256 len = pids.length;
        for (uint256 i = 0; i < len; ++i) {
            updatePool(pids[i]);
        }
    }

    /// @notice Update reward variables of the given pool.
    /// @param pid The index of the pool. See `poolInfo`.
    /// @return pool Returns the pool that was updated.
    function updatePool(uint256 pid) public returns (PoolInfo memory pool) {
        pool = poolInfo[pid];
        if (block.timestamp > pool.lastRewardTime) {
            uint256 lpSupply = _getLpSupply(pid);
            if (lpSupply > 0) {
                uint256 time = block.timestamp.sub(pool.lastRewardTime);
                uint256 sfexReward = _getSfexRewardForTime(time, pool.allocPoint);

                _trackPendingSfexReward(sfexReward);
                pool.accSfexPerShare = pool.accSfexPerShare.add((sfexReward.mul(ACC_SFEX_PRECISION) / lpSupply).to128());
            }
            pool.lastRewardTime = block.timestamp.to64();
            poolInfo[pid] = pool;
            emit LogUpdatePool(pid, pool.lastRewardTime, lpSupply, pool.accSfexPerShare);
        }
    }

    function _depositLpToken(uint256 pid, uint256 amount) private {
        lpToken[pid].safeTransferFrom(msg.sender, address(this), amount);
        lpTokenDeposits[pid] = lpTokenDeposits[pid].add(amount);
        // Track deposited SFEX separately from contract SFEX used for rewards
        if (lpToken[pid] == SFEX) {
            SFEX_DEPOSITED = SFEX_DEPOSITED.add(amount);
        }
    }

    function _withdrawLpToken(uint256 pid, uint256 amount, address to) private {
        lpToken[pid].safeTransfer(to, amount);
        lpTokenDeposits[pid] = lpTokenDeposits[pid].sub(amount);
        // Track deposited SFEX separately from contract SFEX used for rewards
        if (lpToken[pid] == SFEX) {
            SFEX_DEPOSITED = SFEX_DEPOSITED.sub(amount);
        }
    }

    /// @notice Deposit LP tokens to MC for SFEX allocation.
    /// @param pid The index of the pool. See `poolInfo`.
    /// @param amount LP token amount to deposit.
    /// @param to The receiver of `amount` deposit benefit.
    function deposit(uint256 pid, uint256 amount, address to) public {
        PoolInfo memory pool = updatePool(pid);
        UserInfo storage user = userInfo[pid][to];

        // Effects
        user.amount = user.amount.add(amount);
        user.rewardDebt = user.rewardDebt.add(int256(amount.mul(pool.accSfexPerShare) / ACC_SFEX_PRECISION));
        user.lastClaimTime = block.timestamp.to64();

        // Interactions
        ISfexRewarder _rewarder = rewarder[pid];
        if (address(_rewarder) != address(0)) {
            _rewarder.onSfexReward(pid, to, to, 0, user.amount);
        }

        _depositLpToken(pid, amount);

        emit Deposit(msg.sender, pid, amount, to);
    }

    /// @notice Pays out SFEX rewards
    /// @param _pendingSfex amount of SFEX to pay
    /// @param _to address to pay to
    function _paySfexReward(uint256 _pendingSfex, address _to) private {
        SFEX.safeTransfer(_to, _pendingSfex);
        PENDING_SFEX_REWARDS = PENDING_SFEX_REWARDS.sub(_pendingSfex);
    }

    /// @notice Withdraw LP tokens from MC.
    /// @param pid The index of the pool. See `poolInfo`.
    /// @param amount LP token amount to withdraw.
    /// @param to Receiver of the LP tokens.
    function withdraw(uint256 pid, uint256 amount, address to) public {
        PoolInfo memory pool = updatePool(pid);
        UserInfo storage user = userInfo[pid][msg.sender];
        require((block.timestamp.to64() - user.lastClaimTime) >= pool.lockTime, "lock period not ended");

        // Effects
        user.rewardDebt = user.rewardDebt.sub(int256(amount.mul(pool.accSfexPerShare) / ACC_SFEX_PRECISION));
        user.amount = user.amount.sub(amount);
        user.lastClaimTime = block.timestamp.to64();

        // Interactions
        ISfexRewarder _rewarder = rewarder[pid];
        if (address(_rewarder) != address(0)) {
            _rewarder.onSfexReward(pid, msg.sender, to, 0, user.amount);
        }

        _withdrawLpToken(pid, amount, to);

        emit Withdraw(msg.sender, pid, amount, to);
    }

    /// @notice Harvest proceeds for transaction sender to `to`.
    /// @param pid The index of the pool. See `poolInfo`.
    /// @param to Receiver of SFEX rewards.
    function harvest(uint256 pid, address to) public {
        PoolInfo memory pool = updatePool(pid);
        UserInfo storage user = userInfo[pid][msg.sender];
        int256 accumulatedSfex = int256(user.amount.mul(pool.accSfexPerShare) / ACC_SFEX_PRECISION);
        uint256 _pendingSfex = accumulatedSfex.sub(user.rewardDebt).toUInt256();

        // Effects
        user.rewardDebt = accumulatedSfex;
        user.lastClaimTime = block.timestamp.to64();

        // Interactions
        if (_pendingSfex != 0) {
            _paySfexReward(_pendingSfex, to);
        }

        ISfexRewarder _rewarder = rewarder[pid];
        if (address(_rewarder) != address(0)) {
            _rewarder.onSfexReward( pid, msg.sender, to, _pendingSfex, user.amount);
        }

        emit Harvest(msg.sender, pid, _pendingSfex);
    }

    /// @notice Withdraw LP tokens from MC and harvest proceeds for transaction sender to `to`.
    /// @param pid The index of the pool. See `poolInfo`.
    /// @param amount LP token amount to withdraw.
    /// @param to Receiver of the LP tokens and SFEX rewards.
    function withdrawAndHarvest(uint256 pid, uint256 amount, address to) public {
        PoolInfo memory pool = updatePool(pid);
        UserInfo storage user = userInfo[pid][msg.sender];

        require((block.timestamp.to64() - user.lastClaimTime) >= pool.lockTime, "lock period not ended");

        int256 accumulatedSfex = int256(user.amount.mul(pool.accSfexPerShare) / ACC_SFEX_PRECISION);
        uint256 _pendingSfex = accumulatedSfex.sub(user.rewardDebt).toUInt256();

        // Effects
        user.rewardDebt = accumulatedSfex.sub(int256(amount.mul(pool.accSfexPerShare) / ACC_SFEX_PRECISION));
        user.amount = user.amount.sub(amount);
        user.lastClaimTime = block.timestamp.to64();

        // Interactions
        _paySfexReward(_pendingSfex, to);

        ISfexRewarder _rewarder = rewarder[pid];
        if (address(_rewarder) != address(0)) {
            _rewarder.onSfexReward(pid, msg.sender, to, _pendingSfex, user.amount);
        }

        _withdrawLpToken(pid, amount, to);

        emit Withdraw(msg.sender, pid, amount, to);
        emit Harvest(msg.sender, pid, _pendingSfex);
    }

    /// @notice Withdraw without caring about rewards. EMERGENCY ONLY.
    /// @param pid The index of the pool. See `poolInfo`.
    /// @param to Receiver of the LP tokens.
    function emergencyWithdraw(uint256 pid, address to) public {
        UserInfo storage user = userInfo[pid][msg.sender];
        uint256 amount = user.amount;
        user.amount = 0;
        user.rewardDebt = 0;

        ISfexRewarder _rewarder = rewarder[pid];
        if (address(_rewarder) != address(0)) {
            _rewarder.onSfexReward(pid, msg.sender, to, 0, 0);
        }

        // calculate amount to pay first so that fee is always taken even on
        // tiny amounts
        uint256 amountMulti = uint256(100).sub(feePercent);
        uint256 amountRemaining = amount.mul(amountMulti) / 100;
        uint256 fee = amount.sub(amountRemaining);

        // Note: transfer can fail or succeed if `amount` is zero.
        _withdrawLpToken(pid, amountRemaining, to);
        _withdrawLpToken(pid, fee, feeCollector);
        emit EmergencyWithdraw(msg.sender, pid, amount, to);
    }

    /// @notice Update fee collector address by the previous fee collector
    function setFeeCollector(address _feeCollector) public {
        require(msg.sender == feeCollector, "you arent the current fee collector");
        feeCollector = _feeCollector;
    }

    /// @notice Update fee percent
    function setFeePercent(uint256 _feePercent) public {
        require(msg.sender == feeCollector, "you arent the current fee collector");
        require(_feePercent <= 100, "fee is above 100");
        feePercent = _feePercent;
    }
}