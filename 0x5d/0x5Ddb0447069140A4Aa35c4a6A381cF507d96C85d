// File: @openzeppelin/contracts/utils/Context.sol

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: @openzeppelin/contracts/utils/math/SafeMath.sol


// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)

pragma solidity ^0.8.0;

// CAUTION
// This version of SafeMath should only be used with Solidity 0.8 or later,
// because it relies on the compiler's built in overflow checks.

/**
 * @dev Wrappers over Solidity's arithmetic operations.
 *
 * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler
 * now has built in overflow checking.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
            // benefit is lost if 'b' is also tested.
            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator.
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

// File: contracts/IERC20.sol



pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

// File: contracts/LArrayRemoveElement.sol



pragma solidity ^0.8.0;

library Array {
    function removeElement(address[] storage _array, address _element) public {
        for (uint256 i; i<_array.length; i++) {
            if (_array[i] == _element) {
                _array[i] = _array[_array.length - 1];
                _array.pop();
                break;
            }
        }
    }
}

// File: contracts/FageEscrow.sol


pragma solidity ^0.8.0;




contract FageEscrow is Ownable {
    using SafeMath for uint256;
    using Array for address[];
    bool private WITHDRAW_ALLOWED = true;
    bool private CONTRACT_ALLOWED = true;
    mapping (address => uint256) _distributions;
    address[] private _addresses;
    uint256 private DISTRIBUTION_BP = 10000;//1% = 100
    IERC20 private TOKEN;

    mapping (address => Authorization[]) authorizations;

    event ActionAuthorized(address indexed account, uint256 namespace, uint256 actionType, bytes32 data);

    struct Authorization{
        address _address;
        uint256 _namespace;
        uint256 _actionType;
        bytes32 _data;
    }
    event WithdrawalChanged(uint256 _action, address indexed _actor);
    event CoinsSent(address indexed _to, uint256 _amount, address indexed _actor);
    event TokensSent(address indexed _token, address indexed _to, uint256 _amount, address _actor);
    event WithdrawalRequested(address indexed _by, uint256 indexed _type, uint256 _amount);
    event Deposited(address indexed _by, uint256 _amount);
    event TokensDeposited(address indexed _by, uint256 _amount, address indexed _token);
    event TokenChanged(address indexed _before, address indexed _after);
    event DistributionChanged(address indexed _address, uint256 indexed _percentage);

    constructor (address _token) payable{
        TOKEN = IERC20(_token);
        emit TokenChanged(address(0), _token);
        setDistribution(0x8Ba092433957c1F12a28EAFbb6370BFfc565976d, 800);//8%
        setDistribution(0x8FeFb9CDc5BA3f2eE288A5be76FE53253431544C, 1200);//12%
        setDistribution(0x6A64E9cf694e15B1eC86374DC7Fc812a5BF3D16F, 500);//5%
        setDistribution(0x4DC6BE61eeFBb24AD8c7618054543bc814301FfC, 200);//2%
        setDistribution(0xeB86429fAA7F330A200883AD92c7b7c9224754E3, 300);//3%

        setDistribution(0x7e21127c9025167E624BAf58c7856A4F3f79315d, 700);//7%
        setDistribution(0xfF0B94394335c887A0D48a5C97D9368ec74F49Fc, 400);//4%
        setDistribution(0xd2c688Eb38eB4C9B74277437Fb647E0ed09Dd43a, 600);//6%
        setDistribution(0x2724138F5d841ed71414f961c8327fD90f6FeF3a, 900);//9%
        setDistribution(0xaAf4C2b5f5a197c323A4f3348657f7880491140C, 1100);//11%
        setDistribution(0x71F988a5145961d0e31C21eeA1d5D269D25555dD, 1300);//13%
        setDistribution(0x808B8907A02922D583916EeA9E82640eA494d4a3, 1000);//10%
        setDistribution(0xeB45b9b7314025aaa9a8C9e30C2e405775A22686, 700);//7%
        setDistribution(0x833aD97b4b77cF184254A8d76C5D572C95263907, 300);//3%
    }

    function getDistributionAddresses() external view returns (address[] memory){
        return _addresses;
    }

    function getDistributionPercentages() external view returns (uint256[] memory){
        uint256[] memory percentages = new uint256[](_addresses.length);

        for(uint256 i = 0; i<_addresses.length;i++){
            percentages[i] = _distributions[_addresses[i]];
        }

        return percentages;
    }

    function findElementInArray(address element, address[] memory arr) public pure returns(int) {
        bytes32 encodedElement = keccak256(abi.encode(element));
        int length = int(arr.length);
        for (int i = 0 ; i < length; i++) {
            if (encodedElement == keccak256(abi.encode(arr[uint256(i)]))) {
                return i;
            }
        }
        return -1;
    }

    function setDistribution(address _addr, uint256 _percentage) public onlyOwner{
        require(_addr != address(0), "FageEscrow: Address is a 0 address");
        require(_percentage > 0, "FageEscrow: Percentage has to be greater than 0");

        int index = findElementInArray(_addr, _addresses);
        require(index < 0 ,"FageEscrow: Distribution for this address already exists");

        _distributions[_addr] = _percentage;
        _addresses.push(_addr);
        emit DistributionChanged(_addr, _percentage);
    }

    function removeDistribution(address _addr) external onlyOwner{
        delete _distributions[_addr];
        _addresses.removeElement(_addr);
        emit DistributionChanged(_addr, 0);
    }

    function disableWithdrawal() external onlyOwner{
        WITHDRAW_ALLOWED = false;
        emit WithdrawalChanged(0, _msgSender());
    }

    function enableWithdrawal() external onlyOwner{
        WITHDRAW_ALLOWED = true;
        emit WithdrawalChanged(1, _msgSender());
    }


    function getWithdrawal() external view returns (bool){
        return WITHDRAW_ALLOWED;
    }

    function setDistributionBP(uint256 _bp) external onlyOwner{
        DISTRIBUTION_BP = _bp;
    }

    function getDistributionBP() external view returns (uint256){
        return DISTRIBUTION_BP;
    }

    function setToken(address _token) external onlyOwner{
        address old = address(TOKEN);
        TOKEN = IERC20(_token);
        emit TokenChanged(old, _token);
    }

    function getTokenAddr() external view returns (address){
        return address(TOKEN);
    }

    function withdrawTokens(uint256 _amount, address _token) external onlyOwner(){
        IERC20 tokenContract = IERC20(_token);
        tokenContract.transfer(owner(), _amount);
    }

    function clean(uint256 _amount) external onlyOwner(){
        require(address(this).balance > _amount, "Invalid digits");

        payable(owner()).transfer(_amount);
    }

    function deposit() external payable{
        emit Deposited(_msgSender(), msg.value);
    }

    function depositToken(uint256 _amount) external payable{
        require(TOKEN.allowance(_msgSender(), address(this)) >= _amount,"FageEscrow: You need to allow transferring token");
        TOKEN.transferFrom(_msgSender(), address(this), _amount);
        //distribute
        for (uint256 i = 0; i < _addresses.length; i++) {
            uint256 _share = _amount.mul(_distributions[_addresses[i]]).div(DISTRIBUTION_BP);
            require(TOKEN.transfer(_addresses[i], _share));
        }

        emit TokensDeposited(_msgSender(), _amount, address(TOKEN));
    }

    function sendCoin(address payable _to, uint256 _amount) external onlyOwner(){
        require(WITHDRAW_ALLOWED, "FageEscrow: Withdrawal is disabled for now");

        require(address(this).balance >= _amount, "FageEscrow: invalid digits");

        _to.transfer(_amount);

        emit CoinsSent(_to, _amount, _msgSender());
    }

    function sendToken(address _token, address payable _to, uint256 _amount) external onlyOwner(){
        require(WITHDRAW_ALLOWED, "FageEscrow: Withdrawal is disabled for now");

        IERC20 tokenContract = IERC20(_token);
        tokenContract.transfer(_to, _amount);

        emit TokensSent(_token, _to, _amount, _msgSender());
    }

    function authorizeAction(uint256 _namespace, uint256 _actionType, bytes32 _data) external {
        authorizations[_msgSender()].push(Authorization(_msgSender(), _namespace, _actionType, _data));
        emit ActionAuthorized(_msgSender(), _namespace, _actionType, _data);
    }

    function getAuthorizations(address _of) public view returns(Authorization[] memory) {
        return authorizations[_of];
    }

}