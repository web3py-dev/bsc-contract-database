// SPDX-License-Identifier: MIT

// File: @openzeppelin/contracts/utils/Context.sol


// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)

pragma solidity ^0.8.20;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)

pragma solidity ^0.8.20;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * The initial owner is set to the address provided by the deployer. This can
 * later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    /**
     * @dev The caller account is not authorized to perform an operation.
     */
    error OwnableUnauthorizedAccount(address account);

    /**
     * @dev The owner is not a valid owner account. (eg. `address(0)`)
     */
    error OwnableInvalidOwner(address owner);

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.
     */
    constructor(address initialOwner) {
        if (initialOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(initialOwner);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        if (owner() != _msgSender()) {
            revert OwnableUnauthorizedAccount(_msgSender());
        }
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        if (newOwner == address(0)) {
            revert OwnableInvalidOwner(address(0));
        }
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: @openzeppelin/contracts/security/ReentrancyGuard.sol


// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        _nonReentrantBefore();
        _;
        _nonReentrantAfter();
    }

    function _nonReentrantBefore() private {
        // On the first call to nonReentrant, _status will be _NOT_ENTERED
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;
    }

    function _nonReentrantAfter() private {
        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
     * `nonReentrant` function in the call stack.
     */
    function _reentrancyGuardEntered() internal view returns (bool) {
        return _status == _ENTERED;
    }
}

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol


// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the value of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the value of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves a `value` amount of tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 value) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the
     * caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 value) external returns (bool);

    /**
     * @dev Moves a `value` amount of tokens from `from` to `to` using the
     * allowance mechanism. `value` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}

// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol


// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)

pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 *
 * ==== Security Considerations
 *
 * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature
 * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be
 * considered as an intention to spend the allowance in any specific way. The second is that because permits have
 * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should
 * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be
 * generally recommended is:
 *
 * ```solidity
 * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {
 *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}
 *     doThing(..., value);
 * }
 *
 * function doThing(..., uint256 value) public {
 *     token.safeTransferFrom(msg.sender, address(this), value);
 *     ...
 * }
 * ```
 *
 * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of
 * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also
 * {SafeERC20-safeTransferFrom}).
 *
 * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so
 * contracts should have entry points that don't rely on permit.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     *
     * CAUTION: See Security Considerations above.
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}

// File: @openzeppelin/contracts/utils/Address.sol


// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)

pragma solidity ^0.8.20;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev The ETH balance of the account is not enough to perform the operation.
     */
    error AddressInsufficientBalance(address account);

    /**
     * @dev There's no code at `target` (it is not a contract).
     */
    error AddressEmptyCode(address target);

    /**
     * @dev A call to an address target failed. The target may have reverted.
     */
    error FailedInnerCall();

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        if (address(this).balance < amount) {
            revert AddressInsufficientBalance(address(this));
        }

        (bool success, ) = recipient.call{value: amount}("");
        if (!success) {
            revert FailedInnerCall();
        }
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason or custom error, it is bubbled
     * up by this function (like regular Solidity function calls). However, if
     * the call reverted with no returned reason, this function reverts with a
     * {FailedInnerCall} error.
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     */
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        if (address(this).balance < value) {
            revert AddressInsufficientBalance(address(this));
        }
        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResultFromTarget(target, success, returndata);
    }

    /**
     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target
     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an
     * unsuccessful call.
     */
    function verifyCallResultFromTarget(
        address target,
        bool success,
        bytes memory returndata
    ) internal view returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            // only check if target is a contract if the call was successful and the return data is empty
            // otherwise we already know that it was a contract
            if (returndata.length == 0 && target.code.length == 0) {
                revert AddressEmptyCode(target);
            }
            return returndata;
        }
    }

    /**
     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the
     * revert reason or with a default {FailedInnerCall} error.
     */
    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {
        if (!success) {
            _revert(returndata);
        } else {
            return returndata;
        }
    }

    /**
     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.
     */
    function _revert(bytes memory returndata) private pure {
        // Look for revert reason and bubble it up if present
        if (returndata.length > 0) {
            // The easiest way to bubble the revert reason is using memory via assembly
            /// @solidity memory-safe-assembly
            assembly {
                let returndata_size := mload(returndata)
                revert(add(32, returndata), returndata_size)
            }
        } else {
            revert FailedInnerCall();
        }
    }
}

// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol


// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.20;




/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    /**
     * @dev An operation with an ERC20 token failed.
     */
    error SafeERC20FailedOperation(address token);

    /**
     * @dev Indicates a failed `decreaseAllowance` request.
     */
    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);

    /**
     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));
    }

    /**
     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the
     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.
     */
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));
    }

    /**
     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful.
     */
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 oldAllowance = token.allowance(address(this), spender);
        forceApprove(token, spender, oldAllowance + value);
    }

    /**
     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no
     * value, non-reverting calls are assumed to be successful.
     */
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {
        unchecked {
            uint256 currentAllowance = token.allowance(address(this), spender);
            if (currentAllowance < requestedDecrease) {
                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);
            }
            forceApprove(token, spender, currentAllowance - requestedDecrease);
        }
    }

    /**
     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,
     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval
     * to be set to zero before setting it to a non-zero value, such as USDT.
     */
    function forceApprove(IERC20 token, address spender, uint256 value) internal {
        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));

        if (!_callOptionalReturnBool(token, approvalCall)) {
            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));
            _callOptionalReturn(token, approvalCall);
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data);
        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {
            revert SafeERC20FailedOperation(address(token));
        }
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     *
     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.
     */
    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false
        // and not revert is the subcall reverts.

        (bool success, bytes memory returndata) = address(token).call(data);
        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;
    }
}

// File: @chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol


pragma solidity ^0.8.0;

interface AggregatorV3Interface {
  function decimals() external view returns (uint8);

  function description() external view returns (string memory);

  function version() external view returns (uint256);

  function getRoundData(
    uint80 _roundId
  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);

  function latestRoundData()
    external
    view
    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);
}

// File: @openzeppelin/contracts/security/Pausable.sol


// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        _requireNotPaused();
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        _requirePaused();
        _;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Throws if the contract is paused.
     */
    function _requireNotPaused() internal view virtual {
        require(!paused(), "Pausable: paused");
    }

    /**
     * @dev Throws if the contract is not paused.
     */
    function _requirePaused() internal view virtual {
        require(paused(), "Pausable: not paused");
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}

// File: contracts/TokenSale.sol


// Compatible with OpenZeppelin Contracts ^5.0.0

pragma solidity ^0.8.26;







contract GoaTokenSale is Ownable, ReentrancyGuard, Pausable {
    using SafeERC20 for IERC20;

    IERC20 public token;
    address public presaleWallet;
    address public communityRewardsWallet;
    uint256 public totalPresaleAmount;
    uint256 public totalTokensSold;
    bool public saleActive;
    uint256 public saleEndTime;
    uint256 public vestingStartTime;

    // Chainlink Price Feeds for BNB, BUSD, USDT, CAKE, XRP, ADA, DOT and USDC
    AggregatorV3Interface internal priceFeedBNB;
    AggregatorV3Interface internal priceFeedBUSD;
    AggregatorV3Interface internal priceFeedUSDT;
    AggregatorV3Interface internal priceFeedUSDC;
    AggregatorV3Interface internal priceFeedCAKE;
    AggregatorV3Interface internal priceFeedXRP;
    AggregatorV3Interface internal priceFeedADA;
    AggregatorV3Interface internal priceFeedDOT;

    struct Stage {
        uint256 price; // Price in USD for each token
        uint256 tokensAvailable; // Number of tokens available in this stage
    }

    struct VestingSchedule {
        uint256 initialClaim; // 25%
        uint256 firstRelease; // 18.75%
        uint256 secondRelease; // 18.75%
        uint256 thirdRelease; // 18.75%
        uint256 finalRelease; // 18.75%
        uint256 releaseInterval; // 2 months
    }

    VestingSchedule private vestingSchedule;
    mapping(address => uint256) public tokenBalances;
    mapping(address => uint256) public claimedTokens;
    mapping(address => uint256) public tokensPurchasedInCurrentStage;

    mapping(uint256 => Stage) public stages; // Stage mapping (1-8)
    uint256 public currentStage;
    uint256 public tokensPerStage = 1_687_500_000 * 1e18; // Amount of tokens per stage
    uint256 public maxTokenAmount = 13_500_000_000 * 1e18; // Max token amount
    uint256 public maxTokensPerWallet = 300_000_000 * 1e18; // 300 million tokens limit per wallet per stage
    // Mapping of accepted tokens and their price feeds
    mapping(address => AggregatorV3Interface) public tokenPriceFeeds;

    mapping(address => bool) public supportedTokens;
    event TokensPurchased(
        address indexed buyer,
        uint256 amount,
        address paymentToken
    );
    event TokensClaimed(address indexed claimer, uint256 amount);
    event SaleStarted(uint256 startTime);
    event SaleEnded(uint256 endTime);
    event TokensTransferredToWallet(address indexed wallet, uint256 amount);
    event PrivateSaleTokensAdded(address indexed recipient, uint256 amount);
    event AirdropTokensAdded(address indexed recipient, uint256 amount);

    /**

        * @dev Allows the owner to add or remove supported tokens.
        * @param _token The address of the BEP20 token.
        * @param priceFeed The address of the Chainlink price feed for the token.
        * @param supported Whether the token is supported or not.
        */
    function setSupportedToken(
        address _token,
        address priceFeed,
        bool supported
    ) internal {
        supportedTokens[_token] = supported;
        if (supported) {
            tokenPriceFeeds[_token] = AggregatorV3Interface(priceFeed); // Set price feed for the token
        } else {
            delete tokenPriceFeeds[_token]; // Remove the token's price feed if not supported
        }
    }

    function _setSupportedTokens() internal {
        // Add BNB as the native token
        supportedTokens[address(0)] = true;

        // Add BEP20 tokens with their price feeds
        setSupportedToken(
            0x55d398326f99059fF775485246999027B3197955,
            address(priceFeedUSDT),
            true
        ); // USDT
        setSupportedToken(
            0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56,
            address(priceFeedBUSD),
            true
        ); // BUSD
        setSupportedToken(
            0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d,
            address(priceFeedUSDC),
            true
        ); // USDC
        setSupportedToken(
            0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82,
            address(priceFeedCAKE),
            true
        ); // CAKE
        setSupportedToken(
            0x1D2f0Da169CEb9FFFa3c6CbEA459a4f50EaAA2D8,
            address(priceFeedXRP),
            true
        ); // XRP
        setSupportedToken(
            0x3EE2200Efb3400fAbB9AacF31297cBdD1d435D47,
            address(priceFeedADA),
            true
        ); // ADA
        setSupportedToken(
            0x7083609fCE4d1d8Dc0C979AAb8c869Ea2C873402,
            address(priceFeedDOT),
            true
        ); // DOT
    }

    constructor(
        address _tokenAddress,
        address _presaleWallet,
        uint256 _totalPresaleAmount,
        address _communityRewardsWallet
    ) Ownable(msg.sender) {
        token = IERC20(_tokenAddress);
        presaleWallet = _presaleWallet;
        totalPresaleAmount = _totalPresaleAmount;
        communityRewardsWallet = _communityRewardsWallet;
        currentStage = 1;

        // Initialize Chainlink price feeds
        priceFeedBNB = AggregatorV3Interface(
            0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE
        ); // BNB/USD on BSC

        priceFeedBUSD = AggregatorV3Interface(
            0xB97Ad0E74fa7d920791E90258A6E2085088b4320
        ); // BUSD/USD on BSC

        priceFeedUSDT = AggregatorV3Interface(
            0xB97Ad0E74fa7d920791E90258A6E2085088b4320
        ); // USDT/USD on BSC

        priceFeedUSDC = AggregatorV3Interface(
            0x51597f405303C4377E36123cBc172b13269EA163
        ); // USDC/USD on BSC

        priceFeedCAKE = AggregatorV3Interface(
            0xB6064eD41d4f67e353768aA239cA86f4F73665a1
        ); // CAKE/USD on BSC

        priceFeedXRP = AggregatorV3Interface(
            0x93A67D414896A280bF8FFB3b389fE3686E014fda
        ); // XRP/USD on BSC

        priceFeedADA = AggregatorV3Interface(
            0xa767f745331D267c7751297D982b050c93985627
        ); // ADA/USD on BSC

        priceFeedDOT = AggregatorV3Interface(
            0xC333eb0086309a16aa7c8308DfD32c8BBA0a2592
        ); // DOT/USD on BSC

        _setSupportedTokens();

        // Set stages with prices in USD
        stages[1] = Stage({price: 1e14, tokensAvailable: tokensPerStage}); // Price: $0.0001
        stages[2] = Stage({price: 22e13, tokensAvailable: tokensPerStage}); // Price: $0.00022
        stages[3] = Stage({price: 34e13, tokensAvailable: tokensPerStage}); // Price: $0.00034
        stages[4] = Stage({price: 46e13, tokensAvailable: tokensPerStage}); // Price: $0.00046
        stages[5] = Stage({price: 58e13, tokensAvailable: tokensPerStage}); // Price: $0.00058
        stages[6] = Stage({price: 70e13, tokensAvailable: tokensPerStage}); // Price: $0.0007
        stages[7] = Stage({price: 82e13, tokensAvailable: tokensPerStage}); // Price: $0.00082
        stages[8] = Stage({price: 94e13, tokensAvailable: tokensPerStage}); // Price: $0.00094

        // Initialize vesting schedule
        vestingSchedule = VestingSchedule({
            initialClaim: 2500, // 25% in basis points (1% = 100 basis points)
            firstRelease: 1875, // 18.75%
            secondRelease: 1875,
            thirdRelease: 1875,
            finalRelease: 1875,
            releaseInterval: 2 * 30 days // 2 months
        });
    }

    modifier onlyAuthorizedWallets() {
        require(
            msg.sender == presaleWallet || msg.sender == communityRewardsWallet,
            "Not authorized"
        );
        _;
    }
    /**
     * @dev Modifier to ensure the sale is active.
     */
    modifier saleIsActive() {
        require(saleActive, "Token sale is not active");
        _;
    }

    /**
     * @dev Modifier to ensure the sale has ended.
     */
    modifier saleHasEnded() {
        require(saleEndTime > 0, "Token sale has not ended");
        _;
    }

    function updateCurrentStage() internal {
        // Calculate the stage based on the number of tokens sold
        uint256 newStage = (totalTokensSold / tokensPerStage) + 1;

        // Ensure the stage does not exceed the maximum number of stages
        if (newStage > 8) {
            newStage = 8;
        }

        // Check if the stage has changed
        if (newStage != currentStage) {
            // Update the current stage
            currentStage = newStage;

            // Reset the per-wallet purchase limit for the new stage
            tokensPurchasedInCurrentStage[msg.sender] = 0;
        }
    }

    /**
     * @dev Get the latest price of a token from Chainlink.
     * @param priceFeed The Chainlink price feed to use.
     * @return The latest price in 18 decimal format.
     */
    function getLatestPrice(AggregatorV3Interface priceFeed)
        public
        view
        returns (uint256)
    {
        (
            ,
            // roundId (ignored)
            int256 price, // answer (the price) // startedAt (ignored) // updatedAt (ignored) // answeredInRound (ignored)
            ,
            ,

        ) = priceFeed.latestRoundData();

        require(price > 0, "Invalid price");

        // Chainlink price feeds return prices with varying decimal places. Convert them to 18 decimals.
        uint8 decimals = priceFeed.decimals();
        return uint256(price) * (10**(18 - decimals)); // Adjust the price to 18 decimals
    }

    /**
     * @dev Get the price of 1 GOA in the given payment token for the current stage.
     */
    function getGOAPriceInPaymentToken(address paymentToken)
        public
        view
        returns (uint256)
    {
        uint256 goaPriceInUSD = stages[currentStage].price; // GOA price in USD for the current stage

        // If payment is in BNB (native token)
        if (paymentToken == address(0)) {
            uint256 tokenPriceInUSD = getLatestPrice(priceFeedBNB); // BNB/USD price from Chainlink

            return (goaPriceInUSD * 1e18) / tokenPriceInUSD; // Return price in BNB, adjusted to 18 decimals
        }
        // For supported tokens like BUSD, USDT, etc.
        else if (supportedTokens[paymentToken]) {
            AggregatorV3Interface priceFeed = tokenPriceFeeds[paymentToken];
            require(
                address(priceFeed) != address(0),
                "Price feed not found for the token"
            );

            // Retrieve the latest price of the payment token
            uint256 tokenPriceInUSD = getLatestPrice(priceFeed);

            return (goaPriceInUSD * 1e18) / tokenPriceInUSD;
        }
        // If the payment token is not supported, revert
        else {
            revert("Unsupported payment token");
        }
    }

    /**
     * @dev Allows the owner to transfer tokens from the user's balance to Staking wallet or contract.
     * @param wallet The address of the user receiving tokens.
     * @param amount The amount of tokens to transfer.
     */
    function transferVestedTokens(address wallet, uint256 amount)
        external
        onlyOwner
    {
        require(wallet != address(0), "Invalid wallet address");
        require(amount > 0, "Amount must be greater than 0");

        // Calculate available balance: total token balance minus already claimed tokens
        uint256 availableBalance = tokenBalances[wallet] -
            claimedTokens[wallet];
        require(
            availableBalance >= amount,
            "Insufficient available balance in vesting"
        );

        // Deduct the amount from the user's vesting balance
        tokenBalances[wallet] -= amount;

        // Transfer actual tokens to the user's wallet
        token.safeTransfer(wallet, amount);

        // Emit event for the transfer
        emit TokensTransferredToWallet(wallet, amount);
    }

    /**
     * @dev Sell tokens and accept payment in supported tokens (BNB, BUSD, USDT, USDC...).
     * @param paymentToken The address of the payment token (or address(0) for BNB).
     * @param paymentTokenAmount amount of token only for buy using token
     */

    // Function to handle token purchases based on BNB or BEP20 payments
    function buyTokens(address paymentToken, uint256 paymentTokenAmount)
        external
        payable
        saleIsActive
        nonReentrant
    {
        require(msg.sender != address(0), "Invalid buyer address");
        require(paymentTokenAmount > 0, "Invalid token amount");

        uint256 tokensToPurchase;
        updateCurrentStage();

        if (paymentToken == address(0)) {
            // BNB payment
            uint256 bnbPriceInUSD = getLatestPrice(priceFeedBNB);
            uint256 goaPriceInUSD = stages[currentStage].price;
            tokensToPurchase = (msg.value * bnbPriceInUSD) / goaPriceInUSD;

            require(tokensToPurchase > 0, "Invalid BNB amount sent");

            // Ensure the purchase does not exceed the per-wallet limit for the current stage
            uint256 newTotalForWallet = tokensPurchasedInCurrentStage[
                msg.sender
            ] + tokensToPurchase;

            require(
                newTotalForWallet <= maxTokensPerWallet,
                "Exceeds per-wallet token limit for this stage"
            );
            require(
                tokensToPurchase <= stages[currentStage].tokensAvailable,
                "Exceeds available tokens for this stage"
            );

            tokensPurchasedInCurrentStage[msg.sender] = newTotalForWallet;

            // Deduct tokens from the current stage
            stages[currentStage].tokensAvailable -= tokensToPurchase;

            // Update token balances and total tokens sold
            tokenBalances[msg.sender] += tokensToPurchase;
            totalTokensSold += tokensToPurchase;

            // Transfer BNB to presale wallet
            payable(presaleWallet).transfer(msg.value);
        } else {
            // BEP20 payment
            require(supportedTokens[paymentToken], "Unsupported payment token");

            uint256 goaPriceInPaymentToken = getGOAPriceInPaymentToken(
                paymentToken
            );

            // Check if the buyer has given enough allowance to the contract
            uint256 allowance = IERC20(paymentToken).allowance(
                msg.sender,
                address(this)
            );
            require(
                allowance >= paymentTokenAmount,
                "Insufficient token allowance"
            );

            tokensToPurchase =
                (paymentTokenAmount * 1e18) /
                goaPriceInPaymentToken;

            require(tokensToPurchase > 0, "Invalid token amount");
            uint256 newTotalForWallet = tokensPurchasedInCurrentStage[
                msg.sender
            ] + tokensToPurchase;
            require(
                newTotalForWallet <= maxTokensPerWallet,
                "Exceeds per-wallet token limit for this stage"
            );
            require(
                tokensToPurchase <= stages[currentStage].tokensAvailable,
                "Exceeds available tokens for this stage"
            );
            // Update the tokens purchased by the wallet in the current stage
            tokensPurchasedInCurrentStage[msg.sender] = newTotalForWallet;

            // Deduct tokens from the current stage
            stages[currentStage].tokensAvailable -= tokensToPurchase;

            // Update token balances and total tokens sold
            tokenBalances[msg.sender] += tokensToPurchase;
            totalTokensSold += tokensToPurchase;

            // Transfer payment token from the buyer to the presale wallet
            IERC20(paymentToken).safeTransferFrom(
                msg.sender,
                presaleWallet,
                paymentTokenAmount
            );
        }

        emit TokensPurchased(msg.sender, tokensToPurchase, paymentToken);

        // End the sale if the total presale amount has been sold
        if (totalTokensSold >= totalPresaleAmount) {
            endSale();
        }
    }

    /**
     * @dev Starts the token sale.
     */
    function startSale() external onlyOwner {
        require(!saleActive, "Sale is already active");
        saleActive = true;
        emit SaleStarted(block.timestamp);
    }

    /**
     * @dev Ends the token sale and starts the vesting period.
     */
    function endSale() internal {
        saleActive = false;
        saleEndTime = block.timestamp;
        vestingStartTime = saleEndTime;
        emit SaleEnded(saleEndTime);
    }

    /**
     * @dev Allows the owner to manually end the sale.
     */
    function manualEndSale() external onlyOwner {
        require(saleActive, "Sale is not active");
        endSale();
    }

    /**
     * @dev Claims tokens according to the vesting schedule.
     */
    function claimTokens() external saleHasEnded nonReentrant {
        uint256 totalBalance = tokenBalances[msg.sender];
        require(totalBalance > 0, "No tokens to claim");

        uint256 claimableAmount = getClaimableAmount(msg.sender);
        require(claimableAmount > 0, "No tokens available for claim");
        claimedTokens[msg.sender] += claimableAmount;
        token.safeTransfer(msg.sender, claimableAmount);

        emit TokensClaimed(msg.sender, claimableAmount);
    }

    /**
     * @dev Returns comprehensive token information for a specific user.
     * @param user The address of the user to query.
     * @return balance The total balance of tokens purchased by the user.
     * @return claimed The amount of tokens already claimed by the user.
     * @return claimable The amount of tokens currently available for the user to claim.
     */
    function getUserTokenInfo(address user)
        external
        view
        returns (
            uint256 balance,
            uint256 claimed,
            uint256 claimable
        )
    {
        balance = tokenBalances[user];
        claimed = claimedTokens[user];

        if (saleEndTime > 0) {
            // Check if sale has ended
            claimable = getClaimableAmount(user);
        } else {
            claimable = 0; // If sale hasn't ended, no tokens are claimable yet
        }

        return (balance, claimed, claimable);
    }

    /**
     * @dev Calculates the claimable amount based on the vesting schedule.
     * @param claimer The address of the claimer.
     * @return The claimable amount.
     */
    function getClaimableAmount(address claimer) public view returns (uint256) {
        // Ensure vesting has started
        require(vestingStartTime > 0, "Vesting has not started");
        require(
            block.timestamp >= vestingStartTime,
            "Vesting period has not started yet"
        );
        if (saleActive) {
            return 0;
        }

        // Get the user's total token balance and already claimed tokens
        uint256 totalBalance = tokenBalances[claimer];
        uint256 totalClaimed = claimedTokens[claimer];

        // Ensure the user has tokens to claim
        if (totalBalance == 0) {
            return 0;
        }
        // Calculate the elapsed time since the vesting started
        uint256 elapsedTime = block.timestamp - vestingStartTime;

        // Initialize claimable percentage (in basis points)
        uint256 claimablePercentage = 0;

        // Calculate the claimable percentage based on the vesting schedule
        if (elapsedTime >= vestingSchedule.releaseInterval * 4) {
            claimablePercentage = 10000; // 100%
        } else if (elapsedTime >= vestingSchedule.releaseInterval * 3) {
            claimablePercentage =
                vestingSchedule.initialClaim +
                vestingSchedule.firstRelease +
                vestingSchedule.secondRelease +
                vestingSchedule.thirdRelease;
        } else if (elapsedTime >= vestingSchedule.releaseInterval * 2) {
            claimablePercentage =
                vestingSchedule.initialClaim +
                vestingSchedule.firstRelease +
                vestingSchedule.secondRelease;
        } else if (elapsedTime >= vestingSchedule.releaseInterval) {
            claimablePercentage =
                vestingSchedule.initialClaim +
                vestingSchedule.firstRelease;
        } else {
            claimablePercentage = vestingSchedule.initialClaim;
        }

        // Calculate the total claimable amount based on the percentage
        uint256 totalClaimable = (totalBalance * claimablePercentage) / 10000;

        // Ensure claimable tokens are more than already claimed tokens
        if (totalClaimable > totalClaimed) {
            return totalClaimable - totalClaimed;
        } else {
            return 0; // No tokens to claim
        }
    }

    function getCurrentStageInfo()
        public
        view
        returns (
            uint256 stageNumber,
            uint256 price,
            uint256 tokensAvailable
        )
    {
        return (
            currentStage,
            stages[currentStage].price,
            stages[currentStage].tokensAvailable
        );
    }

    function withdrawStuckTokens(address tkn) external onlyOwner nonReentrant {
        uint256 amount = IERC20(tkn).balanceOf(address(this));
        IERC20(tkn).safeTransfer(owner(), amount);
    }

    function withdrawStuckEther() external onlyOwner nonReentrant {
        uint256 amount = address(this).balance;
        payable(owner()).transfer(amount);
    }

    function pause() external onlyOwner {
        _pause();
    }

    function unpause() external onlyOwner {
        _unpause();
    }

    // Fallback function to receive BNB and allocate tokens
    receive() external payable {
        require(saleActive, "Token sale is not active");
        // Update the current stage before processing the purchase

        updateCurrentStage();
        // Calculate how many tokens the user should get for the BNB sent
        uint256 tokensToPurchase = calculateTokensForBNB(msg.value);
        require(tokensToPurchase > 0, "Invalid amount sent");
        // Ensure the purchase does not exceed the per-wallet limit for the current stage
        uint256 newTotalForWallet = tokensPurchasedInCurrentStage[msg.sender] +
            tokensToPurchase;
        require(
            newTotalForWallet <= maxTokensPerWallet,
            "Exceeds per-wallet token limit for this stage"
        );

        require(
            totalTokensSold + tokensToPurchase <= totalPresaleAmount,
            "Exceeds total presale amount"
        );
        require(
            tokensToPurchase <= stages[currentStage].tokensAvailable,
            "Exceeds available tokens for this stage"
        );
        // Update the tokens purchased by the wallet in the current stage
        tokensPurchasedInCurrentStage[msg.sender] = newTotalForWallet;
        // Allocate tokens to the sender (vesting)
        tokenBalances[msg.sender] += tokensToPurchase;
        totalTokensSold += tokensToPurchase;
        // Deduct tokens from the current stage
        stages[currentStage].tokensAvailable -= tokensToPurchase;
        // Emit the event for this purchase
        emit TokensPurchased(msg.sender, tokensToPurchase, address(0));

        // If the total presale amount is reached, end the sale
        if (totalTokensSold == totalPresaleAmount) {
            endSale();
        }
    }

    function calculateTokensForBNB(uint256 bnbAmount)
        internal
        view
        returns (uint256)
    {
        uint256 bnbPriceInUSD = getLatestPrice(priceFeedBNB); // BNB/USD price from Chainlink
        uint256 tokenPriceInUSD = stages[currentStage].price; // Current stage token price
        return (bnbAmount * bnbPriceInUSD) / tokenPriceInUSD; // Calculate tokens
    }

    function onTokenTransfer(
        address from,
        uint256 amount,
        address paymentToken
    ) external saleIsActive nonReentrant {
        require(supportedTokens[paymentToken], "Unsupported payment token");
        // Update the current stage before processing the purchase
        updateCurrentStage();

        // Calculate how many tokens the user should get for the given amount of payment token
        uint256 tokensToPurchase = calculateTokensForBEP20(
            paymentToken,
            amount
        );
        require(tokensToPurchase > 0, "Invalid token amount");
        // Ensure the purchase does not exceed the per-wallet limit for the current stage
        uint256 newTotalForWallet = tokensPurchasedInCurrentStage[from] +
            tokensToPurchase;
        require(
            newTotalForWallet <= maxTokensPerWallet,
            "Exceeds per-wallet token limit for this stage"
        );
        require(
            tokensToPurchase <= stages[currentStage].tokensAvailable,
            "Exceeds available tokens for this stage"
        );

        require(
            totalTokensSold + tokensToPurchase <= totalPresaleAmount,
            "Exceeds total presale amount"
        );
        // Update the tokens purchased by the wallet in the current stage
        tokensPurchasedInCurrentStage[from] = newTotalForWallet;

        // Transfer the payment token from the user to the contract
        IERC20(paymentToken).safeTransferFrom(from, presaleWallet, amount);

        // Allocate GOA tokens to the user (vesting)
        tokenBalances[from] += tokensToPurchase;
        totalTokensSold += tokensToPurchase;
        stages[currentStage].tokensAvailable -= tokensToPurchase;
        emit TokensPurchased(from, tokensToPurchase, paymentToken);

        if (totalTokensSold >= totalPresaleAmount) {
            endSale();
        }
    }

    function calculateTokensForBEP20(address paymentToken, uint256 tokenAmount)
        internal
        view
        returns (uint256)
    {
        uint256 tokenPriceInUSD = getLatestPrice(tokenPriceFeeds[paymentToken]);
        uint256 goaPriceInUSD = stages[currentStage].price;

        uint256 tokens = (tokenAmount * tokenPriceInUSD) / goaPriceInUSD;
        return tokens;
    }

    /**
     * @dev Allows the owner, presale wallet, or CommunityRewards wallet to add tokens directly to the vesting schedule
     * for specific addresses without affecting totalTokensSold.
     * @param recipients An array of addresses to add tokens for.
     * @param amounts An array of token amounts corresponding to each address.
     */
    function airdropTokenVesting(
        address[] calldata recipients,
        uint256[] calldata amounts
    ) external {
        require(
            msg.sender == owner() ||
                msg.sender == presaleWallet ||
                msg.sender == communityRewardsWallet,
            "Not authorized"
        );

        require(
            recipients.length == amounts.length,
            "Mismatched input lengths"
        );

        for (uint256 i = 0; i < recipients.length; i++) {
            require(recipients[i] != address(0), "Invalid address");
            require(amounts[i] > 0, "Invalid token amount");

            // Directly add tokens to the recipient's balance (vesting schedule)
            tokenBalances[recipients[i]] += amounts[i];

            // Emit an event to record this airdrop
            emit AirdropTokensAdded(recipients[i], amounts[i]);
        }
    }

    /**
     * @dev Allows the owner to add tokens directly to the vesting schedule for a specific address
     * without affecting totalTokensSold.
     * @param recipient The address to add tokens for.
     * @param amount The amount of tokens to add.
     */
    function privateSale(address recipient, uint256 amount) external onlyOwner {
        require(recipient != address(0), "Invalid recipient address");
        require(amount > 0, "Amount must be greater than 0");

        // Add the tokens directly to the recipient's vesting balance
        tokenBalances[recipient] += amount;

        // Emit an event to record this private sale
        emit PrivateSaleTokensAdded(recipient, amount);
    }
}