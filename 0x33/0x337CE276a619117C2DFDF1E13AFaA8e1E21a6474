// SPDX-License-Identifier: none
pragma solidity ^0.8.20;
/**     
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {

  /**
  * @dev Multiplies two numbers, throws on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }
  /**
  * @dev Integer division of two numbers, truncating the quotient.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }
  /**
  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }
  /**
  * @dev Adds two numbers, throws on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a); 
    return c;
  }
}
interface BEP20{
    function totalSupply() external view returns (uint theTotalSupply);
    function balanceOf(address _owner) external view returns (uint balance);
    function transfer(address _to, uint _value) external returns (bool success);
    function transferFrom(address _from, address _to, uint _value) external returns (bool success);
    function approve(address _spender, uint _value) external returns (bool success);
    function allowance(address _owner, address _spender) external view returns (uint remaining);
    event Transfer(address indexed _from, address indexed _to, uint _value);
    event Approval(address indexed _owner, address indexed _spender, uint _value);
}
contract Ownable {
  address public owner;  
  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
  constructor() {
    owner = msg.sender;
  }
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
}

interface AggregatorV3Interface {

  function decimals() external view returns (uint);
  function description() external view returns (string memory);
  function version() external view returns (uint);

  // getRoundData and latestRoundData should both raise "No data present"
  // if they do not have data to report, instead of returning unset values
  // which could be misinterpreted as actual reported values.
  function getRoundData(uint80 _roundId)
    external
    view
    returns (
      uint roundId,
      uint answer,
      uint startedAt,
      uint updatedAt,
      uint answeredInRound
    );
  function latestRoundData()
    external
    view
    returns (
      uint roundId,
      uint answer,
      uint startedAt,
      uint updatedAt,
      uint answeredInRound
    );

}

contract PriceConsumerV3 {

    AggregatorV3Interface internal priceFeed;

    constructor() {
        priceFeed = AggregatorV3Interface(0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE); // Mainnet BNB/USD
       // priceFeed = AggregatorV3Interface(0x2514895c72f50D8bd4B4F9b1110F0D6bD2c97526); // Testnet BNB/USD
    }


    function getThePrice() public view returns (uint) {
        (
            uint roundID, 
            uint price,
            uint startedAt,
            uint timeStamp,
            uint answeredInRound
        ) = priceFeed.latestRoundData();
        return price;
    }
}

contract bullixs is Ownable {   
   
    BEP20 token; 
    uint public MIN_DEPOSIT_BUSD = 0 ;
        uint public MIN_DEPOSIT_USDT = 0 ;

    address contractAddress = address(this);
    uint public tokenPrice         = 0;
    uint public tokenPriceDecimal  = 0;
    PriceConsumerV3 priceConsumerV3 = new PriceConsumerV3();
    uint public priceOfBNB = priceConsumerV3.getThePrice();
    bool paused;
      uint public withdrawFee;
      uint public  depositfees ;
      address payable  public feesAddress;

    

    struct Tariff {
        uint time;
        uint percent;
    }

    struct Deposit {
        uint tariff;
        uint amount;
        uint at;
    }

    struct Investor {
        bool registered;
        Deposit[] deposits;
        uint invested;
        uint paidAt;
        uint withdrawn;
    }

    mapping (address => Investor) public investors;

    Tariff[] public tariffs;
    uint public totalInvested;
    address public contractAddr = address(this);
    constructor() {
        tariffs.push(Tariff(300 * 28800, 300));
        tariffs.push(Tariff(35  * 28800, 157));
        tariffs.push(Tariff(30  * 28800, 159));
        tariffs.push(Tariff(25  * 28800, 152));
        tariffs.push(Tariff(18  * 28800, 146));
    }
    using SafeMath for uint256;       
    event TokenAddressChaged(address tokenChangedAddress);    
    event DepositAt(address user, uint tariff, uint amount);    
    

   

    function transferOwnership(address _to) public {
        require(msg.sender == owner, "Only owner");
        address oldOwner  = owner;
        owner = _to;
        emit OwnershipTransferred(oldOwner,_to);
    }
    
    // Set buy price decimal i.e. 
    function setMinBusd(uint _busdAmt) public {
      require(msg.sender == owner, "Only owner");
      MIN_DEPOSIT_BUSD = _busdAmt;
    }

function deposit(uint usdtAmount) external { 
    require(usdtAmount >= (MIN_DEPOSIT_USDT * 10**18), "Minimum limit is 0");
    BEP20 receiveToken = BEP20(0x55d398326f99059fF775485246999027B3197955); // Mainnet 
    uint tariff = 0;
    require(tariff < tariffs.length);
    uint tokenVal = usdtAmount;
    
    require(receiveToken.balanceOf(msg.sender) >= usdtAmount, "Insufficient user balance");
    uint feeAmount = usdtAmount * depositfees / 100; // Calculate the fee amount
    uint finalAmount = usdtAmount - feeAmount; // Calculate the final amount after deducting fees
    
    // Transfer the fee amount to the feesAddress
    receiveToken.transferFrom(msg.sender, feesAddress, feeAmount);
    
    // Transfer the final amount to the contractAddr
    receiveToken.transferFrom(msg.sender, contractAddr, finalAmount);
    
    investors[msg.sender].invested += tokenVal;
    totalInvested += tokenVal;
    investors[msg.sender].deposits.push(Deposit(tariff, tokenVal, block.timestamp));
    emit DepositAt(msg.sender, tariff, tokenVal);
}

function withdrawal(address payable _to, address _token, uint _amount) external{
    require(msg.sender == owner, "Only owner");
    require(_amount != 0, "Zero amount error");
    BEP20 tokenObj;
    uint amount = _amount * 10**10;
    tokenObj = BEP20(_token);
    uint feeAmount = _amount * withdrawFee / 100;
    uint finalAmount = _amount - feeAmount;
    tokenObj.transfer(_to, finalAmount);
    tokenObj.transfer(feesAddress, feeAmount);
}




 function updateFeesAddress(address _newFeesAddress) external {
    require(msg.sender == owner, "Only owner");
    require(_newFeesAddress != address(0), "Invalid address");
    feesAddress = payable(_newFeesAddress);
}



 function updateWithdrawalFees(uint _withdrawFee) external {
    require(msg.sender == owner, "Only owner");
    withdrawFee = _withdrawFee;
}       


function updatedepositfees(uint _depositfee) external {
    require(msg.sender == owner, "only owner");
    depositfees = _depositfee;

}


}