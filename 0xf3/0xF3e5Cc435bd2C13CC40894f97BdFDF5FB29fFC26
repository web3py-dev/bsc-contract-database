
// File: contracts/token_v2.sol
// SPDX-License-Identifier: MIT
//BSC: 0x65a5DAA88E81007F63638594a0383BE002A8600a
pragma solidity ^0.8.19;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c=a+b;
        require(c>=a,"addition overflow");
        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b<=a,"subtraction overflow");
        uint256 c=a-b;
        return c;
    }
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a==0) return 0;
        uint256 c=a*b;
        require(c/a==b,"multiplication overflow");
        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b>0,"division by zero");
        uint256 c=a/b;
        return c;
    }
}

contract BEP20 {
    using SafeMath for uint256;
    string public symbol;
    string public name;
    uint8 public decimals;
    uint256 public totalSupply;
    mapping (address=>uint256) balances;
    mapping (address=>mapping (address=>uint256)) allowed;
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    function balanceOf(address _owner) public view returns (uint256 balance) {return balances[_owner];}

    function transfer(address _to, uint256 _amount) public returns (bool success) {
        require (balances[msg.sender]>=_amount&&_amount>0);
        balances[msg.sender] = balances[msg.sender].sub(_amount);
        balances[_to] = balances[_to].add(_amount);
        if (_to==address(0)) totalSupply = totalSupply.sub(_amount);
        emit Transfer(msg.sender,_to,_amount);
        return true;
    }

    function transferFrom(address _from,address _to,uint256 _amount) public returns (bool success) {
        require (balances[_from]>=_amount&&allowed[_from][msg.sender]>=_amount&&_amount>0);
        balances[_from] = balances[_from].sub(_amount);
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);
        balances[_to]  = balances[_to].add(_amount);
        if (_to==address(0)) totalSupply = totalSupply.sub(_amount);
        emit Transfer(_from, _to, _amount);
        return true;
    }

    function approve(address _spender, uint256 _amount) public returns (bool success) {
        allowed[msg.sender][_spender]=_amount;
        emit Approval(msg.sender, _spender, _amount);
        return true;
    }

    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }
}

contract TokenV2 is Context,BEP20{
    using SafeMath for uint256;
    address public admin;
    event Burn(address indexed _user, uint256 _value);

    constructor(
        address _admin,
        string memory _symbol,
        string memory _name,
        uint8 _decimals,
        uint256 _tokens
    ) {
        admin = _admin;
        symbol = _symbol;
        name = _name;
        decimals = _decimals;
        totalSupply = _tokens*(10**_decimals);
        balances[admin] = totalSupply;
    }

   modifier onlyAdmin() {
        require(admin==_msgSender());
        _;
    }

    receive() external payable {
        revert();
    }
    fallback() external payable {
        revert();
    }

    //Admin
    function withdraw(address _token, address _user) public onlyAdmin{
        BEP20 _t = BEP20(_token);
        uint256 _amount = _t.balanceOf(address(this));
        require(_amount>0);
        _t.transfer(_user, _amount);
    }

    function burn(uint256 _amount) public  {
        require(_amount>0&&balances[_msgSender()]>=_amount);
        balances[_msgSender()] = balances[_msgSender()].sub(_amount);
        totalSupply = totalSupply.sub(_amount);
        emit Burn(_msgSender(), _amount);
    }

    function burnFrom(address _user, uint256 _amount) external {
        require (balances[_user]>=_amount&&allowed[_user][msg.sender]>=_amount&&_amount>0);
        balances[_user] = balances[_user].sub(_amount);
        allowed[_user][_msgSender()] = allowed[_user][_msgSender()].sub(_amount);
        totalSupply = totalSupply.sub(_amount);
        emit Burn(_user, _amount);
    }
}

