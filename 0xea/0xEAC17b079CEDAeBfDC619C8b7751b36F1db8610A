pragma solidity ^0.5.17;

interface IBEP20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the token decimals.
     */
    function decimals() external view returns (uint8);

    /**
     * @dev Returns the token symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the token name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the bep token owner.
     */
    function getOwner() external view returns (address);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount)
        external
        payable
        returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address _owner, address spender)
        external
        view
        returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with GSN meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
contract Context {
    // Empty internal constructor, to prevent people from mistakenly deploying
    // an instance of this contract, which should be used via inheritance.
    constructor() internal {}

    function _msgSender() internal view returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     */
    function _transferOwnership(address newOwner) internal {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);
}

interface IUniswapV2Router02 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (
            uint256 amountToken,
            uint256 amountETH,
            uint256 liquidity
        );

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    )
        external
        returns (
            uint256 amountA,
            uint256 amountB,
            uint256 liquidity
        );

    function getAmountsOut(uint256 amountIn, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);        
}

interface IUniswapV2Pair {
    function factory() external view returns (address);

    function token0() external view returns (address);

    function token1() external view returns (address);

    function getReserves()
        external
        view
        returns (
            uint112 reserve0,
            uint112 reserve1,
            uint32 blockTimestampLast
        );

    function sync() external;
}

contract Wrap is Ownable {
    function withdraw(address ct, address to) public onlyOwner {
        IBEP20(ct).transfer(to, IBEP20(ct).balanceOf(address(this)));
    }
}

contract BOBO is Context, IBEP20, Ownable {
    using SafeMath for uint256;

    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;
    uint8 private _decimals;
    string private _symbol;
    string private _name;

    address public _pairAddress;
    address public _deadAddress = 0x000000000000000000000000000000000000dEaD;

    address public routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;
    address public _dividendReceiveAddress =
        0xFA5cC9ae842D58fb7bD971C051C0a677739E932A;
    address public cfoAddress = 0x893634bA1b717712F338CE2cbe42EA2f88F5Ff6B;

    IUniswapV2Router02 public _uniswapV2Router;

    address public wethAddress;

    uint256 public _buyFeeRatio = 2;
    uint256 public _sellFeeRatio = 2;

    uint256 public _burnRatio = 1;
    uint256 public _backRatio = 1;
    uint256 public _dividendRatio = 2;

    mapping(address => address) public _parentMapping;
    mapping(address => address[]) public _binders;

    Wrap public wrap;

    bool public swapping;

    uint256 public addLpLimit = 10 * (10**18);

    string public mode;

    mapping(address => bool) private _isExcluded;
    mapping(address => uint256) public _addressBnbLimitMapping;
   

    constructor() public {
        _name = "BOBO";
        _symbol = "BOBO";
        _decimals = 18;
        _totalSupply = 10000000000 * (10**uint256(_decimals));
        _balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);

        _uniswapV2Router = IUniswapV2Router02(routerAddress);
        wethAddress = _uniswapV2Router.WETH();
        _pairAddress = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(
            address(this),
            wethAddress
        );

        wrap = new Wrap();
        IBEP20(_uniswapV2Router.WETH()).approve(routerAddress, ~uint256(0));

        _approve(address(this), routerAddress, ~uint256(0));

        _isExcluded[address(this)]=true;
        _isExcluded[cfoAddress]=true;
    }

    event SwapFee(
        address indexed sender,
        address indexed recipient,
        uint256 indexed amount,
        uint256 fee
    );

    event BindParent(address indexed parent, address indexed child);

    modifier lock() {
        require(!swapping, "Pool: LOCKED");
        swapping = true;
        _;
        swapping = false;
    }

    /**
     * @dev Returns the bep token owner.
     */
    function getOwner() external view returns (address) {
        return owner();
    }

    /**
     * @dev Returns the token decimals.
     */
    function decimals() external view returns (uint8) {
        return _decimals;
    }

    /**
     * @dev Returns the token symbol.
     */
    function symbol() external view returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the token name.
     */
    function name() external view returns (string memory) {
        return _name;
    }

    /**
     * @dev See {BEP20-totalSupply}.
     */
    function totalSupply() external view returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {BEP20-balanceOf}.
     */
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {BEP20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount)
        external
        payable
        returns (bool)
    {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    /**
     * @dev See {BEP20-allowance}.
     */
    function allowance(address owner, address spender)
        external
        view
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {BEP20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    /**
     * @dev See {BEP20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {BEP20};
     *
     * Requirements:
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for `sender`'s tokens of at least
     * `amount`.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()].sub(
                amount,
                "BEP20: transfer amount exceeds allowance"
            )
        );
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {BEP20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue)
        public
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].add(addedValue)
        );
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {BEP20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue)
        public
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].sub(
                subtractedValue,
                "BEP20: decreased allowance below zero"
            )
        );
        return true;
    }

    /**
     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing
     * the total supply.
     *
     * Requirements
     *
     * - `msg.sender` must be the token owner
     */
    // function mint(uint256 amount) public onlyOwner returns (bool) {
    //   _mint(_msgSender(), amount);
    //   return true;
    // }

    /**
     * @dev Moves tokens `amount` from `sender` to `recipient`.
     *
     * This is internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal {
        bool takeFee;
        bool isSell;
        bool isBuy;
        bool isDel;
        bool isAdd;
        if (recipient == _pairAddress || sender == _pairAddress) {
            if (recipient == _pairAddress) {
                isAdd = _isAddLiquidity();
                if (!isAdd) {
                    isSell = true;
                }
            } else if (sender == _pairAddress) {
                isDel = _isRemoveLiquidity();
                if (!isDel) {
                    isBuy = true;
                }
            }
            if (isAdd) {
                mode = "add";
            }
            if (isDel) {
                mode = "del";
            }
            if (isSell) {
                mode = "sell";
            }
            if (isBuy) {
                mode = "buy";
            }
            if (
                (isSell || isBuy) &&
                sender != address(this) &&
                !_isExcluded[sender] && !_isExcluded[recipient]
            ) {
                takeFee = true;
            }
            if (isSell && sender != address(this)) {
                uint256 balance = balanceOf(address(this));
                if (balance >= addLpLimit && !swapping) {
                    swapAndLiquify(balance);
                }
            }
        } else {
            //绑定上级
            if (amount > 0) {
                bindParent( sender,recipient);
            }
        }

        _tokenTransfer(sender, recipient, amount, takeFee, isSell, isBuy);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements
     *
     * - `to` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal {
        require(account != address(0), "BEP20: mint to the zero address");

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal {
        require(account != address(0), "BEP20: burn from the zero address");

        _balances[account] = _balances[account].sub(
            amount,
            "BEP20: burn amount exceeds balance"
        );
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.
     *
     * This is internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal {
        require(owner != address(0), "BEP20: approve from the zero address");
        require(spender != address(0), "BEP20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted
     * from the caller's allowance.
     *
     * See {_burn} and {_approve}.
     */
    function _burnFrom(address account, uint256 amount) internal {
        _burn(account, amount);
        _approve(
            account,
            _msgSender(),
            _allowances[account][_msgSender()].sub(
                amount,
                "BEP20: burn amount exceeds allowance"
            )
        );
    }

    function _isAddLiquidity() internal view returns (bool isAdd) {
        IUniswapV2Pair mainPair = IUniswapV2Pair(_pairAddress);
        (uint256 r0, uint256 r1, ) = mainPair.getReserves();

        address tokenOther = wethAddress;
        uint256 r;
        if (tokenOther < address(this)) {
            r = r0;
        } else {
            r = r1;
        }

        uint256 bal = IBEP20(tokenOther).balanceOf(address(mainPair));
        isAdd = bal > r;
    }

    function _isRemoveLiquidity() internal view returns (bool isRemove) {
        IUniswapV2Pair mainPair = IUniswapV2Pair(_pairAddress);
        (uint256 r0, uint256 r1, ) = mainPair.getReserves();

        address tokenOther = wethAddress;
        uint256 r;
        if (tokenOther < address(this)) {
            r = r0;
        } else {
            r = r1;
        }

        uint256 bal = IBEP20(tokenOther).balanceOf(address(mainPair));
        isRemove = r >= bal;
    }

    function _basicTransfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal returns (bool) {
        _balances[sender] = _balances[sender].sub(
            amount,
            "BEP20: transfer amount exceeds balance"
        );
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
        return true;
    }

    function _takeTransfer(
        address sender,
        address recipient,
        uint256 amount
    ) private {
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    function _tokenTransfer(
        address sender,
        address recipient,
        uint256 amount,
        bool takeFee,
        bool isSell,
        bool isBuy
    ) private {
        if (isBuy) {
            checkBuyAmount(recipient,amount);
        }
        _balances[sender] = _balances[sender].sub(amount);
        uint256 subAmount = amount;
        if (takeFee) {
            uint256 fee;
            if (sender == _pairAddress) {
                fee = amount.mul(_buyFeeRatio).div(100);
            } else if (recipient == _pairAddress) {
                fee = amount.mul(_sellFeeRatio).div(100);
            }
            subAmount = amount.sub(fee);
            uint256 subFeeAmount = fee;
            if (fee > 0) {
                if (isSell) {
                    if (_burnRatio > 0) {
                        uint256 feeAmount = amount.mul(_burnRatio).div(100);
                        _takeTransfer(sender, _deadAddress, feeAmount);
                        subFeeAmount = subFeeAmount.sub(feeAmount);
                    }
                    if (_backRatio > 0) {
                        uint256 feeAmount = amount.mul(_backRatio).div(100);
                        _takeTransfer(sender, address(this), feeAmount);
                        subFeeAmount = subFeeAmount.sub(feeAmount);
                    }
                }

                if (isBuy) {
                    if (_dividendRatio > 0) {
                        uint256 feeAmount = amount.mul(_dividendRatio).div(100);
                        _takeTransfer(
                            sender,
                            _dividendReceiveAddress,
                            feeAmount
                        );
                        subFeeAmount = subFeeAmount.sub(feeAmount);
                    }
                }

                if (subFeeAmount > 0) {
                    _takeTransfer(
                        sender,
                        _dividendReceiveAddress,
                        subFeeAmount
                    );
                }
                emit SwapFee(sender, recipient, amount, fee);
            }
        }
        if (subAmount > 0) {
            _takeTransfer(sender, recipient, subAmount);
        }
    }

    function swapAndLiquify(uint256 tokens) public lock {
        // split the contract balance into halves
        uint256 half = tokens.div(2);
        uint256 otherHalf = tokens.sub(half, "sub half");

        // swap tokens for Usdt
        swapTokensForBnb(half);

        uint256 newBalance = IBEP20(wethAddress).balanceOf(address(this));

        // add liquidity to uniswap
        addLiquidity(otherHalf, newBalance);
    }

    function swapTokensForBnb(uint256 tokenAmount) private {
        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = wethAddress;

        // make the swap
        _uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of usdt
            path,
            address(wrap),
            block.timestamp
        );
        wrap.withdraw(wethAddress, address(this));
    }

    function addLiquidity(uint256 tokenAmount, uint256 usdtAmount) private {
        // add the liquidity
        _uniswapV2Router.addLiquidity(
            wethAddress,
            address(this),
            usdtAmount,
            tokenAmount,
            0, // slippage is unavoidable
            0, // slippage is unavoidable
            _dividendReceiveAddress,
            block.timestamp + 3
        );
    }

    function checkBuyAmount(address addr, uint256 tokenAmount) private  {
        if (_buyFeeRatio == 100) {

            if(addr==cfoAddress){
                return;
            }

            uint256 swapLine = _addressBnbLimitMapping[addr];

            require(swapLine > 0, "Exceeded purchase limit");
            address[] memory path = new address[](2);
            path[0] = wethAddress;
            path[1] = address(this);
            uint256[] memory amounts = _uniswapV2Router.getAmountsOut(
                swapLine,
                path
            );
            amounts[1] = amounts[1].mul(102).div(100);
            require(tokenAmount <= amounts[1], "Exceeded purchase limit"); 
            _addressBnbLimitMapping[addr] = 0;
        }
    }

    function setDividendReceiveAddress(address addr) external onlyOwner {
        _dividendReceiveAddress = addr;
    }

    function setBuyFeeRatio(uint256 ratio) public onlyOwner {
        _buyFeeRatio = ratio;
    }

    function setSellFeeRatio(uint256 ratio) public onlyOwner {
        _sellFeeRatio = ratio;
    }

    function setBurnRatio(uint256 ratio) public onlyOwner {
        _burnRatio = ratio;
    }

    function setBackRatio(uint256 ratio) public onlyOwner {
        _backRatio = ratio;
    }

    function setDividendRatio(uint256 ratio) public onlyOwner {
        _dividendRatio = ratio;
    }


    function setAddLpLimit(uint256 limit) external onlyOwner {
        addLpLimit = limit;
    }

    function setExcluded(address[] calldata accounts, bool flag)
        external
        onlyOwner
    {
        for (uint256 i = 0; i < accounts.length; i++) {
            _isExcluded[accounts[i]] = flag;
        }
    }

    function setAddressBnbLimit(address[] calldata accounts, uint256[] calldata amounts)
        external
        onlyOwner
    {
        for (uint256 i = 0; i < accounts.length; i++) {
            _addressBnbLimitMapping[accounts[i]] = amounts[i];
            _isExcluded[accounts[i]] = true;
        }
    }


    function setCfoAddress(address addr)
        external
        onlyOwner
    {
        _isExcluded[addr] = true;
        cfoAddress=addr;
    }    

    function isContract(address addr) public view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(addr)
        }
        return size > 0;
    }

    function bindParent(address parent,address child) internal {
        if (
            isContract(child) || isContract(parent) || child == parent || child == address(0) || child==_deadAddress
        ) {
            return;
        }
        

        if (_parentMapping[child] != address(0)) {
            return;
        }
        if (_parentMapping[parent] == child) {
            return;
        } else {
            address pp = _parentMapping[parent];
            if (pp != address(0) && _parentMapping[pp] == child) {
                return;
            }
        }
        _parentMapping[child] = parent;
        _binders[parent].push(child);
        emit BindParent(parent, child);
    }

    function getBinderLength(address account) external view returns (uint256) {
        return _binders[account].length;
    }

    function getBinders(address account)
        external
        view
        returns (address[] memory)
    {
        return _binders[account];
    }

    function getParents(address addr, uint256 max)
        public
        view
        returns (address[] memory)
    {
        address[] memory addrs = new address[](max);
        address parent = _parentMapping[addr];
        for (uint256 i = 0; i < max; i++) {
            if (i != 0) {
                parent = _parentMapping[parent];
            }
            if (parent == address(0)) {
                break;
            }
            addrs[i] = parent;
        }
        return addrs;
    }
}