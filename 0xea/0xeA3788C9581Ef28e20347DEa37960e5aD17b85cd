
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


// File: @openzeppelin/contracts/security/Pausable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        _requireNotPaused();
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        _requirePaused();
        _;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Throws if the contract is paused.
     */
    function _requireNotPaused() internal view virtual {
        require(!paused(), "Pausable: paused");
    }

    /**
     * @dev Throws if the contract is not paused.
     */
    function _requirePaused() internal view virtual {
        require(paused(), "Pausable: not paused");
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}


// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() internal view virtual returns (uint256) {
        return 0;
    }
}


// File: contracts/Payment/GalxePayment.sol
/*
    Copyright 2023 Galxe.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    SPDX-License-Identifier: Apache-2.0
*/

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

/**
 * @title GalxePayment
 * @author Galxe
 *
 * GalxePayment contract allows Galxe to charge and keep track of Galxe user balances.
 */
contract GalxePayment is Pausable, Ownable {

    event DepositReceived(address indexed payer, uint256 amount, uint32 category, string target, address tokenAddress);
    event WithdrawSent(address indexed recipient, uint256 amount, address tokenAddress);
    event CategoryAdded(uint32 category, string name);
    event CategoryUpdated(uint32 category, string name);
    event CategoryRemoved(uint32 category);
    event TreasurerChanged(address newTreasurer);
    event TokenSetForCategory(uint32 category, address token, uint256 amount);
    event TokenUnsetForCategory(uint32 category, address token);

    struct TokenInfo {
        bool allowed;
        // If amount is 0, user can deposit any amount. Otherwise, user can only deposit the specified amount
        uint256 amount;
    }

    struct Category {
        string name;
        mapping(address => TokenInfo) tokens;
    }

    mapping(uint32 => Category) public categories;

    bool private initialized;
    address public treasurer;

    constructor(address _owner) {
        transferOwnership(_owner);
    }

    function initialize(address _treasurer) external onlyOwner {
        require(!initialized, "Contract is already initialized");
        initialized = true; // Ensure initialize can't be called again
        treasurer = _treasurer;
    }

    /* 
    * @dev Add a new category.
    * @param _id The ID of the category.
    * @param _name The name of the category.
    */
    function addCategory(uint32 _id, string calldata _name) external onlyOwner {
        require(bytes(categories[_id].name).length == 0, "Category already exists");
        require(bytes(_name).length > 0, "Category name cannot be empty");
        categories[_id].name = _name;
        emit CategoryAdded(_id, _name);
    }

    /* 
    * @dev Rename an existing category.
    * @param _id The ID of the category.
    * @param _name The name of the category.
    */
    function renameCategory(uint32 _id, string calldata _name) external onlyOwner {
        require(bytes(categories[_id].name).length != 0, "Category does not exist");
        require(bytes(_name).length > 0, "Category name cannot be empty");
        categories[_id].name = _name;
        emit CategoryUpdated(_id, _name);
    }

    /*
    * @dev Remove an existing category.
    * @param _id The ID of the category.
    */
    function removeCategory(uint32 _id) external onlyOwner {
        require(bytes(categories[_id].name).length != 0, "Category does not exist");
        delete categories[_id];
        emit CategoryRemoved(_id);
    }

    /*
    * @dev Get the category name.
    * @param _id The ID of the category.
    * @return The name of the category.
    */
    function getCategoryName(uint32 _id) external view returns (string memory) {
        return categories[_id].name;
    }

    /*
    * @dev Change the treasurer address.
    * @param _newTreasurer The new treasurer address.
    */
    function changeTreasurer(address _newTreasurer) public onlyOwner {
        require(_newTreasurer != address(0), "Invalid address");
        treasurer = _newTreasurer;
        emit TreasurerChanged(_newTreasurer);
    }

    /* 
    * @dev Allow the token and set an amount for the specific category.
    * @param _categoryId The ID of the category.
    * @param _tokenAddress The address of the token. Use zero address for native token.
    * @param _amount The amount of the token to deposit.
    */
    function setToken(uint32 _categoryId, address _tokenAddress, uint256 _amount) external onlyOwner {
        require(bytes(categories[_categoryId].name).length != 0, "Category does not exist");
        TokenInfo storage tokenInfo = categories[_categoryId].tokens[_tokenAddress];
        if (tokenInfo.allowed) {
            tokenInfo.amount = _amount;
        } else {
            tokenInfo.allowed = true;
            tokenInfo.amount = _amount;
        }
        emit TokenSetForCategory(_categoryId, _tokenAddress, _amount);
    }

    /*
    * @dev Unset the token for the specific category.
    * @param _categoryId The ID of the category.
    * @param _tokenAddress The address of the token.
    */
    function unsetToken(uint32 _categoryId, address _tokenAddress) external onlyOwner {
        require(bytes(categories[_categoryId].name).length != 0, "Category does not exist");
        require(categories[_categoryId].tokens[_tokenAddress].allowed, "Token already not allowed for this category");
        delete categories[_categoryId].tokens[_tokenAddress];
        emit TokenUnsetForCategory(_categoryId, _tokenAddress);
    }

    /*
    * @dev Get the token configuration for the specific category.
    * @param _categoryId The ID of the category.
    * @param _tokenAddress The address of the token.
    * @return allowed Whether the token is allowed for the category.
    * @return amount The amount of the token to deposit.
    */
    function getTokenConfig(uint32 _categoryId, address _tokenAddress) external view returns (bool, uint256) {
        require(bytes(categories[_categoryId].name).length != 0, "Category does not exist");
        TokenInfo storage tokenInfo = categories[_categoryId].tokens[_tokenAddress];
        return (tokenInfo.allowed, tokenInfo.amount);
    }

    /*
    * @dev Deposit fund to the specific target for the specific category.
    * @param _categoryId The ID of the category.
    * @param _target The target of the deposit.
    * @param _amount The amount of the deposit.
    * @param _tokenAddress The address of the token to deposit. Use zero address for native token.
    */
    function deposit(
        uint32 _categoryId,
        string calldata _target,
        uint256 _amount,
        address _tokenAddress
    ) external payable {
        require(bytes(categories[_categoryId].name).length != 0, "Category does not exist");
        TokenInfo storage tokenInfo = categories[_categoryId].tokens[_tokenAddress];
        require(tokenInfo.allowed, "Token not allowed for this category");

        if (tokenInfo.amount != 0) {
            require(
                _amount == tokenInfo.amount,
                "Your payment amount does not match the configured amount"
            );
        }
        if (_tokenAddress == address(0)) {
            // Deposit native token
            require(
                msg.value == _amount,
                "Your token amount must be equal to the amount you are trying to deposit"
            );
        } else {
            // Deposit ERC20 token
            require(
                IERC20(_tokenAddress).balanceOf(msg.sender) >= _amount,
                "Your token amount must be greater than you are trying to deposit"
            );
            require(
                IERC20(_tokenAddress).allowance(msg.sender, address(this)) >= _amount,
                "Approve tokens first!"
            );
            IERC20 token = IERC20(_tokenAddress);
            require(token.transferFrom(msg.sender, address(this), _amount), "Deposit failed");
        }
        emit DepositReceived(msg.sender, _amount, _categoryId, _target, _tokenAddress);
    }

    /*
    * @dev Withdraw the tokens from the contract.
    * @param _tokenAddress The address of the token to withdraw. Use zero address for native token.
    * @param _amount The amount of the token to withdraw.
    * @param _recipient The recipient of the withdrawal.
    */
    function withdrawTokens(
        address _tokenAddress,
        uint256 _amount,
        address _recipient
    ) public {
        require(msg.sender == treasurer, "Only the treasurer can withdraw");
        if (_tokenAddress == address(0)) {
            require(address(this).balance >= _amount, "Contract insufficient balance");
            (bool success, ) = _recipient.call{value: _amount}(
                new bytes(0)
            );
            require(success, "Withdraw native token failed");
        } else {
            require(
                IERC20(_tokenAddress).balanceOf(address(this)) >= _amount,
                "Insufficient contract balance"
            );
            IERC20 token = IERC20(_tokenAddress);
            require(token.transfer(_recipient, _amount), "Withdrawal failed");
        }
        
        emit WithdrawSent(_recipient, _amount, _tokenAddress);
    }
    
    receive() external payable {
        if (msg.sender == address(this)) {
            return;
        }
        // anonymous transfer: send to treasurer
        (bool success, ) = treasurer.call{value: msg.value}(
            new bytes(0)
        );
        require(success, "Transfer failed");
    }

    fallback() external payable {
        if (msg.sender == address(this)) {
            return;
        }
        if (msg.value > 0) {
            // call non exist function: send to treasurer
            (bool success, ) = treasurer.call{value: msg.value}(new bytes(0));
            require(success, "Transfer failed");
        }
    }
}
