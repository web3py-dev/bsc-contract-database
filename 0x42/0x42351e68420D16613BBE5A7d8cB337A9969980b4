
// File: contracts/MetaWallet.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;
/**
 * @title Omni Token Wallet
 * @dev This contract was audited by Hacken (https://hacken.io) on 24/09/2024.
 *
 * Audited by: Hacken
 * Date: 24/09/2024
 * Audit: https://example.com/audit-report
 */

import "contracts/token/ERC20/utils/SafeERC20.sol";
import "contracts/token/ERC20/IERC20.sol";
import "contracts/utils/cryptography/ECDSA.sol";
import "contracts/RlpEncode.sol";

contract MetaWallet {
    using SafeERC20 for IERC20;

    uint64 public constant MAX_UINT64 = 2 ** 64 - 1;
    uint128 public constant NONCE_TS_SHIFT = 1000000000000;

    uint128 public constant WITHDRAW_DELAY_SECONDS = 500;
    uint128 public constant REFUND_DELAY_SECONDS = 600;

    address constant NATIVE_TOKEN = address(0);

    address public owner;
    address public verifyAddress;
    uint64 public chainId;
    uint128 public nonceMax;

    uint256 public minTimestamp;
    uint256 public maxTimestamp;
    uint256 public fees;

    mapping(uint128 => bytes32) public deposits;

    mapping(uint128 => bool) public usedNonces;

    event NewTransfer(uint128 nonce, uint128 amount, bytes contract_id, bytes receiver);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function.");
        _;
    }

    /**
     * @notice Withdraw ERC20 tokens from the contract to the owner's address.
     * @dev Only callable by the owner.
     * @param tokenAddress The address of the ERC20 token to withdraw.
     * @param amount The amount of tokens to withdraw.
     */
    function withdrawToken(address tokenAddress, uint256 amount)
    public
    onlyOwner
    {
        IERC20(tokenAddress).safeTransfer(owner, amount);
    }

    /**
     * @notice Withdraw Ether from the contract to the owner's address.
     * @dev Only callable by the owner.
     * @param amount The amount of Ether to withdraw (in wei).
     */
    function withdrawEth(uint256 amount) public onlyOwner {
        (bool success,) = payable(owner).call{value: amount}("");
        require(success, "Transfer failed.");
    }

    /**
     * @notice Withdraw accumulated fees from the contract to the owner's address.
     * @dev Only callable by the owner. Resets the fees to zero after withdrawal.
     */
    function withdrawFees() public onlyOwner {
        (bool success,) = payable(owner).call{value: fees}("");
        require(success, "Transfer failed.");
        fees = 0;
    }

    /**
     * @notice Transfer ownership of the contract to a new address.
     * @dev Only callable by the current owner.
     * @param newOwner The address of the new owner.
     */
    function changeOwner(address newOwner) public onlyOwner {
        owner = newOwner;
    }

    /**
     * @notice Close the contract by setting the maximum timestamp to the current time.
     * @dev Only callable by the owner. Prevents new deposits after closure.
     */
    function close() public onlyOwner {
        maxTimestamp = block.timestamp;
    }

    /**
     * @notice Fallback function to receive Ether.
     */
    receive() external payable {}

    /**
     * @notice Initializes the MetaWallet contract.
     * @param _verifyAddress The address used to verify signatures.
     * @param _chainId The chain ID of the blockchain network.
     */
    constructor(
        address _verifyAddress,
        uint64 _chainId
    ) payable {
        owner = msg.sender;
        verifyAddress = _verifyAddress;
        chainId = _chainId;
        minTimestamp = block.timestamp;
        maxTimestamp = MAX_UINT64;
        fees = 0;
    }

    /**
     * @notice Change the address used for signature verification.
     * @dev Only callable by the owner.
     * @param _verifyAddress The new address to use for verifying signatures.
     */
    function changeVerifyAddress(address _verifyAddress) public onlyOwner {
        verifyAddress = _verifyAddress;
    }

    /**
     * @notice Execute a withdrawal from the contract to the specified receiver.
     * @param nonce The unique nonce associated with the withdrawal.
     * @param contract_id The address of the token contract (use address(0) for native token).
     * @param receiver_id The address of the receiver.
     * @param amount The amount to withdraw.
     * @param signature The signature proving authorization for the withdrawal.
     *
     * @dev Verifies the provided signature and ensures that the nonce is valid.
     *      Increments the fees by the amount of Ether sent with the transaction.
     */
    function withdraw(
        uint128 nonce,
        address contract_id,
        address receiver_id,
        uint128 amount,
        bytes memory signature
    ) public payable {
        uint128 nonce_ts = nonce / NONCE_TS_SHIFT;
        require(nonce_ts > minTimestamp, "Nonce timestamp too low");
        require(nonce_ts < maxTimestamp, "Nonce timestamp too high");
        require(
            nonce_ts > uint128(block.timestamp) - WITHDRAW_DELAY_SECONDS,
            "Nonce time is expired, you can make a refund"
        ); // this transfer can only be refunded

        require(!usedNonces[nonce], "Nonce already used");
        require(
            verify(
                nonce,
                abi.encodePacked(contract_id),
                abi.encodePacked(receiver_id),
                amount,
                signature
            ),
            "Invalid signature"
        );
        usedNonces[nonce] = true;
        if (contract_id == NATIVE_TOKEN) {
            (bool success,) = payable(receiver_id).call{value: amount}("");
            require(success, "Transfer failed.");
        } else {
            IERC20(contract_id).safeTransfer(receiver_id, amount);
        }
        fees += msg.value;
    }

    /**
     * @notice Deposit tokens into the contract on behalf of a receiver.
     * @param receiver The receiver's identifier (in bytes).
     * @param contract_id The address of the token contract.
     * @param amount The amount of tokens to deposit.
     *
     * @dev Transfers tokens from the sender to the contract and records the deposit.
     *      Increments the fees by the amount of Ether sent with the transaction.
     */
    function deposit(
        bytes memory receiver,
        address contract_id,
        uint128 amount
    ) public payable {
        require(block.timestamp < maxTimestamp, "Contract is closed");

        IERC20(contract_id).safeTransferFrom(
            msg.sender,
            address(this),
            amount
        );
        uint128 nonce = uint128(block.timestamp) * NONCE_TS_SHIFT + nonceMax;
        emit NewTransfer(nonce, amount, abi.encodePacked(contract_id), receiver);

        bytes32 origMessageHash = getMessageHash(
            nonce,
            abi.encodePacked(contract_id),
            receiver,
            amount
        );

        deposits[nonce] = origMessageHash;
        nonceMax += 1;
        fees += msg.value;
    }

    /**
     * @notice Deposit Ether into the contract on behalf of a receiver.
     * @param receiver The receiver's identifier (in bytes).
     *
     * @dev Records the deposit of Ether and emits a NewTransfer event.
     */
    function deposit(bytes memory receiver) public payable {
        require(block.timestamp < maxTimestamp, "Contract is closed");
        uint128 nonce = uint128(block.timestamp) * NONCE_TS_SHIFT + nonceMax;

        bytes32 origMessageHash = getMessageHash(
            nonce,
            abi.encodePacked(NATIVE_TOKEN),
            receiver,
            uint128(msg.value)
        );

        deposits[nonce] = origMessageHash;
        nonceMax += 1;
        emit NewTransfer(nonce, uint128(msg.value), abi.encodePacked(NATIVE_TOKEN), receiver);
    }

    /**
     * @notice Verifies that the message hash can be signed by HOT Validators.
     * @param msg_hash The hash of the message to verify.
     * @param userPayload: (uint128 nonce, uint8 type_) encoded in ABI. Type_ = 0 for deposit, 1 for refund
     * @return True if the message hash can be signed; false otherwise.
     *
     * @dev Used by HOT Validators to verify messages before signing.
     */
    function hot_verify(
        bytes32 msg_hash,
        bytes memory _walletId,
        bytes memory userPayload,
        bytes memory _metadata
    ) public view returns (bool) {
        (uint128 nonce, uint8 type_) = abi.decode(
            userPayload,
            (uint128, uint8)
        );

        if (type_ == 0) {
            // Verify deposit: valid and exists
            require(deposits[nonce] == msg_hash, "Deposit hash mismatch");
        } else {
            // Verify refund: nonce is old to deposit, not expired for refund, was not used and hash is valid
            require(!usedNonces[nonce], "Nonce already used");

            uint128 nonce_ts = nonce / NONCE_TS_SHIFT;
            require(nonce_ts > minTimestamp, "Nonce time is too low");
            require(nonce_ts < maxTimestamp, "Nonce time is too high");
            require(
                nonce_ts < uint128(block.timestamp) - REFUND_DELAY_SECONDS,
                "Nonce time is not expired"
            ); // this transfer can be refunded

            bytes32 origMessageHash = getRefundMessageHash(nonce);
            require(origMessageHash == msg_hash, "Refund hash mismatch");
        }
        return true;
    }

    /**
     * @notice Verifies the signature of a message.
     * @param nonce The unique nonce associated with the message.
     * @param contract_id The encoded contract address.
     * @param receiver_id The encoded receiver address.
     * @param amount The amount involved in the transaction.
     * @param signature The signature to verify.
     * @return True if the signature is valid; false otherwise.
     *
     * @dev Uses ECDSA to recover the signer's address and compares it with the verifyAddress.
     */
    function verify(
        uint128 nonce,
        bytes memory contract_id,
        bytes memory receiver_id,
        uint128 amount,
        bytes memory signature
    ) internal view returns (bool) {
        bytes32 messageHash = getMessageHash(
            nonce,
            contract_id,
            receiver_id,
            amount
        );
        return ECDSA.recover(messageHash, signature) == verifyAddress;
    }

    /**
     * @notice Generates the SHA-256 hash of the raw message data.
     * @param nonce The unique nonce associated with the message.
     * @param contract_id The encoded contract address.
     * @param receiver_id The encoded receiver address.
     * @param amount The amount involved in the transaction.
     * @return The SHA-256 hash of the message data.
     */
    function getMessageHash(
        uint128 nonce,
        bytes memory contract_id,
        bytes memory receiver_id,
        uint128 amount
    ) internal view returns (bytes32) {
        return sha256(getMessageRaw(nonce, contract_id, receiver_id, amount));
    }

    /**
     * @notice Generates the SHA-256 hash of the raw refund message data.
     * @param nonce The unique nonce associated with the refund.
     * @return The SHA-256 hash of the refund message data.
     */
    function getRefundMessageHash(uint128 nonce)
    public
    view
    returns (bytes32)
    {
        return sha256(getRefundMessageRaw(nonce));
    }

    /**
     * @notice Constructs the raw data for a refund message.
     * @param nonce The unique nonce associated with the refund.
     * @return The RLP-encoded raw refund message data.
     */
    function getRefundMessageRaw(uint128 nonce)
    internal
    view
    returns (bytes memory)
    {
        bytes[] memory rlpList = new bytes[](2);
        rlpList[0] = RLPEncode.encodeUint(nonce, 16);
        rlpList[1] = RLPEncode.encodeUint(chainId, 8);
        return RLPEncode.encodeList(rlpList);
    }

    /**
     * @notice Constructs the raw data for a message.
     * @param nonce The unique nonce associated with the message.
     * @param contract_id The encoded contract address.
     * @param receiver_id The encoded receiver address.
     * @param amount The amount involved in the transaction.
     * @return The RLP-encoded raw message data.
     */
    function getMessageRaw(
        uint128 nonce,
        bytes memory contract_id,
        bytes memory receiver_id,
        uint128 amount
    ) public view returns (bytes memory) {
        bytes[] memory rlpList = new bytes[](5);
        rlpList[0] = RLPEncode.encodeUint128(nonce, 16);
        rlpList[1] = RLPEncode.encodeUint64(chainId, 8);
        rlpList[2] = RLPEncode.encodeBytes(contract_id);
        rlpList[3] = RLPEncode.encodeBytes(receiver_id);
        rlpList[4] = RLPEncode.encodeUint128(amount, 16);

        return RLPEncode.encodeList(rlpList);
    }
}

// File: contracts/token/ERC20/utils/SafeERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)

pragma solidity ^0.8.0;

import "contracts/token/ERC20/IERC20.sol";
import "contracts/token/ERC20/extensions/draft-IERC20Permit.sol";
import "contracts/utils/Address.sol";

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure (when the token
 * contract returns false). Tokens that return no value (and instead revert or
 * throw on failure) are also supported, non-reverting calls are assumed to be
 * successful.
 * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    /**
     * @dev Deprecated. This function has issues similar to the ones found in
     * {IERC20-approve}, and its usage is discouraged.
     *
     * Whenever possible, use {safeIncreaseAllowance} and
     * {safeDecreaseAllowance} instead.
     */
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    function safePermit(
        IERC20Permit token,
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal {
        uint256 nonceBefore = token.nonces(owner);
        token.permit(owner, spender, value, deadline, v, r, s);
        uint256 nonceAfter = token.nonces(owner);
        require(nonceAfter == nonceBefore + 1, "SafeERC20: permit did not succeed");
    }

    /**
     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
     * on the return value: the return value is optional (but if data is returned, it must not be false).
     * @param token The token targeted by the call.
     * @param data The call data (encoded using abi.encode or one of its variants).
     */
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


// File: contracts/token/ERC20/IERC20.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}


// File: contracts/token/ERC20/extensions/draft-IERC20Permit.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
 * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
 *
 * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
 * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
 * need to send a transaction, and thus is not required to hold Ether at all.
 */
interface IERC20Permit {
    /**
     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
     * given ``owner``'s signed approval.
     *
     * IMPORTANT: The same issues {IERC20-approve} has related to transaction
     * ordering also apply here.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `deadline` must be a timestamp in the future.
     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
     * over the EIP712-formatted function arguments.
     * - the signature must use ``owner``'s current nonce (see {nonces}).
     *
     * For more information on the signature format, see the
     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
     * section].
     */
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    /**
     * @dev Returns the current nonce for `owner`. This value must be
     * included whenever a signature is generated for {permit}.
     *
     * Every successful call to {permit} increases ``owner``'s nonce by one. This
     * prevents a signature from being used multiple times.
     */
    function nonces(address owner) external view returns (uint256);

    /**
     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
     */
    // solhint-disable-next-line func-name-mixedcase
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}


// File: contracts/utils/Address.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly
                /// @solidity memory-safe-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


// File: contracts/utils/cryptography/ECDSA.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)

pragma solidity ^0.8.0;

import "contracts/utils/Strings.sol";

/**
 * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.
 *
 * These functions can be used to verify that a message was signed by the holder
 * of the private keys of a given address.
 */
library ECDSA {
    enum RecoverError {
        NoError,
        InvalidSignature,
        InvalidSignatureLength,
        InvalidSignatureS,
        InvalidSignatureV
    }

    function _throwError(RecoverError error) private pure {
        if (error == RecoverError.NoError) {
            return; // no error: do nothing
        } else if (error == RecoverError.InvalidSignature) {
            revert("ECDSA: invalid signature");
        } else if (error == RecoverError.InvalidSignatureLength) {
            revert("ECDSA: invalid signature length");
        } else if (error == RecoverError.InvalidSignatureS) {
            revert("ECDSA: invalid signature 's' value");
        } else if (error == RecoverError.InvalidSignatureV) {
            revert("ECDSA: invalid signature 'v' value");
        }
    }

    /**
     * @dev Returns the address that signed a hashed message (`hash`) with
     * `signature` or error string. This address can then be used for verification purposes.
     *
     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:
     * this function rejects them by requiring the `s` value to be in the lower
     * half order, and the `v` value to be either 27 or 28.
     *
     * IMPORTANT: `hash` _must_ be the result of a hash operation for the
     * verification to be secure: it is possible to craft signatures that
     * recover to arbitrary addresses for non-hashed data. A safe way to ensure
     * this is by receiving a hash of the original message (which may otherwise
     * be too long), and then calling {toEthSignedMessageHash} on it.
     *
     * Documentation for signature generation:
     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]
     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]
     *
     * _Available since v4.3._
     */
    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {
        if (signature.length == 65) {
            bytes32 r;
            bytes32 s;
            uint8 v;
            // ecrecover takes the signature parameters, and the only way to get them
            // currently is to use assembly.
            /// @solidity memory-safe-assembly
            assembly {
                r := mload(add(signature, 0x20))
                s := mload(add(signature, 0x40))
                v := byte(0, mload(add(signature, 0x60)))
            }
            return tryRecover(hash, v, r, s);
        } else {
            return (address(0), RecoverError.InvalidSignatureLength);
        }
    }

    /**
     * @dev Returns the address that signed a hashed message (`hash`) with
     * `signature`. This address can then be used for verification purposes.
     *
     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:
     * this function rejects them by requiring the `s` value to be in the lower
     * half order, and the `v` value to be either 27 or 28.
     *
     * IMPORTANT: `hash` _must_ be the result of a hash operation for the
     * verification to be secure: it is possible to craft signatures that
     * recover to arbitrary addresses for non-hashed data. A safe way to ensure
     * this is by receiving a hash of the original message (which may otherwise
     * be too long), and then calling {toEthSignedMessageHash} on it.
     */
    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
        (address recovered, RecoverError error) = tryRecover(hash, signature);
        _throwError(error);
        return recovered;
    }

    /**
     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.
     *
     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]
     *
     * _Available since v4.3._
     */
    function tryRecover(
        bytes32 hash,
        bytes32 r,
        bytes32 vs
    ) internal pure returns (address, RecoverError) {
        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);
        uint8 v = uint8((uint256(vs) >> 255) + 27);
        return tryRecover(hash, v, r, s);
    }

    /**
     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.
     *
     * _Available since v4.2._
     */
    function recover(
        bytes32 hash,
        bytes32 r,
        bytes32 vs
    ) internal pure returns (address) {
        (address recovered, RecoverError error) = tryRecover(hash, r, vs);
        _throwError(error);
        return recovered;
    }

    /**
     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,
     * `r` and `s` signature fields separately.
     *
     * _Available since v4.3._
     */
    function tryRecover(
        bytes32 hash,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal pure returns (address, RecoverError) {
        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature
        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines
        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most
        // signatures from current libraries generate a unique signature with an s-value in the lower half order.
        //
        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value
        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or
        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept
        // these malleable signatures as well.
        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
            return (address(0), RecoverError.InvalidSignatureS);
        }
        if (v != 27 && v != 28) {
            return (address(0), RecoverError.InvalidSignatureV);
        }

        // If the signature is valid (and not malleable), return the signer address
        address signer = ecrecover(hash, v, r, s);
        if (signer == address(0)) {
            return (address(0), RecoverError.InvalidSignature);
        }

        return (signer, RecoverError.NoError);
    }

    /**
     * @dev Overload of {ECDSA-recover} that receives the `v`,
     * `r` and `s` signature fields separately.
     */
    function recover(
        bytes32 hash,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal pure returns (address) {
        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);
        _throwError(error);
        return recovered;
    }

    /**
     * @dev Returns an Ethereum Signed Message, created from a `hash`. This
     * produces hash corresponding to the one signed with the
     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]
     * JSON-RPC method as part of EIP-191.
     *
     * See {recover}.
     */
    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
        // 32 is the length in bytes of hash,
        // enforced by the type signature above
        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
    }

    /**
     * @dev Returns an Ethereum Signed Message, created from `s`. This
     * produces hash corresponding to the one signed with the
     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]
     * JSON-RPC method as part of EIP-191.
     *
     * See {recover}.
     */
    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n", Strings.toString(s.length), s));
    }

    /**
     * @dev Returns an Ethereum Signed Typed Data, created from a
     * `domainSeparator` and a `structHash`. This produces hash corresponding
     * to the one signed with the
     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]
     * JSON-RPC method as part of EIP-712.
     *
     * See {recover}.
     */
    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));
    }
}


// File: contracts/utils/Strings.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)

pragma solidity ^0.8.0;

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";
    uint8 private constant _ADDRESS_LENGTH = 20;

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }

    /**
     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.
     */
    function toHexString(address addr) internal pure returns (string memory) {
        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
    }
}


// File: contracts/RlpEncode.sol
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

library RLPEncode {
  function encodeUint(uint256 _uint, uint8 byteLength) internal pure returns (bytes memory) {
        bytes memory b = new bytes(byteLength);
        for (uint8 i = 0; i < byteLength; i++) {
            b[byteLength - 1 - i] = bytes1(uint8(_uint >> (8 * i)));
        }
        return encodeBytes(b);
    }

    function encodeUint128(uint128 _uint, uint8 byteLength) internal pure returns (bytes memory) {
        return encodeUint(uint256(_uint), byteLength);
    }

    function encodeUint64(uint64 _uint, uint8 byteLength) internal pure returns (bytes memory) {
        return encodeUint(uint256(_uint), byteLength);
    }

    function encodeBytes(bytes memory input) internal pure returns (bytes memory) {
        uint256 length = input.length;

        if (length == 1 && uint8(input[0]) <= 0x7f) {
            // Если длина 1 и значение <= 0x7f, возвращаем как есть
            return input;
        } else if (length <= 55) {
            // Если длина <= 55, используем короткий формат
            bytes memory output = new bytes(1 + length);
            output[0] = bytes1(uint8(0x80 + length));
            for (uint256 i = 0; i < length; i++) {
                output[i + 1] = input[i];
            }
            return output;
        } else {
            // Если длина > 55, используем длинный формат
            uint256 tempLength = length;
            uint256 byteLength = 0;
            while (tempLength != 0) {
                byteLength++;
                tempLength >>= 8;
            }

            bytes memory output = new bytes(1 + byteLength + length);
            output[0] = bytes1(uint8(0xb7 + byteLength));
            // Исправлено: запись байтов длины в правильном порядке
            for (uint256 i = 0; i < byteLength; i++) {
                output[1 + byteLength - 1 - i] = bytes1(uint8(length >> (8 * i)));
            }
            // Копирование данных
            for (uint256 i = 0; i < length; i++) {
                output[1 + byteLength + i] = input[i];
            }
            return output;
        }
    }
    
    function encodeList(bytes[] memory _items) internal pure returns (bytes memory) {
        bytes memory concatenated;
        for (uint256 i = 0; i < _items.length; i++) {
            concatenated = concatenate(concatenated, _items[i]);
        }
        return concatenate(encodeLength(concatenated.length, 192), concatenated);
    }

    function encodeLength(uint256 _length, uint256 _offset) internal pure returns (bytes memory) {
        if (_length < 56) {
            return bytes(abi.encodePacked(uint8(_length + _offset)));
        } else {
            uint256 lenLen;
            uint256 i = 1;
            while (_length / i != 0) {
                lenLen++;
                i *= 256;
            }
            bytes memory b = bytes(abi.encodePacked(uint8(lenLen + _offset + 55)));
            for (i = (lenLen - 1) * 8; i > 0; i -= 8) {
                b = concatenate(b, bytes(abi.encodePacked(uint8(_length / (2 ** i)))));
            }
            return concatenate(b, bytes(abi.encodePacked(uint8(_length))));
        }
    }

    function concatenate(bytes memory a, bytes memory b) internal pure returns (bytes memory) {
        bytes memory result = new bytes(a.length + b.length);

        assembly {
            let resultPtr := add(result, 0x20)
            let aPtr := add(a, 0x20)
            let bPtr := add(b, 0x20)
            let aLength := mload(a)
            let bLength := mload(b)

            // Copy a to result
            for { let i := 0 } lt(i, aLength) { i := add(i, 0x20) } {
                mstore(add(resultPtr, i), mload(add(aPtr, i)))
            }

            // Copy b to result
            for { let i := 0 } lt(i, bLength) { i := add(i, 0x20) } {
                mstore(add(resultPtr, add(aLength, i)), mload(add(bPtr, i)))
            }
        }

        return result;
    }

}

