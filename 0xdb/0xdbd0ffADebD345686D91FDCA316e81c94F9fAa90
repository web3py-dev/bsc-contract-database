{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.19;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}"},"draft-IERC6093.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\n/**\r\n * @dev Standard ERC20 Errors\r\n * Interface of the ERC6093 custom errors for ERC20 tokens\r\n * as defined in https://eips.ethereum.org/EIPS/eip-6093\r\n */\r\ninterface IERC20Errors {\r\n    /**\r\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param balance Current balance for the interacting account.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     */\r\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     */\r\n    error ERC20InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     */\r\n    error ERC20InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\r\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\r\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     */\r\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error ERC20InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\r\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\r\n     */\r\n    error ERC20InvalidSpender(address spender);\r\n}\r\n\r\n/**\r\n * @dev Standard ERC721 Errors\r\n * Interface of the ERC6093 custom errors for ERC721 tokens\r\n * as defined in https://eips.ethereum.org/EIPS/eip-6093\r\n */\r\ninterface IERC721Errors {\r\n    /**\r\n     * @dev Indicates that an address can\u0027t be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\r\n     * Used in balance queries.\r\n     * @param owner Address of the current owner of a token.\r\n     */\r\n    error ERC721InvalidOwner(address owner);\r\n\r\n    /**\r\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\r\n     * @param tokenId Identifier number of a token.\r\n     */\r\n    error ERC721NonexistentToken(uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param tokenId Identifier number of a token.\r\n     * @param owner Address of the current owner of a token.\r\n     */\r\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     */\r\n    error ERC721InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     */\r\n    error ERC721InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     * @param tokenId Identifier number of a token.\r\n     */\r\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error ERC721InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     */\r\n    error ERC721InvalidOperator(address operator);\r\n}\r\n\r\n/**\r\n * @dev Standard ERC1155 Errors\r\n * Interface of the ERC6093 custom errors for ERC1155 tokens\r\n * as defined in https://eips.ethereum.org/EIPS/eip-6093\r\n */\r\ninterface IERC1155Errors {\r\n    /**\r\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param balance Current balance for the interacting account.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     */\r\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     */\r\n    error ERC1155InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     */\r\n    error ERC1155InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     * @param owner Address of the current owner of a token.\r\n     */\r\n    error ERC1155InsufficientApprovalForAll(address operator, address owner);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error ERC1155InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     */\r\n    error ERC1155InvalidOperator(address operator);\r\n\r\n    /**\r\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\r\n     * Used in batch transfers.\r\n     * @param idsLength Length of the array of token identifiers\r\n     * @param valuesLength Length of the array of token amounts\r\n     */\r\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\r\n}"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.19;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./IERC20Metadata.sol\";\r\nimport \"./Context.sol\";\r\nimport \"./draft-IERC6093.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./ReentrancyGuard.sol\";\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function sync() external;\r\n}\r\n\r\ninterface ILPPledge {\r\n    function updataReward(uint256 amount) external;\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn\u0027t required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors, Ownable , ReentrancyGuard{\r\n    mapping(address =\u003e uint256) private _balances;\r\n\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Indicates a failed `decreaseAllowance` request.\r\n     */\r\n    error ERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_, address initialOwner) Ownable(initialOwner) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        ISwapFactory swapFactory = ISwapFactory(_swapRouter.factory());\r\n        usdtPair = swapFactory.createPair(address(this), USDT);\r\n        isPairAddr[usdtPair] = true;\r\n        _whiteList[address(0)] = true;\r\n        _whiteList[initialOwner] = true;\r\n        _whiteList[address(this)] = true;\r\n        _mint(initialOwner,10000000000 * 10 ** 18);\r\n        _invitor[0x384a915C9494a062F5b9a8A5ff256a52c9aD2ffD] = address(1);\r\n        _allowances[address(this)][address(_swapRouter)] = type(uint256).max;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it\u0027s overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``\u0027s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `requestedDecrease`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 requestedDecrease) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance \u003c requestedDecrease) {\r\n            revert ERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\r\n        }\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - requestedDecrease);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal {\r\n        if (from == address(0)) {\r\n            revert ERC20InvalidSender(address(0));\r\n        }\r\n        if (to == address(0)) {\r\n            revert ERC20InvalidReceiver(address(0));\r\n        }\r\n        if(!isPairAddr[from]) {\r\n            updateUserEarn(from);\r\n        } else {\r\n            uint256 price = getSwapRouterAmountsOut(1e18);\r\n            uint256 buyValue = price * amount / 1e18;\r\n            if(buyValue \u003e buyMaxValue) {\r\n                revert(\"buyMaxAmount\");\r\n            }\r\n            uint256 culDays = (block.timestamp - startTime) / earnInterval;\r\n            uint256 value = userDayBuyValue[culDays][to];\r\n            if(value + buyValue \u003e tolDayBuyMaxValue) {\r\n                revert(\"tolDayBuyMaxValue\");\r\n            }\r\n            userDayBuyValue[culDays][to] += buyValue;\r\n        }\r\n        if(!isPairAddr[to]) {\r\n            updateUserEarn(to);\r\n        }\r\n        _update(from, to, amount);\r\n        register(from,to);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `amount` of tokens from `from` to `to`, or alternatively mints (or burns) if `from` (or `to`) is\r\n     * the zero address. All customizations to transfers, mints, and burns should be done by overriding this function.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _update(address from, address to, uint256 amount) internal virtual {\r\n        if (from == address(0)) {\r\n            _totalSupply += amount;\r\n        } else {\r\n            uint256 fromBalance = _balances[from];\r\n            if (fromBalance \u003c amount) {\r\n                revert ERC20InsufficientBalance(from, fromBalance, amount);\r\n            }\r\n            unchecked {\r\n                // Overflow not possible: amount \u003c= fromBalance \u003c= totalSupply.\r\n                _balances[from] = fromBalance - amount;\r\n            }\r\n        }\r\n\r\n        if (to == address(0)) {\r\n            unchecked {\r\n                // Overflow not possible: amount \u003c= totalSupply or amount \u003c= fromBalance \u003c= totalSupply.\r\n                _totalSupply -= amount;\r\n            }\r\n        } else {\r\n            if(!_whiteList[from] \u0026\u0026 !_whiteList[to]) {\r\n                uint256 feeA = amount * transferFee / 10000;\r\n                unchecked {\r\n                    _balances[transferFeeAddr] += feeA;\r\n                }\r\n                _LPPledge.updataReward(feeA);\r\n\r\n                emit Transfer(from, transferFeeAddr, feeA);\r\n\r\n                uint256 sellFeeA;\r\n                uint256 burnA;\r\n                if(isPairAddr[to]) {\r\n                    sellToken();\r\n\r\n                    sellFeeA = amount * sellFee / 10000;\r\n                    burnA = amount * sellBurnFee / 10000;\r\n\r\n                    unchecked {\r\n                        _balances[address(this)] += sellFeeA;\r\n                        _balances[sellBurnFeeAddr] += burnA;\r\n                        \r\n                    }                   \r\n                    emit Transfer(from, address(this), sellFeeA);\r\n                    emit Transfer(from, sellBurnFeeAddr, burnA);                           \r\n                }\r\n                amount = amount - feeA - sellFeeA - burnA;\r\n            }\r\n            unchecked {\r\n                // Overflow not possible: balance + amount is at most totalSupply, which we know fits into a uint256.\r\n                _balances[to] += amount;\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens and assigns them to `account`, by transferring it from address(0).\r\n     * Relies on the `_update` mechanism\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        if (account == address(0)) {\r\n            revert ERC20InvalidReceiver(address(0));\r\n        }\r\n        _update(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, by transferring it to address(0).\r\n     * Relies on the `_update` mechanism.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * NOTE: This function is not virtual, {_update} should be overridden instead\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        if (account == address(0)) {\r\n            revert ERC20InvalidSender(address(0));\r\n        }\r\n        _update(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        if (owner == address(0)) {\r\n            revert ERC20InvalidApprover(address(0));\r\n        }\r\n        if (spender == address(0)) {\r\n            revert ERC20InvalidSpender(address(0));\r\n        }\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            if (currentAllowance \u003c amount) {\r\n                revert ERC20InsufficientAllowance(spender, currentAllowance, amount);\r\n            }\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    ISwapRouter public constant _swapRouter= ISwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    address public constant USDT = 0x55d398326f99059fF775485246999027B3197955;\r\n    ILPPledge public _LPPledge;\r\n    address public usdtPair;\r\n    mapping(address =\u003e bool) public isPairAddr;\r\n    mapping(address =\u003e address) private _invitor;\r\n    mapping(address =\u003e uint256) private _invitorNum;\r\n    mapping(address =\u003e uint256) public validInvitorNum;\r\n    mapping(address =\u003e address[]) private _directThrust;\r\n    mapping(address =\u003e uint256) private userInvitorEarn;\r\n    mapping(address =\u003e bool) private _whiteList;\r\n    mapping(address =\u003e uint256) public userEarn;\r\n    mapping(address =\u003e uint256) public lastUpdateTime;\r\n    mapping(uint256 =\u003e mapping(address =\u003e uint256)) public userDayBuyValue;\r\n    mapping(address =\u003e UserEarnInfo) public userEarnInfos;\r\n\r\n\r\n    uint256 public startTime;\r\n    uint256 public buyMaxValue = 5e18;\r\n    uint256 public tolDayBuyMaxValue = 20000e18;\r\n    uint256 public earnInterval = 120 minutes;\r\n    uint256 public transferFee = 500;\r\n    uint256 public sellFee = 1000;\r\n    uint256 public sellBurnFee = 1000;\r\n    uint256 public sellFeeSwapAmount = 10e18;\r\n    address public transferFeeAddr;\r\n    address public sellFeeAddrs = 0x19AcB2A041b43d8c607e2FdF1e56b04eFED9C1bf;\r\n    address public sellBurnFeeAddr = 0x000000000000000000000000000000000000dEaD;\r\n    bool public isSellFeeSwaping;\r\n\r\n    uint256[20] public invitorEarnScale = [2000,1800,1600,1100,400,300,200,200,200,200,200,200,200,200,200,200,200,200,200,200];\r\n    uint256[4] public usdtValue = [1,3e18,4e18,5e18];\r\n    uint256[4] public usdtEarn = [50,100,300,500];\r\n\r\n    struct UserEarnInfo {\r\n        uint256 tolEarn;\r\n        uint256 tolInvitorEarn;\r\n    }\r\n\r\n    event Register(address indexed account, address indexed referRecommender, uint256 usdtValue, uint256 time);\r\n    event UpdateUserEarn(address indexed user,uint256 earnToken,uint256 elapsedCount,uint256 price, uint256 userBalances);\r\n    event UpdateInvitorEarn(address indexed account, address indexed referRecommender, uint256 tier, uint256 invitorEarn);\r\n    event SetWhite(address addr, bool enable);\r\n    event SetWhites(address[] addrs, bool enable);\r\n\r\n    function withdraw() external nonReentrant {\r\n        address user = _msgSender();\r\n        _withdraw(user);\r\n    }\r\n\r\n    function _withdraw(address _user) internal {\r\n        updateUserEarn(_user);\r\n        uint256 earn = userEarn[_user];\r\n        uint256 invitorEarn = userInvitorEarn[_user];\r\n        if(earn \u003e 0) {\r\n            userEarn[_user] = 0;\r\n            _update(usdtPair, _user, earn);\r\n            userEarnInfos[_user].tolEarn += earn;\r\n        }\r\n        if(invitorEarn \u003e 0) {\r\n            userInvitorEarn[_user] = 0;\r\n            _update(usdtPair, _user, invitorEarn);\r\n            userEarnInfos[_user].tolInvitorEarn += invitorEarn;\r\n        }\r\n        IUniswapV2Pair iPair = IUniswapV2Pair(usdtPair);\r\n        iPair.sync();\r\n\r\n    }\r\n\r\n    function register(address from, address to) private {\r\n        if(!isPairAddr[from] \u0026\u0026 !isPairAddr[to]){\r\n            if(_invitor[from] == address(0) \u0026\u0026 _invitor[to] != address(0)) {\r\n                _invitor[from] = to;\r\n                _invitorNum[to] ++;\r\n                _directThrust[to].push(from);\r\n                uint256 price = getSwapRouterAmountsOut(1e18);\r\n                uint256 usdtV = _balances[from] * price / 1e18;\r\n                if(usdtV \u003e= usdtValue[1]) {\r\n                    validInvitorNum[to] ++;\r\n                }\r\n                emit Register(from, to, usdtV, block.timestamp);\r\n            }\r\n        } \r\n    }\r\n\r\n    function updateUserEarn(address user) private {\r\n        if(lastUpdateTime[user] == 0) {\r\n            lastUpdateTime[user] = block.timestamp;\r\n        }\r\n        uint256 elapsedTime = block.timestamp - lastUpdateTime[user];\r\n        uint256 elapsedCount = elapsedTime / earnInterval;\r\n        if(elapsedCount \u003e 0) {\r\n            lastUpdateTime[user] += elapsedCount * earnInterval;\r\n            uint256 price = getSwapRouterAmountsOut(1e18);\r\n            uint256 earnToken = calcEarn(elapsedCount,_balances[user],price);\r\n            userEarn[user] += earnToken;\r\n            updateInvitorEarn(user,earnToken);\r\n\r\n            emit UpdateUserEarn(user,earnToken,elapsedCount,price,_balances[user]);\r\n        }\r\n    }\r\n\r\n    function calcEarn(uint256 elapsedCount, uint256 balance, uint256 price) private view returns (uint256) {\r\n        uint256 usdtV = balance * price / 1e18;\r\n        if(usdtV \u003c usdtValue[0]) {\r\n            uint256 earn = usdtV * usdtEarn[0] * elapsedCount / 10000;\r\n            return earn * 1e18 / price;\r\n        }\r\n        for(uint256 i = usdtValue.length; i != 0; i--) {\r\n            if(usdtValue[i-1] \u003c= usdtV) {\r\n                if(i == usdtValue.length) {\r\n                    uint256 earn = usdtValue[i-1] * usdtEarn[i-1] * elapsedCount / 10000;\r\n                    return earn * 1e18 / price;\r\n                } else {\r\n                    uint256 earn = usdtV * usdtEarn[i-1] * elapsedCount / 10000;\r\n                    return earn * 1e18 / price;\r\n                }               \r\n            }    \r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function updateInvitorEarn(address user,uint256 amount) private {\r\n        address addr = _invitor[user];\r\n        uint256 price = getSwapRouterAmountsOut(1e18);\r\n        uint256 usdtV;\r\n        for(uint256 i = 0;i \u003c 20 \u0026\u0026 addr != address(0); i++) {\r\n            usdtV = _balances[addr] * price / 1e18;\r\n            // invitor usdt value must be min usdt\r\n            if(validInvitorNum[addr] \u003e i \u0026\u0026 usdtV \u003e= usdtValue[1]) {\r\n                uint256 invitorEarn = amount * invitorEarnScale[i] / 10000;\r\n                userInvitorEarn[addr] += invitorEarn;\r\n                emit UpdateInvitorEarn(user,addr,i,invitorEarn);\r\n            }\r\n            addr = _invitor[addr];\r\n        }\r\n    }\r\n\r\n    function sellToken() private {\r\n        if(!isSellFeeSwaping \u0026\u0026 _balances[address(this)] \u003e= sellFeeSwapAmount) {\r\n            isSellFeeSwaping = true;\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = address(USDT);  \r\n            swapTokensForTokens(path,_balances[address(this)],0,sellFeeAddrs);\r\n            isSellFeeSwaping = false;\r\n        }\r\n    }\r\n\r\n    function getSwapRouterAmountsOut(uint256 _amount) private view returns (uint256) {\r\n        uint256 amountOut;\r\n        address[] memory path = new address[](2);\r\n        path[0] =  address(this);\r\n        path[1] = USDT;\r\n        uint256[] memory amounts = _swapRouter.getAmountsOut(_amount, path);\r\n        amountOut = amounts[1];\r\n        return amountOut;\r\n    }\r\n\r\n    function swapTokensForTokens(address[] memory path, uint256 tokenAmount,uint256 tokenOutMin, address to) private {\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            tokenOutMin, \r\n            path,\r\n            to,\r\n            block.timestamp + 60\r\n        );\r\n    }\r\n\r\n    function getTokenPrice() external view returns(uint256) {\r\n        return getSwapRouterAmountsOut(1e18);\r\n    }\r\n\r\n    function getBuyMaxAmount() external view returns(uint256) {\r\n        return buyMaxValue * 1e18 / getSwapRouterAmountsOut(1e18);\r\n    }\r\n\r\n    function getUserInvitorEarn(address user) external view returns(uint256) {\r\n        return userInvitorEarn[user];\r\n    }\r\n\r\n    function getUserInvitor(address user) external view returns(address) {\r\n        return _invitor[user];\r\n    }\r\n\r\n    function getUserInvitorNum(address user) external view returns(uint256) {\r\n        return _invitorNum[user];\r\n    }\r\n\r\n    receive() external payable {\r\n        _withdraw(_msgSender());\r\n    }\r\n    \r\n    function isWhite(address addr) external view returns(bool) {\r\n       return _whiteList[addr];\r\n    }\r\n\r\n    function setWhite(address addr, bool enable) external onlyOwner {\r\n        _whiteList[addr] = enable;\r\n        emit SetWhite(addr,enable);\r\n    }\r\n\r\n    function setWhites(address[] memory addrs, bool enable) external onlyOwner {\r\n        for(uint256 i = 0; i \u003c addrs.length; i++) {\r\n            _whiteList[addrs[i]] = enable;\r\n            emit SetWhites(addrs,enable);\r\n        }\r\n    } \r\n\r\n    function setBuyValue(uint256 buyMaxValue_,uint256 tolDayBuyMaxValue_) external onlyOwner {\r\n        buyMaxValue = buyMaxValue_;\r\n        tolDayBuyMaxValue = tolDayBuyMaxValue_;\r\n    }\r\n\r\n    function setEarnInterval(uint256 earnInterval_,uint256 startTime_) external onlyOwner {\r\n        earnInterval = earnInterval_;\r\n        startTime = startTime_;\r\n    }\r\n\r\n    function setTransferFeeAddr(address transferFeeAddr_) external onlyOwner {\r\n        transferFeeAddr = transferFeeAddr_;\r\n        _LPPledge= ILPPledge(transferFeeAddr_);\r\n    }\r\n\r\n    function setSellFeeAddrs_(address sellFeeAddrs_) external onlyOwner {\r\n        sellFeeAddrs = sellFeeAddrs_;\r\n    }\r\n\r\n    function setSellFeeSwapAmount_(uint256 sellFeeSwapAmount_) external onlyOwner {\r\n        sellFeeSwapAmount = sellFeeSwapAmount_;\r\n    }\r\n\r\n    function setUsdtEarn(uint256 usdtEarn0, uint256 usdtEarn1, uint256 usdtEarn2, uint256 usdtEarn3) external onlyOwner {\r\n        usdtEarn[0] = usdtEarn0;\r\n        usdtEarn[1]= usdtEarn1;\r\n        usdtEarn[2] = usdtEarn2;\r\n        usdtEarn[3] = usdtEarn3;\r\n    }\r\n\r\n    function setUsdtValue(uint256 usdtValue0, uint256 usdtValue1, uint256 usdtValue2, uint256 usdtValue3) external onlyOwner {\r\n        usdtValue[0] = usdtValue0;\r\n        usdtValue[1]= usdtValue1;\r\n        usdtValue[2] = usdtValue2;\r\n        usdtValue[3] = usdtValue3;\r\n    }\r\n    \r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.19;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.19;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.19;\r\n\r\nimport \"./Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.19;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler\u0027s defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    /**\r\n     * @dev Unauthorized reentrant call.\r\n     */\r\n    error ReentrancyGuardReentrantCall();\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        if (_status == _ENTERED) {\r\n            revert ReentrancyGuardReentrantCall();\r\n        }\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}"}}