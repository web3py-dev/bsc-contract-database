// SPDX-License-Identifier: MIT
// File: @openzeppelin/contracts/token/ERC20/IERC20.sol


// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);

    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}

// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol


// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)

pragma solidity ^0.8.0;


/**
 * @dev Interface for the optional metadata functions from the ERC20 standard.
 *
 * _Available since v4.1._
 */
interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

// File: @openzeppelin/contracts/utils/Context.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/token/ERC20/ERC20.sol


// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)

pragma solidity ^0.8.0;




/**
 * @dev Implementation of the {IERC20} interface.
 *
 * This implementation is agnostic to the way tokens are created. This means
 * that a supply mechanism has to be added in a derived contract using {_mint}.
 * For a generic mechanism see {ERC20PresetMinterPauser}.
 *
 * TIP: For a detailed writeup see our guide
 * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
 * to implement supply mechanisms].
 *
 * The default value of {decimals} is 18. To change this, you should override
 * this function so it returns a different value.
 *
 * We have followed general OpenZeppelin Contracts guidelines: functions revert
 * instead returning `false` on failure. This behavior is nonetheless
 * conventional and does not conflict with the expectations of ERC20
 * applications.
 *
 * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
 * This allows applications to reconstruct the allowance for all accounts just
 * by listening to said events. Other implementations of the EIP may not emit
 * these events, as it isn't required by the specification.
 *
 * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
 * functions have been added to mitigate the well-known issues around setting
 * allowances. See {IERC20-approve}.
 */
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) internal _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Returns the number of decimals used to get its user representation.
     * For example, if `decimals` equals `2`, a balance of `505` tokens should
     * be displayed to a user as `5.05` (`505 / 10 ** 2`).
     *
     * Tokens usually opt for a value of 18, imitating the relationship between
     * Ether and Wei. This is the default value returned by this function, unless
     * it's overridden.
     *
     * NOTE: This information is only used for _display_ purposes: it in
     * no way affects any of the arithmetic of the contract, including
     * {IERC20-balanceOf} and {IERC20-transfer}.
     */
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    /**
     * @dev See {IERC20-transfer}.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    /**
     * @dev See {IERC20-allowance}.
     */
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    /**
     * @dev See {IERC20-approve}.
     *
     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
     * `transferFrom`. This is semantically equivalent to an infinite approval.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    /**
     * @dev See {IERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20}.
     *
     * NOTE: Does not update the allowance if the current allowance
     * is the maximum `uint256`.
     *
     * Requirements:
     *
     * - `from` and `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     * - the caller must have allowance for ``from``'s tokens of at least
     * `amount`.
     */
    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {IERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    /**
     * @dev Moves `amount` of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     */
    function _transfer(address from, address to, uint256 amount) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by
            // decrementing then incrementing.
            _balances[to] += amount;
        }

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    /** @dev Creates `amount` tokens and assigns them to `account`, increasing
     * the total supply.
     *
     * Emits a {Transfer} event with `from` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     */
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        unchecked {
            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.
            _balances[account] += amount;
        }
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    /**
     * @dev Destroys `amount` tokens from `account`, reducing the
     * total supply.
     *
     * Emits a {Transfer} event with `to` set to the zero address.
     *
     * Requirements:
     *
     * - `account` cannot be the zero address.
     * - `account` must have at least `amount` tokens.
     */
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
            // Overflow not possible: amount <= accountBalance <= totalSupply.
            _totalSupply -= amount;
        }

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
     *
     * This internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    /**
     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.
     *
     * Does not update the allowance amount in case of infinite allowance.
     * Revert if not enough allowance is available.
     *
     * Might emit an {Approval} event.
     */
    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    /**
     * @dev Hook that is called before any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * will be transferred to `to`.
     * - when `from` is zero, `amount` tokens will be minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
     * has been transferred to `to`.
     * - when `from` is zero, `amount` tokens have been minted for `to`.
     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}
}

// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if the sender is not the owner.
     */
    function _checkOwner() internal view virtual {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby disabling any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: contracts/FRGX.sol


pragma solidity 0.8.18;




/**
 * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM
 * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to
 * be specified by overriding the virtual {_implementation} function.
 * 
 * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a
 * different contract through the {_delegate} function.
 * 
 * The success and return data of the delegated call will be returned back to the caller of the proxy.
 */
abstract contract Proxy {
    /**
     * @dev Delegates the current call to `implementation`.
     * 
     * This function does not return to its internall call site, it will return directly to the external caller.
     */
    function _delegate(address implementation) internal {
        // solhint-disable-next-line no-inline-assembly
        assembly {
            // Copy msg.data. We take full control of memory in this inline assembly
            // block because it will not return to Solidity code. We overwrite the
            // Solidity scratch pad at memory position 0.
            calldatacopy(0, 0, calldatasize())

            // Call the implementation.
            // out and outsize are 0 because we don't know the size yet.
            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)

            // Copy the returned data.
            returndatacopy(0, 0, returndatasize())

            switch result
            // delegatecall returns 0 on error.
            case 0 { revert(0, returndatasize()) }
            default { return(0, returndatasize()) }
        }
    }

    /**
     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function
     * and {_fallback} should delegate.
     */
    function _implementation() internal virtual view returns (address);

    /**
     * @dev Delegates the current call to the address returned by `_implementation()`.
     * 
     * This function does not return to its internall call site, it will return directly to the external caller.
     */
    function _fallback() internal {
        _beforeFallback();
        _delegate(_implementation());
    }

    /**
     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other
     * function in the contract matches the call data.
     */
    fallback () payable external {
        _fallback();
    }

    /**
     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data
     * is empty.
     */
    receive () payable external {
        _fallback();
    }

    /**
     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`
     * call, or as part of the Solidity `fallback` or `receive` functions.
     * 
     * If overriden should call `super._beforeFallback()`.
     */
    function _beforeFallback() internal virtual {
    }
}

interface IForsage {
    struct User {
        uint id;
        address referrer;
        uint partnersCount;
    }

    function users(address userAddress) external view returns(uint id, address referrer, uint partnersCount);
    function id1() external view returns(address);
    function multisig() external view returns(address);
}

interface IPancakeFactory {
    function getPair(address tokenA, address tokenB) external view returns(address);
}

interface IV2SwapRouter {
    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external;

    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) external payable;
    // function addLiquidity(address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) external;
}

interface IV2Pool {
    function mint(address to) external returns (uint liquidity);
}

contract TokenStorage {
    address public owner;

    constructor() {
        owner = msg.sender;
    }

    function withdraw(IERC20 token, address to, uint amount) public {
        require(msg.sender == owner, "TokenStorage: onlyOwner");

        token.transfer(to, amount);
    }
}

contract FRGXBasic is Ownable {
    address public impl;

    IForsage public forsage;
    IPancakeFactory public pancakeFactory;
    IV2SwapRouter public pancakeV2Router;
    address public wBNB;
    address public busd;
    address public locker;
    
    mapping (address => bool) public pools;

    TokenStorage public tokenStorage;

    address public marketingPool;
    mapping(address => bool) public blackList;

    // farming block
    uint public totalShares;

    uint public totalReward; 
    uint public pointsPerShare;
    mapping(address => bool) public accountsWithFId;
    mapping(address => uint256) public rewardDebt;
    uint public unlockTimestamp;
    uint public restrictionTimestamp;

    event DividendsDistributed(address account, uint sent);
    event RefRewards(address indexed from, address indexed to, uint amount);
}

contract FRGXProxy is Proxy, FRGXBasic {
    
    constructor(address _impl) {
        impl = _impl;
    }
    
    function update(address newImpl) public onlyOwner {
        impl = newImpl;
    }
    
    function _implementation() internal override view returns (address) {
        return impl;
    }
}

contract FRGXFactory is Ownable {
    FRGX impl;

    function deployImpl() public onlyOwner {
        impl = new FRGX();
    }

    function init(uint busdPoolBalance, uint unlockTimestamp) public payable onlyOwner {
        
        FRGXProxy proxy = new FRGXProxy(address(impl));

        FRGX instance = FRGX(address(proxy));
        instance.init();
        
        IPancakeFactory pancakeFactory = instance.pancakeFactory();
        IV2SwapRouter pancakeRouter = instance.pancakeV2Router();

        uint balance = instance.balanceOf(address(this));
        instance.approve(address(pancakeRouter), balance);

        address tokenStorage = address(instance.locker());

        pancakeRouter.addLiquidityETH{value: msg.value}(address(instance), balance/2, balance/2, msg.value, tokenStorage, block.timestamp + 1000);

        IERC20 busd = IERC20(instance.busd());

        busd.transferFrom(msg.sender, address(this), busdPoolBalance);
        busd.approve(address(pancakeRouter), busdPoolBalance);

        pancakeRouter.addLiquidity(address(busd), address(instance), busdPoolBalance, balance/2, busdPoolBalance, balance/2, tokenStorage, block.timestamp + 1000);

        instance.changePool(pancakeFactory.getPair(instance.wBNB(), address(proxy)), true);
        instance.changePool(pancakeFactory.getPair(instance.busd(), address(proxy)), true);

        instance.lock(unlockTimestamp);
        instance.transferOwnership(msg.sender);
    }
}
 
contract FRGX is FRGXBasic, ERC20 {
    // prod
    // IPancakeFactory public constant pankakeFactory = IPancakeFactory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73);
    // IV2SwapRouter public constant pancakeV2Router = IV2SwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);
    // address public constant wBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;
    // IForsage public forsage = IForsage(0x5acc84a3e955Bdd76467d3348077d003f00fFB97);
    
    // test
    // IPancakeFactory public constant pankakeFactory = IPancakeFactory(0x6725F303b657a9451d8BA641348b6761A6CC7a17);
    // IV2SwapRouter public constant pancakeV2Router = IV2SwapRouter(0xD99D1c33F9fC3444f8101754aBC46c52416550D1);
    // address public constant wBNB = 0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd;
    
    function name() public pure override returns(string memory) {
        return "FRGX";
    } 

    function symbol() public pure override returns(string memory) {
        return "FRGX";
    }

     constructor() ERC20("", "") {}

    function init() public onlyOwner {
        pancakeFactory = IPancakeFactory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73);
        pancakeV2Router = IV2SwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        wBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;
        forsage = IForsage(0x5acc84a3e955Bdd76467d3348077d003f00fFB97);
        busd = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;
        marketingPool = 0xd633Baba8142653900fCd9AB422F1514C795f75C;
        locker = 0x377d133039C19242Bc6699C17a200727257cF2fd;

        _mint(msg.sender, 21000000e18);
        _approve(address(this), address(pancakeV2Router), type(uint).max);
        tokenStorage = new TokenStorage();
    }

    function lock(uint _unlockTimestamp) public onlyOwner {
        unlockTimestamp = _unlockTimestamp;
        restrictionTimestamp = unlockTimestamp + 30 minutes;
    }

    function changePool(address poolAddress, bool status) public onlyOwner {
        pools[poolAddress] = status;
    }

    function burn(uint256 amount) public virtual {
        _burn(_msgSender(), amount);
    }

    function burnFrom(address account, uint256 amount) public virtual {
        _spendAllowance(account, _msgSender(), amount);
        _burn(account, amount);
    }

    function hasFId(address account) public view returns(bool) {
        (uint _id ,,) = forsage.users(account);
        return (_id > 0);
    }

    function updateBlacklist(address[] memory accounts, bool status) public onlyOwner {
        for(uint i = 0; i < accounts.length; i++) {
            blackList[accounts[i]] = status;
        }
    }

    function _checkRestriction(uint256 amount) private view returns(bool) {
        if(block.timestamp > restrictionTimestamp) {
            return true;
        }
        // 85
        // 260
        // 1050
        // 5250
        // 26250
        // 78450
        // 262500

        uint[7] memory availableAmounts = [uint256(85e18), 260e18, 1050e18, 5250e18, 26250e18, 78450e18, 262500e18];

        for(uint i = 0; i < availableAmounts.length; i++) {
            if(amount / 1e15 == availableAmounts[i] / 1e15) {
                return true;
            }
        }

        return false;
    }

    function _transfer(address from, address to, uint256 amount) internal virtual override  {
        require(block.timestamp >= unlockTimestamp, "transfer temprorary locked");
        require(!blackList[from] && !blackList[to], "blackList");
        require(tx.gasprice <= 15 gwei, "tx.gasprice should be less or equal 15 gwei"); 
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _distributeDividends(to);
        _distributeDividends(from);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");

        _balances[from] = fromBalance - amount;

        if(from == address(this) || to == address(this)) {
            if(accountsWithFId[from]) {
                totalShares-= amount;
            }

            _balances[to] += amount;
            emit Transfer(from, to, amount);

            if(hasFId(to)) {
                if(!accountsWithFId[to]) {
                    totalShares+= super.balanceOf(to);
                    accountsWithFId[to] = true;
                    rewardDebt[to] = pointsPerShare * super.balanceOf(to) / 1e18;
                } else {
                    totalShares+= amount;
                }
            }

            _updateRewardsDebt(from);
            _updateRewardsDebt(to);
            return;
        }
        
        uint fee;

        if(pools[from]) {
            require(_checkRestriction(amount), "amount restricted");
            if(!hasFId(to)) {
                fee = amount * 6 / 100;
                _balances[to]+= amount - fee;
                _balances[address(this)]+= fee;
                emit Transfer(from, to, amount - fee);
                emit Transfer(from, address(this), fee);

                totalReward+= amount*3/100;
                if(totalShares > 0) {
                    pointsPerShare+= amount*3/100 * 1e18 / totalShares;
                }
                
                _distribute15(from, amount);
            } else {
                fee = amount * 5 / 100;
                _balances[to]+= amount - fee;
                _balances[address(this)]+= fee;
                emit Transfer(from, to, amount - fee);
                emit Transfer(from, address(this), fee);

                if(!accountsWithFId[to]) {
                    totalShares+= super.balanceOf(to);
                    accountsWithFId[to] = true;
                    rewardDebt[to] = pointsPerShare * super.balanceOf(to) / 1e18;
                } else {
                    totalShares+= amount - fee;
                }
                
                _distribute10(from, to, amount);
            }
        } else if(pools[to]) {
            require(_checkRestriction(amount), "amount restricted");
            if(!hasFId(from)) {
                fee = amount * 6 / 100;
                _balances[to]+= amount - fee;
                _balances[address(this)]+= fee;
                emit Transfer(from, to, amount - fee);
                emit Transfer(from, address(this), fee);

                totalReward+= amount*3/100;
                if(totalShares > 0) {
                    pointsPerShare+= amount*3/100 * 1e18 / totalShares;
                }
                _distribute15(to, amount);
            } else {
                fee = amount * 5 / 100;
                _balances[to]+= amount - fee;
                _balances[address(this)]+= fee;
                emit Transfer(from, to, amount - fee);
                emit Transfer(from, address(this), fee);

                if(!accountsWithFId[from]) {
                    totalShares+= super.balanceOf(from);
                    accountsWithFId[from] = true;
                    rewardDebt[from] = pointsPerShare * super.balanceOf(from) / 1e18;
                } else {
                    totalShares-= amount;
                }
                
                _distribute10(to, from, amount);
            } 
        } else {
            _balances[to]+= amount;
            emit Transfer(from, to, amount);
            if(accountsWithFId[from]) {
                totalShares-= amount;
            }
            if(hasFId(to)) {
                if(!accountsWithFId[to]) {
                    totalShares+= super.balanceOf(to);
                    accountsWithFId[to] = true;
                    rewardDebt[to] = pointsPerShare * super.balanceOf(to) / 1e18;
                } else {
                    totalShares+= amount;
                }
            }
        }

        _updateRewardsDebt(from);
        _updateRewardsDebt(to);
    }

    function _distribute15(address poolAddress, uint256 amount) private {
        _updateLiquidityPool(poolAddress, amount * 1 / 100);
        _burn(address(this), amount * 1 / 100);
        _updateMarketingPool(amount * 1 / 100);
    }

    function _distribute10(address poolAddress, address account, uint256 amount) private {
        _updateLiquidityPool(poolAddress, amount * 5 / 1000);
        _burn(address(this), amount * 5 / 1000);
        _updateMarketingPool(amount * 1 / 100);
        _refReward(account, amount);
    }

    function _refReward(address account, uint256 amount) private {
        address id1 = forsage.id1();
        
        if(account == id1) {
            _sendRefRewards(account, account, amount * 15 / 1000);
            _sendRefRewards(account, account, amount * 10 / 1000);
            _sendRefRewards(account, account, amount * 5 / 1000);
            return;
        }

        (,address referrerAddress, ) = forsage.users(account);
        _sendRefRewards(account, referrerAddress, amount * 15 / 1000);

        if(referrerAddress == id1) {
            _sendRefRewards(account, referrerAddress, amount * 10 / 1000);
            _sendRefRewards(account, referrerAddress, amount * 5 / 1000);
            return;
        }

        (,referrerAddress, ) = forsage.users(referrerAddress);
        _sendRefRewards(account, referrerAddress, amount * 10 / 1000);
        
        if(referrerAddress == id1) {
            _sendRefRewards(account, referrerAddress, amount * 5 / 1000);
            return;
        }

        (,referrerAddress, ) = forsage.users(referrerAddress);
        _sendRefRewards(account, referrerAddress, amount * 5 / 1000);
    }

    function _sendRefRewards(address account, address to, uint256 amount) private {
        address id1 = forsage.id1();
        if(to == id1) {
            to = 0xD175f05906C5770E1E7fc34A57F09CD0f6CeBE10;
        }
        _transfer(address(this), to, amount);
        emit RefRewards(account, to, amount);
    }

    
    function _updateLiquidityPool(address callerPoolAddress, uint amount) private {
        address poolAddress = pancakeFactory.getPair(wBNB, address(this));
        address tokenToSwap = wBNB;
        if(poolAddress == callerPoolAddress) {
            poolAddress = pancakeFactory.getPair(busd, address(this));
            tokenToSwap = busd;
        }

        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = tokenToSwap;

        pancakeV2Router.swapExactTokensForTokens(
            amount / 2,
            1,
            path,
            address(tokenStorage),
            block.timestamp + 100
        );

        tokenStorage.withdraw(IERC20(tokenToSwap), address(this), IERC20(tokenToSwap).balanceOf(address(tokenStorage)));
       
        IERC20(tokenToSwap).transfer(poolAddress, IERC20(tokenToSwap).balanceOf(address(this)));
        _transfer(address(this), poolAddress, amount/2);

        IV2Pool(poolAddress).mint(address(this));

        // lock liquidity
        IERC20(poolAddress).transfer(locker, IERC20(poolAddress).balanceOf(address(this)));
    }

    function _updateMarketingPool(uint amount) private {
        _transfer(address(this), marketingPool, amount);
    }

    function balanceOf(address account) public view override returns (uint256) {
        return super.balanceOf(account) + cumulativeDividendsOf(account);
    }

    // farming block

    function update(uint storedAmount) internal {
        totalReward+= storedAmount;
        if(totalShares > 0) {
            pointsPerShare+= storedAmount * 1e18 / totalShares;
        }
    }

    function _distributeDividends(address account) internal {
        if(!accountsWithFId[account]) {
            return;
        }
        
        uint toSend = pointsPerShare * super.balanceOf(account) / 1e18 - rewardDebt[account];
        if(toSend == 0) {
            return;
        }
        rewardDebt[account]+= toSend;

        _transfer(address(this), account, toSend);
        emit DividendsDistributed(account, toSend);
    }

    function _updateRewardsDebt(address account) internal {
        rewardDebt[account] = pointsPerShare * super.balanceOf(account) / 1e18;
    }

    function cumulativeDividendsOf(address account) public view returns (uint256) {
        if(!accountsWithFId[account]) {
            return 0;
        }
        return pointsPerShare * super.balanceOf(account) / 1e18 - rewardDebt[account];
    }
}