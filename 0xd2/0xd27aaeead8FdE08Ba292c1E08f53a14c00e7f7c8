pragma solidity ^0.4.25;

library SafeMath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}

contract Ownable {
  address public owner;


  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);


  /**
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender
   * account.
   */
  function Ownable() public {
    owner = msg.sender;
  }


  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }


  /**
   * @dev Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }

}

contract ERC20Basic {
  function totalSupply() public constant returns (uint256);
  function balanceOf(address who) public view returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
}

contract BasicToken is ERC20Basic {
  using SafeMath for uint256;

  mapping(address => uint256) balances;

  /**
  * @dev transfer token for a specified address
  * @param _to The address to transfer to.
  * @param _value The amount to be transferred.
  */
  function transfer(address _to, uint256 _value) public returns (bool) {
    require(_value <= balances[msg.sender]);

    // SafeMath.sub will throw if there is not enough balance.
    balances[msg.sender] = balances[msg.sender].sub(_value);
    balances[_to] = balances[_to].add(_value);
    Transfer(msg.sender, _to, _value);
    return true;
  }

  /**
  * @dev Gets the balance of the specified address.
  * @param _owner The address to query the the balance of.
  * @return An uint256 representing the amount owned by the passed address.
  */
  function balanceOf(address _owner) public view returns (uint256 balance) {
    return balances[_owner];
  }

}

contract ERC20 is ERC20Basic {
  function allowance(address owner, address spender) public view returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract StandardToken is ERC20, BasicToken {

  mapping (address => mapping (address => uint256)) internal allowed;


  /**
   * @dev Transfer tokens from one address to another
   * @param _from address The address which you want to send tokens from
   * @param _to address The address which you want to transfer to
   * @param _value uint256 the amount of tokens to be transferred
   */
  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    require(_value <= balances[_from]);
    require(_value <= allowed[_from][msg.sender]);

    balances[_from] = balances[_from].sub(_value);
    balances[_to] = balances[_to].add(_value);
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    Transfer(_from, _to, _value);
    return true;
  }

  /**
   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.
   *
   * Beware that changing an allowance with this method brings the risk that someone may use both the old
   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this
   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
   * @param _spender The address which will spend the funds.
   * @param _value The amount of tokens to be spent.
   */
  function approve(address _spender, uint256 _value) public returns (bool) {
    allowed[msg.sender][_spender] = _value;
    Approval(msg.sender, _spender, _value);
    return true;
  }

  /**
   * @dev Function to check the amount of tokens that an owner allowed to a spender.
   * @param _owner address The address which owns the funds.
   * @param _spender address The address which will spend the funds.
   * @return A uint256 specifying the amount of tokens still available for the spender.
   */
  function allowance(address _owner, address _spender) public view returns (uint256) {
    return allowed[_owner][_spender];
  }

  /**
   * approve should be called when allowed[_spender] == 0. To increment
   * allowed value is better to use this function to avoid 2 calls (and wait until
   * the first transaction is mined)
   * From MonolithDAO Token.sol
   */
  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }

  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
    uint oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue > oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
    }
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }

}
contract zksync is StandardToken,Ownable {
    string public name = "zksync";
    string public symbol = "zksync";
    uint256 public decimals = 8;
    uint256 private _totalSupply = 19000000e8;
    uint256 public burnRate = 10;
    uint256 public HRate = 900;
    uint256 public ARate = 300;
    uint256 public BRate = 200;
    uint256 public CRate = 100;
    uint256 public DRate = 400;

    address public AAddr = address(0x0);
    address public BAddr = address(0x0);
    address public CAddr = address(0x0);
    address public DAddr = address(0x0);

    address public swapAddr = address(0x0);
    address public burnAddr = address(0x0);
    
    mapping(address => bool) whitelists;

    function zksync() public {
        balances[msg.sender] = _totalSupply;
    }

    function isUserInSuperNode(address user) public view returns (bool) {
        return whitelists[user];
    }

    function addToWhitelist(address user) public onlyOwner {
        whitelists[user] = true;
    }

    function removeFromWhitelist(address user) public onlyOwner {
        whitelists[user] = false;
    }


    function totalSupply() public constant returns (uint256) {
        return _totalSupply;
    }
    
    function calcFee(uint256 _value) constant returns (uint256) {
        return (_value.mul(HRate)).div(10000);
    }
    function calcBurnFee(uint256 _value) constant returns (uint256) {
        return (_value.mul(burnRate)).div(10000);
    }
    // function calcAFee(uint256 _value) constant returns (uint256) {
    //     return (_value.mul(ARate)).div(10000);
    // }
    // function calcBFee(uint256 _value) constant returns (uint256) {
    //     return (_value.mul(BRate)).div(10000);
    // }
    // function calcCFee(uint256 _value) constant returns (uint256) {
    //     return (_value.mul(CRate)).div(10000);
    // }
    // function calcDFee(uint256 _value) constant returns (uint256) {
    //     return (_value.mul(DRate)).div(10000);
    // }
    
    function setHRate(uint256 _value) public onlyOwner returns (bool) {
        HRate = _value;
    }

    function setARate(uint256 _value) public onlyOwner returns (bool) {
        ARate = _value;
    }

    function setBRate(uint256 _value) public onlyOwner returns (bool) {
        BRate = _value;
    }
    function setCRate(uint256 _value) public onlyOwner returns (bool) {
        CRate = _value;
    }

    function setDRate(uint256 _value) public onlyOwner returns (bool) {
        DRate = _value;
    }


    function setburnRate(uint256 _value) public onlyOwner returns (bool) {
        burnRate = _value;
    }
    
    function setAAddr(address _addr) public onlyOwner returns (bool) {
        AAddr = _addr;
    }

    function setSwapAddr(address _addr) public onlyOwner returns (bool) {
        swapAddr = _addr;  
    }
    function setBurnAddr(address _addr) public onlyOwner returns (bool) {
        burnAddr = _addr;  
    }

    function setBAddr(address _addr) public onlyOwner returns (bool) {
        BAddr = _addr;  
    }

    function setCAddr(address _addr) public onlyOwner returns (bool) {
        CAddr = _addr;  
    }
    function setDAddr(address _addr) public onlyOwner returns (bool) {
        DAddr = _addr;  
    }

  function transfer(address _to, uint256 _value) public returns (bool) {
    
    uint256 fee = calcFee(_value);
    uint256 sendAmount = _value.sub(fee);

    uint256 burnfee = calcBurnFee(_value);
    uint256 sendAmount2 = _value.sub(burnfee);
    
    if(swapAddr == _to || swapAddr == msg.sender){
      super.transfer(_to, sendAmount);
      if (fee > 0) {
          super.transfer(AAddr, fee.mul(ARate).div(1000));
          super.transfer(BAddr, fee.mul(BRate).div(1000));
          super.transfer(CAddr, fee.mul(CRate).div(1000));
          super.transfer(DAddr, fee.mul(DRate).div(1000));
          
      }
    }else{
        super.transfer(_to, sendAmount2);
        super.transfer(burnAddr, burnfee);
    }
    return true;
  }
  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
    require(_to != address(0));
    require(_value <= balances[_from]);
    require(_value <= allowed[_from][msg.sender]);

    uint256 fee = calcFee(_value);
    uint256 sendAmount = _value.sub(fee);
    uint256 burnfee = calcBurnFee(_value);
    uint256 sendAmount2 = _value.sub(burnfee);

    balances[_from] = balances[_from].sub(_value);
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);

    if(_from == swapAddr || swapAddr == _to){

      balances[_to] = balances[_to].add(sendAmount);
      Transfer(_from, _to, sendAmount);

      if (fee > 0) {
        balances[AAddr] = balances[AAddr].add(fee.mul(ARate).div(1000));
        balances[BAddr] = balances[BAddr].add(fee.mul(BRate).div(1000));
        balances[CAddr] = balances[CAddr].add(fee.mul(CRate).div(1000));
        balances[DAddr] = balances[DAddr].add(fee.mul(DRate).div(1000));
        balances[burnAddr] = balances[burnAddr].add(burnfee);
        
        Transfer(_from, AAddr, fee.mul(ARate).div(1000));
        Transfer(_from, BAddr, fee.mul(BRate).div(1000));
        Transfer(_from, CAddr, fee.mul(CRate).div(1000));
        Transfer(_from, burnAddr, burnfee);
      }
    }else{
        
        balances[burnAddr] = balances[burnAddr].add(burnfee);
        balances[_to] = balances[_to].add(sendAmount2);
        Transfer(_from, _to, sendAmount2);
        Transfer(_from, burnAddr, burnfee);
    }
    return true;
  }
   function despoit(address token,uint256 amount) public returns(bool) {
        return ERC20(token).transferFrom(msg.sender,address(this),amount);
    }
    function withdraw(address token,address _to,uint256 amount) public onlyOwner returns(bool) {
        return ERC20(token).transfer(_to,amount);
    }
}